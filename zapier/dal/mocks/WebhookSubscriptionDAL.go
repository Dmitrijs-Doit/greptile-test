// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/zapier/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// WebhookSubscriptionDAL is an autogenerated mock type for the WebhookSubscriptionDAL type
type WebhookSubscriptionDAL struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, subscription
func (_m *WebhookSubscriptionDAL) Create(ctx context.Context, subscription *domain.WebhookSubscription) (string, error) {
	ret := _m.Called(ctx, subscription)

	var r0 string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, *domain.WebhookSubscription) (string, error)); ok {
		return rf(ctx, subscription)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *domain.WebhookSubscription) string); ok {
		r0 = rf(ctx, subscription)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.WebhookSubscription) error); ok {
		r1 = rf(ctx, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, subscriptionID
func (_m *WebhookSubscriptionDAL) Delete(ctx context.Context, subscriptionID string) error {
	ret := _m.Called(ctx, subscriptionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subscriptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetForDispatch provides a mock function with given fields: ctx, customer, itemID, event
func (_m *WebhookSubscriptionDAL) GetForDispatch(ctx context.Context, customer *firestore.DocumentRef, itemID string, event domain.EventType) ([]*domain.WebhookSubscription, error) {
	ret := _m.Called(ctx, customer, itemID, event)

	var r0 []*domain.WebhookSubscription

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, string, domain.EventType) ([]*domain.WebhookSubscription, error)); ok {
		return rf(ctx, customer, itemID, event)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, string, domain.EventType) []*domain.WebhookSubscription); ok {
		r0 = rf(ctx, customer, itemID, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.WebhookSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, string, domain.EventType) error); ok {
		r1 = rf(ctx, customer, itemID, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWebhookSubscriptionDAL interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebhookSubscriptionDAL creates a new instance of WebhookSubscriptionDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebhookSubscriptionDAL(t mockConstructorTestingTNewWebhookSubscriptionDAL) *WebhookSubscriptionDAL {
	mock := &WebhookSubscriptionDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
