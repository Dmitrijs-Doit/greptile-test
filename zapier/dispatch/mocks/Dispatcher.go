// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/zapier/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// Dispatcher is an autogenerated mock type for the Dispatcher type
type Dispatcher struct {
	mock.Mock
}

// Dispatch provides a mock function with given fields: ctx, data, customer, entityID, event
func (_m *Dispatcher) Dispatch(ctx context.Context, data interface{}, customer *firestore.DocumentRef, entityID string, event domain.EventType) error {
	ret := _m.Called(ctx, data, customer, entityID, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *firestore.DocumentRef, string, domain.EventType) error); ok {
		r0 = rf(ctx, data, customer, entityID, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewDispatcher creates a new instance of Dispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDispatcher(t mockConstructorTestingTNewDispatcher) *Dispatcher {
	mock := &Dispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
