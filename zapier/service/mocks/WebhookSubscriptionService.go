// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	alertsservice "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/alerts/service"
	budgetsservice "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/budgets/service"

	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/zapier/service"
)

// WebhookSubscriptionService is an autogenerated mock type for the WebhookSubscriptionService type
type WebhookSubscriptionService struct {
	mock.Mock
}

// CreateSubscription provides a mock function with given fields: ctx, req
func (_m *WebhookSubscriptionService) CreateSubscription(ctx context.Context, req *service.CreateWebhookRequest) (*service.CreateWebhookResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *service.CreateWebhookResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateWebhookRequest) *service.CreateWebhookResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CreateWebhookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateWebhookRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: ctx, req
func (_m *WebhookSubscriptionService) DeleteSubscription(ctx context.Context, req *service.DeleteWebhookRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.DeleteWebhookRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlertsMock provides a mock function with given fields:
func (_m *WebhookSubscriptionService) GetAlertsMock() []alertsservice.WebhookAlertNotification {
	ret := _m.Called()

	var r0 []alertsservice.WebhookAlertNotification
	if rf, ok := ret.Get(0).(func() []alertsservice.WebhookAlertNotification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]alertsservice.WebhookAlertNotification)
		}
	}

	return r0
}

// GetBudgetsMock provides a mock function with given fields:
func (_m *WebhookSubscriptionService) GetBudgetsMock() []budgetsservice.BudgetAPI {
	ret := _m.Called()

	var r0 []budgetsservice.BudgetAPI
	if rf, ok := ret.Get(0).(func() []budgetsservice.BudgetAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]budgetsservice.BudgetAPI)
		}
	}

	return r0
}

type mockConstructorTestingTNewWebhookSubscriptionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebhookSubscriptionService creates a new instance of WebhookSubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebhookSubscriptionService(t mockConstructorTestingTNewWebhookSubscriptionService) *WebhookSubscriptionService {
	mock := &WebhookSubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
