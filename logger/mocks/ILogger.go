// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// ILogger is an autogenerated mock type for the ILogger type
type ILogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: v
func (_m *ILogger) Debug(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: format, v
func (_m *ILogger) Debugf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Debugln provides a mock function with given fields: v
func (_m *ILogger) Debugln(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// End provides a mock function with given fields: ctx
func (_m *ILogger) End(ctx *gin.Context) {
	_m.Called(ctx)
}

// Error provides a mock function with given fields: v
func (_m *ILogger) Error(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: format, v
func (_m *ILogger) Errorf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Errorln provides a mock function with given fields: v
func (_m *ILogger) Errorln(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: v
func (_m *ILogger) Fatal(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: format, v
func (_m *ILogger) Fatalf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Fatalln provides a mock function with given fields: v
func (_m *ILogger) Fatalln(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: v
func (_m *ILogger) Info(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: format, v
func (_m *ILogger) Infof(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Infoln provides a mock function with given fields: v
func (_m *ILogger) Infoln(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Print provides a mock function with given fields: v
func (_m *ILogger) Print(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Printf provides a mock function with given fields: format, v
func (_m *ILogger) Printf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Println provides a mock function with given fields: v
func (_m *ILogger) Println(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// SetLabel provides a mock function with given fields: key, value
func (_m *ILogger) SetLabel(key string, value string) {
	_m.Called(key, value)
}

// SetLabels provides a mock function with given fields: labels
func (_m *ILogger) SetLabels(labels map[string]string) {
	_m.Called(labels)
}

// Trace provides a mock function with given fields:
func (_m *ILogger) Trace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Warning provides a mock function with given fields: v
func (_m *ILogger) Warning(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Warningf provides a mock function with given fields: format, v
func (_m *ILogger) Warningf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Warningln provides a mock function with given fields: v
func (_m *ILogger) Warningln(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// NewILogger creates a new instance of ILogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILogger {
	mock := &ILogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
