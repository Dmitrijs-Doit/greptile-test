// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/rippling/pkg"

	ripplingpkg "github.com/doitintl/rippling/pkg"
)

// IRipplingDAL is an autogenerated mock type for the IRipplingDAL type
type IRipplingDAL struct {
	mock.Mock
}

// GetAccountManagers provides a mock function with given fields: ctx
func (_m *IRipplingDAL) GetAccountManagers(ctx context.Context) (pkg.AccountManagersMap, error) {
	ret := _m.Called(ctx)

	var r0 pkg.AccountManagersMap

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) (pkg.AccountManagersMap, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) pkg.AccountManagersMap); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkg.AccountManagersMap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployee provides a mock function with given fields: ctx, email
func (_m *IRipplingDAL) GetEmployee(ctx context.Context, email string) (*ripplingpkg.Employee, error) {
	ret := _m.Called(ctx, email)

	var r0 *ripplingpkg.Employee

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*ripplingpkg.Employee, error)); ok {
		return rf(ctx, email)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *ripplingpkg.Employee); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ripplingpkg.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployees provides a mock function with given fields: ctx
func (_m *IRipplingDAL) GetEmployees(ctx context.Context) ([]*ripplingpkg.Employee, error) {
	ret := _m.Called(ctx)

	var r0 []*ripplingpkg.Employee

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]*ripplingpkg.Employee, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []*ripplingpkg.Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ripplingpkg.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldSalesManagers provides a mock function with given fields: ctx
func (_m *IRipplingDAL) GetFieldSalesManagers(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRipplingDAL creates a new instance of IRipplingDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRipplingDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRipplingDAL {
	mock := &IRipplingDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
