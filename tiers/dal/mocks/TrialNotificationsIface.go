// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/tiers/dal"
	mock "github.com/stretchr/testify/mock"
)

// TrialNotificationsIface is an autogenerated mock type for the TrialNotificationsIface type
type TrialNotificationsIface struct {
	mock.Mock
}

// GetCustomerTrialNotifications provides a mock function with given fields: ctx, customerID
func (_m *TrialNotificationsIface) GetCustomerTrialNotifications(ctx context.Context, customerID string) (*dal.CustomerTrialNotifications, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *dal.CustomerTrialNotifications
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dal.CustomerTrialNotifications, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dal.CustomerTrialNotifications); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dal.CustomerTrialNotifications)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCustomerTrialNotification provides a mock function with given fields: ctx, customerID, data
func (_m *TrialNotificationsIface) SetCustomerTrialNotification(ctx context.Context, customerID string, data *dal.CustomerTrialNotifications) error {
	ret := _m.Called(ctx, customerID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dal.CustomerTrialNotifications) error); ok {
		r0 = rf(ctx, customerID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTrialNotificationsIface creates a new instance of TrialNotificationsIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrialNotificationsIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrialNotificationsIface {
	mock := &TrialNotificationsIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
