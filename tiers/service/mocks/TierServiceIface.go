// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pkg "github.com/doitintl/firestore/pkg"
	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/tiers/service"
)

// TierServiceIface is an autogenerated mock type for the TierServiceIface type
type TierServiceIface struct {
	mock.Mock
}

// CustomerCanAccessFeature provides a mock function with given fields: ctx, ID, key
func (_m *TierServiceIface) CustomerCanAccessFeature(ctx context.Context, ID string, key pkg.TiersFeatureKey) (bool, error) {
	ret := _m.Called(ctx, ID, key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.TiersFeatureKey) (bool, error)); ok {
		return rf(ctx, ID, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.TiersFeatureKey) bool); ok {
		r0 = rf(ctx, ID, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkg.TiersFeatureKey) error); ok {
		r1 = rf(ctx, ID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTrialNotifications provides a mock function with given fields: ctx, dryRun
func (_m *TierServiceIface) SendTrialNotifications(ctx context.Context, dryRun bool) error {
	ret := _m.Called(ctx, dryRun)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, dryRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTier provides a mock function with given fields: ctx, ID, upd
func (_m *TierServiceIface) UpdateTier(ctx context.Context, ID string, upd *service.TierUpdateRequest) error {
	ret := _m.Called(ctx, ID, upd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *service.TierUpdateRequest) error); ok {
		r0 = rf(ctx, ID, upd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTierServiceIface creates a new instance of TierServiceIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTierServiceIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TierServiceIface {
	mock := &TierServiceIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
