// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// CloudHealthDAL is an autogenerated mock type for the CloudHealthDAL type
type CloudHealthDAL struct {
	mock.Mock
}

// GetCustomerCloudHealthID provides a mock function with given fields: ctx, customerRef
func (_m *CloudHealthDAL) GetCustomerCloudHealthID(ctx context.Context, customerRef *firestore.DocumentRef) (string, error) {
	ret := _m.Called(ctx, customerRef)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) string); ok {
		r0 = rf(ctx, customerRef)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCloudHealthDAL interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloudHealthDAL creates a new instance of CloudHealthDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloudHealthDAL(t mockConstructorTestingTNewCloudHealthDAL) *CloudHealthDAL {
	mock := &CloudHealthDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
