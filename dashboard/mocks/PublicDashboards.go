// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dashboard "github.com/doitintl/hello/scheduled-tasks/dashboard"

	mock "github.com/stretchr/testify/mock"
)

// PublicDashboards is an autogenerated mock type for the PublicDashboards type
type PublicDashboards struct {
	mock.Mock
}

// GetCustomerDashboardsWithCloudReports provides a mock function with given fields: ctx, customerID
func (_m *PublicDashboards) GetCustomerDashboardsWithCloudReports(ctx context.Context, customerID string) ([]*dashboard.Dashboard, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerDashboardsWithCloudReports")
	}

	var r0 []*dashboard.Dashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*dashboard.Dashboard, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*dashboard.Dashboard); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dashboard.Dashboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardsWithCloudReportsCustomerIDs provides a mock function with given fields: ctx
func (_m *PublicDashboards) GetDashboardsWithCloudReportsCustomerIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboardsWithCloudReportsCustomerIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportWidgetDashboardsWidgetState provides a mock function with given fields: ctx, customerID, reportID, state
func (_m *PublicDashboards) UpdateReportWidgetDashboardsWidgetState(ctx context.Context, customerID string, reportID string, state dashboard.WidgetRefreshState) error {
	ret := _m.Called(ctx, customerID, reportID, state)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportWidgetDashboardsWidgetState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, dashboard.WidgetRefreshState) error); ok {
		r0 = rf(ctx, customerID, reportID, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPublicDashboards creates a new instance of PublicDashboards. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublicDashboards(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublicDashboards {
	mock := &PublicDashboards{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
