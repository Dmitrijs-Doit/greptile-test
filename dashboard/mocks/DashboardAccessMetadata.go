// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/dashboard/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DashboardAccessMetadata is an autogenerated mock type for the DashboardAccessMetadata type
type DashboardAccessMetadata struct {
	mock.Mock
}

// GetDashboardAccessMetadata provides a mock function with given fields: ctx, customerID, orgID, dashboardID
func (_m *DashboardAccessMetadata) GetDashboardAccessMetadata(ctx context.Context, customerID string, orgID string, dashboardID string) (*domain.DashboardAccessMetadata, error) {
	ret := _m.Called(ctx, customerID, orgID, dashboardID)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboardAccessMetadata")
	}

	var r0 *domain.DashboardAccessMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.DashboardAccessMetadata, error)); ok {
		return rf(ctx, customerID, orgID, dashboardID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.DashboardAccessMetadata); ok {
		r0 = rf(ctx, customerID, orgID, dashboardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DashboardAccessMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerID, orgID, dashboardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomerDashboardAccessMetadata provides a mock function with given fields: ctx, customerID
func (_m *DashboardAccessMetadata) ListCustomerDashboardAccessMetadata(ctx context.Context, customerID string) ([]*domain.DashboardAccessMetadata, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomerDashboardAccessMetadata")
	}

	var r0 []*domain.DashboardAccessMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.DashboardAccessMetadata, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.DashboardAccessMetadata); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DashboardAccessMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDashboardAccessMetadata provides a mock function with given fields: ctx, accessMetadata
func (_m *DashboardAccessMetadata) SaveDashboardAccessMetadata(ctx context.Context, accessMetadata *domain.DashboardAccessMetadata) error {
	ret := _m.Called(ctx, accessMetadata)

	if len(ret) == 0 {
		panic("no return value specified for SaveDashboardAccessMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DashboardAccessMetadata) error); ok {
		r0 = rf(ctx, accessMetadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShouldRefreshDashboard provides a mock function with given fields: ctx, customerID, orgID, dashboardID, timeRefreshThreshold
func (_m *DashboardAccessMetadata) ShouldRefreshDashboard(ctx context.Context, customerID string, orgID string, dashboardID string, timeRefreshThreshold time.Duration) (bool, *domain.DashboardAccessMetadata, error) {
	ret := _m.Called(ctx, customerID, orgID, dashboardID, timeRefreshThreshold)

	if len(ret) == 0 {
		panic("no return value specified for ShouldRefreshDashboard")
	}

	var r0 bool
	var r1 *domain.DashboardAccessMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration) (bool, *domain.DashboardAccessMetadata, error)); ok {
		return rf(ctx, customerID, orgID, dashboardID, timeRefreshThreshold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration) bool); ok {
		r0 = rf(ctx, customerID, orgID, dashboardID, timeRefreshThreshold)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Duration) *domain.DashboardAccessMetadata); ok {
		r1 = rf(ctx, customerID, orgID, dashboardID, timeRefreshThreshold)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DashboardAccessMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, time.Duration) error); ok {
		r2 = rf(ctx, customerID, orgID, dashboardID, timeRefreshThreshold)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateTimeLastRefreshed provides a mock function with given fields: ctx, customerID, orgID, dashboardID
func (_m *DashboardAccessMetadata) UpdateTimeLastRefreshed(ctx context.Context, customerID string, orgID string, dashboardID string) error {
	ret := _m.Called(ctx, customerID, orgID, dashboardID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTimeLastRefreshed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, customerID, orgID, dashboardID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDashboardAccessMetadata creates a new instance of DashboardAccessMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDashboardAccessMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *DashboardAccessMetadata {
	mock := &DashboardAccessMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
