// Code generated by mockery v2.43.0. DO NOT EDIT.

package doitproducts

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"

	time "time"
)

// mockDoitPackagePrivate is an autogenerated mock type for the doitPackagePrivate type
type mockDoitPackagePrivate struct {
	mock.Mock
}

// contractBillingData provides a mock function with given fields: ctx, billingDataPath
func (_m *mockDoitPackagePrivate) contractBillingData(ctx context.Context, billingDataPath string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, billingDataPath)

	if len(ret) == 0 {
		panic("no return value specified for contractBillingData")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return rf(ctx, billingDataPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, billingDataPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, billingDataPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// contractContext provides a mock function with given fields: ctx, contract
func (_m *mockDoitPackagePrivate) contractContext(ctx context.Context, contract *pkg.Contract) (*ContractContext, error) {
	ret := _m.Called(ctx, contract)

	if len(ret) == 0 {
		panic("no return value specified for contractContext")
	}

	var r0 *ContractContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.Contract) (*ContractContext, error)); ok {
		return rf(ctx, contract)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.Contract) *ContractContext); ok {
		r0 = rf(ctx, contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ContractContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.Contract) error); ok {
		r1 = rf(ctx, contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// contractTierData provides a mock function with given fields: ctx, tierRef
func (_m *mockDoitPackagePrivate) contractTierData(ctx context.Context, tierRef *firestore.DocumentRef) (*Tier, error) {
	ret := _m.Called(ctx, tierRef)

	if len(ret) == 0 {
		panic("no return value specified for contractTierData")
	}

	var r0 *Tier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (*Tier, error)); ok {
		return rf(ctx, tierRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) *Tier); ok {
		r0 = rf(ctx, tierRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, tierRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// customerContractsData provides a mock function with given fields: ctx, customerRef, invoiceRuntime, contractType
func (_m *mockDoitPackagePrivate) customerContractsData(ctx context.Context, customerRef *firestore.DocumentRef, invoiceRuntime time.Time, contractType string) (map[string]*pkg.Contract, error) {
	ret := _m.Called(ctx, customerRef, invoiceRuntime, contractType)

	if len(ret) == 0 {
		panic("no return value specified for customerContractsData")
	}

	var r0 map[string]*pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, time.Time, string) (map[string]*pkg.Contract, error)); ok {
		return rf(ctx, customerRef, invoiceRuntime, contractType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, time.Time, string) map[string]*pkg.Contract); ok {
		r0 = rf(ctx, customerRef, invoiceRuntime, contractType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, time.Time, string) error); ok {
		r1 = rf(ctx, customerRef, invoiceRuntime, contractType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// customerSingleSaleContracts provides a mock function with given fields: ctx, customerRef, invoiceRuntime, contractType
func (_m *mockDoitPackagePrivate) customerSingleSaleContracts(ctx context.Context, customerRef *firestore.DocumentRef, invoiceRuntime time.Time, contractType string) (map[string]*pkg.Contract, error) {
	ret := _m.Called(ctx, customerRef, invoiceRuntime, contractType)

	if len(ret) == 0 {
		panic("no return value specified for customerSingleSaleContracts")
	}

	var r0 map[string]*pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, time.Time, string) (map[string]*pkg.Contract, error)); ok {
		return rf(ctx, customerRef, invoiceRuntime, contractType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, time.Time, string) map[string]*pkg.Contract); ok {
		r0 = rf(ctx, customerRef, invoiceRuntime, contractType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, time.Time, string) error); ok {
		r1 = rf(ctx, customerRef, invoiceRuntime, contractType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockDoitPackagePrivate creates a new instance of mockDoitPackagePrivate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDoitPackagePrivate(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDoitPackagePrivate {
	mock := &mockDoitPackagePrivate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
