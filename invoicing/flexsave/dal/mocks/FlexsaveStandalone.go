// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/invoicing/pkg"

	testing "testing"

	time "time"
)

// FlexsaveStandalone is an autogenerated mock type for the FlexsaveStandalone type
type FlexsaveStandalone struct {
	mock.Mock
}

// BatchSetFlexsaveBillingData provides a mock function with given fields: ctx, assetRefMap
func (_m *FlexsaveStandalone) BatchSetFlexsaveBillingData(ctx context.Context, assetRefMap map[string]pkg.MonthlyBillingFlexsaveStandalone) error {
	ret := _m.Called(ctx, assetRefMap)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]pkg.MonthlyBillingFlexsaveStandalone) error); ok {
		r0 = rf(ctx, assetRefMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerStandaloneAssetIDtoMonthlyBillingData provides a mock function with given fields: ctx, customerRef, invoiceMonth, assetType
func (_m *FlexsaveStandalone) GetCustomerStandaloneAssetIDtoMonthlyBillingData(ctx context.Context, customerRef *firestore.DocumentRef, invoiceMonth time.Time, assetType string) (map[string]*pkg.MonthlyBillingFlexsaveStandalone, error) {
	ret := _m.Called(ctx, customerRef, invoiceMonth, assetType)

	var r0 map[string]*pkg.MonthlyBillingFlexsaveStandalone
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, time.Time, string) map[string]*pkg.MonthlyBillingFlexsaveStandalone); ok {
		r0 = rf(ctx, customerRef, invoiceMonth, assetType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pkg.MonthlyBillingFlexsaveStandalone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, time.Time, string) error); ok {
		r1 = rf(ctx, customerRef, invoiceMonth, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFlexsaveStandalone creates a new instance of FlexsaveStandalone. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFlexsaveStandalone(t testing.TB) *FlexsaveStandalone {
	mock := &FlexsaveStandalone{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
