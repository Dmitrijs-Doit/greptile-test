// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/invoicing/pkg"

	time "time"
)

// MonthlyBillingData is an autogenerated mock type for the MonthlyBillingData type
type MonthlyBillingData struct {
	mock.Mock
}

// BatchUpdateMonthlyBillingData provides a mock function with given fields: ctx, invoiceMonthString, assetIDToBillingDataMap, useAnalyticsCollection
func (_m *MonthlyBillingData) BatchUpdateMonthlyBillingData(ctx context.Context, invoiceMonthString string, assetIDToBillingDataMap map[*firestore.DocumentRef]interface{}, useAnalyticsCollection bool) error {
	ret := _m.Called(ctx, invoiceMonthString, assetIDToBillingDataMap, useAnalyticsCollection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[*firestore.DocumentRef]interface{}, bool) error); ok {
		r0 = rf(ctx, invoiceMonthString, assetIDToBillingDataMap, useAnalyticsCollection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerAWSAssetIDtoMonthlyBillingData provides a mock function with given fields: ctx, customerRef, invoiceMonth, useAnalyticsCollection
func (_m *MonthlyBillingData) GetCustomerAWSAssetIDtoMonthlyBillingData(ctx context.Context, customerRef *firestore.DocumentRef, invoiceMonth time.Time, useAnalyticsCollection bool) (map[string]*pkg.MonthlyBillingAmazonWebServices, error) {
	ret := _m.Called(ctx, customerRef, invoiceMonth, useAnalyticsCollection)

	var r0 map[string]*pkg.MonthlyBillingAmazonWebServices
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, time.Time, bool) map[string]*pkg.MonthlyBillingAmazonWebServices); ok {
		r0 = rf(ctx, customerRef, invoiceMonth, useAnalyticsCollection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pkg.MonthlyBillingAmazonWebServices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, time.Time, bool) error); ok {
		r1 = rf(ctx, customerRef, invoiceMonth, useAnalyticsCollection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
