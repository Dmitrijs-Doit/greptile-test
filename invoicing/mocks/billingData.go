// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/doitintl/hello/scheduled-tasks/invoicing/aws"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/invoicing/pkg"

	time "time"
)

// BillingData is an autogenerated mock type for the BillingData type
type BillingData struct {
	mock.Mock
}

// GetBillableAssetIDs provides a mock function with given fields: ctx, invoiceMonth
func (_m *BillingData) GetBillableAssetIDs(ctx context.Context, invoiceMonth time.Time) ([]string, error) {
	ret := _m.Called(ctx, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for GetBillableAssetIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]string, error)); ok {
		return rf(ctx, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []string); ok {
		r0 = rf(ctx, invoiceMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, invoiceMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillableCustomerIDs provides a mock function with given fields: ctx, invoiceMonth
func (_m *BillingData) GetBillableCustomerIDs(ctx context.Context, invoiceMonth time.Time) ([]string, []string, []string, error) {
	ret := _m.Called(ctx, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for GetBillableCustomerIDs")
	}

	var r0 []string
	var r1 []string
	var r2 []string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]string, []string, []string, error)); ok {
		return rf(ctx, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []string); ok {
		r0 = rf(ctx, invoiceMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) []string); ok {
		r1 = rf(ctx, invoiceMonth)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Time) []string); ok {
		r2 = rf(ctx, invoiceMonth)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]string)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, time.Time) error); ok {
		r3 = rf(ctx, invoiceMonth)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetCloudhealthCustomerIDsFromFirestore provides a mock function with given fields: ctx
func (_m *BillingData) GetCloudhealthCustomerIDsFromFirestore(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudhealthCustomerIDsFromFirestore")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerBillingData provides a mock function with given fields: ctx, customerID, invoiceMonth
func (_m *BillingData) GetCustomerBillingData(ctx *gin.Context, customerID string, invoiceMonth time.Time) (map[time.Time]map[pkg.CostAndSavingsAwsLineItemKey]*pkg.CostAndSavingsAwsLineItem, []string, error) {
	ret := _m.Called(ctx, customerID, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerBillingData")
	}

	var r0 map[time.Time]map[pkg.CostAndSavingsAwsLineItemKey]*pkg.CostAndSavingsAwsLineItem
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, time.Time) (map[time.Time]map[pkg.CostAndSavingsAwsLineItemKey]*pkg.CostAndSavingsAwsLineItem, []string, error)); ok {
		return rf(ctx, customerID, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, time.Time) map[time.Time]map[pkg.CostAndSavingsAwsLineItemKey]*pkg.CostAndSavingsAwsLineItem); ok {
		r0 = rf(ctx, customerID, invoiceMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[time.Time]map[pkg.CostAndSavingsAwsLineItemKey]*pkg.CostAndSavingsAwsLineItem)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, time.Time) []string); ok {
		r1 = rf(ctx, customerID, invoiceMonth)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(*gin.Context, string, time.Time) error); ok {
		r2 = rf(ctx, customerID, invoiceMonth)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCustomerBillingSessionID provides a mock function with given fields: ctx, customerID, invoiceMonth
func (_m *BillingData) GetCustomerBillingSessionID(ctx context.Context, customerID string, invoiceMonth time.Time) string {
	ret := _m.Called(ctx, customerID, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerBillingSessionID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) string); ok {
		r0 = rf(ctx, customerID, invoiceMonth)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCustomerInvoicingReadiness provides a mock function with given fields: ctx, customerID, invoiceMonth, invoicingDaySwitchOver
func (_m *BillingData) GetCustomerInvoicingReadiness(ctx context.Context, customerID string, invoiceMonth time.Time, invoicingDaySwitchOver int) (bool, error) {
	ret := _m.Called(ctx, customerID, invoiceMonth, invoicingDaySwitchOver)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerInvoicingReadiness")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) (bool, error)); ok {
		return rf(ctx, customerID, invoiceMonth, invoicingDaySwitchOver)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int) bool); ok {
		r0 = rf(ctx, customerID, invoiceMonth, invoicingDaySwitchOver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, int) error); ok {
		r1 = rf(ctx, customerID, invoiceMonth, invoicingDaySwitchOver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStandaloneCustomerIDsFromFirestore provides a mock function with given fields: ctx
func (_m *BillingData) GetStandaloneCustomerIDsFromFirestore(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStandaloneCustomerIDsFromFirestore")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAnyInvoiceBeenIssued provides a mock function with given fields: ctx, invoiceMonth
func (_m *BillingData) HasAnyInvoiceBeenIssued(ctx context.Context, invoiceMonth string) (bool, error) {
	ret := _m.Called(ctx, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for HasAnyInvoiceBeenIssued")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, invoiceMonth)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, invoiceMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasCustomerInvoiceBeenIssued provides a mock function with given fields: ctx, customerID, invoiceMonth
func (_m *BillingData) HasCustomerInvoiceBeenIssued(ctx context.Context, customerID string, invoiceMonth time.Time) (bool, error) {
	ret := _m.Called(ctx, customerID, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for HasCustomerInvoiceBeenIssued")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (bool, error)); ok {
		return rf(ctx, customerID, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) bool); ok {
		r0 = rf(ctx, customerID, invoiceMonth)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, customerID, invoiceMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCreditUtilizationToFS provides a mock function with given fields: ctx, invoiceMonth, credits
func (_m *BillingData) SaveCreditUtilizationToFS(ctx context.Context, invoiceMonth time.Time, credits []*aws.CustomerCreditAmazonWebServices) error {
	ret := _m.Called(ctx, invoiceMonth, credits)

	if len(ret) == 0 {
		panic("no return value specified for SaveCreditUtilizationToFS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, []*aws.CustomerCreditAmazonWebServices) error); ok {
		r0 = rf(ctx, invoiceMonth, credits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapshotCustomerBillingTable provides a mock function with given fields: ctx, customerID, invoiceMonth
func (_m *BillingData) SnapshotCustomerBillingTable(ctx context.Context, customerID string, invoiceMonth time.Time) error {
	ret := _m.Called(ctx, customerID, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for SnapshotCustomerBillingTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, customerID, invoiceMonth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBillingData creates a new instance of BillingData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBillingData(t interface {
	mock.TestingT
	Cleanup(func())
}) *BillingData {
	mock := &BillingData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
