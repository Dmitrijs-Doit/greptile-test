// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudanalytics "github.com/doitintl/hello/scheduled-tasks/cloudanalytics"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/query/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BillingDataQuery is an autogenerated mock type for the BillingDataQuery type
type BillingDataQuery struct {
	mock.Mock
}

// GetBillingDataQuery provides a mock function with given fields: ctx, invoiceMonth, accounts, provider
func (_m *BillingDataQuery) GetBillingDataQuery(ctx context.Context, invoiceMonth time.Time, accounts []string, provider string) (*cloudanalytics.QueryRequest, error) {
	ret := _m.Called(ctx, invoiceMonth, accounts, provider)

	var r0 *cloudanalytics.QueryRequest

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, time.Time, []string, string) (*cloudanalytics.QueryRequest, error)); ok {
		return rf(ctx, invoiceMonth, accounts, provider)
	}

	if rf, ok := ret.Get(0).(func(context.Context, time.Time, []string, string) *cloudanalytics.QueryRequest); ok {
		r0 = rf(ctx, invoiceMonth, accounts, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudanalytics.QueryRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, []string, string) error); ok {
		r1 = rf(ctx, invoiceMonth, accounts, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingQueryFilters provides a mock function with given fields: provider, costTypeFilters, costTypeInverse, systemLabelKey, systemLabelFilters, systemLabelInverse
func (_m *BillingDataQuery) GetBillingQueryFilters(provider string, costTypeFilters []string, costTypeInverse bool, systemLabelKey string, systemLabelFilters []string, systemLabelInverse bool) ([]*domain.QueryRequestX, error) {
	ret := _m.Called(provider, costTypeFilters, costTypeInverse, systemLabelKey, systemLabelFilters, systemLabelInverse)

	var r0 []*domain.QueryRequestX

	var r1 error

	if rf, ok := ret.Get(0).(func(string, []string, bool, string, []string, bool) ([]*domain.QueryRequestX, error)); ok {
		return rf(provider, costTypeFilters, costTypeInverse, systemLabelKey, systemLabelFilters, systemLabelInverse)
	}

	if rf, ok := ret.Get(0).(func(string, []string, bool, string, []string, bool) []*domain.QueryRequestX); ok {
		r0 = rf(provider, costTypeFilters, costTypeInverse, systemLabelKey, systemLabelFilters, systemLabelInverse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.QueryRequestX)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string, bool, string, []string, bool) error); ok {
		r1 = rf(provider, costTypeFilters, costTypeInverse, systemLabelKey, systemLabelFilters, systemLabelInverse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeSettings provides a mock function with given fields: month
func (_m *BillingDataQuery) GetTimeSettings(month time.Time) *cloudanalytics.QueryRequestTimeSettings {
	ret := _m.Called(month)

	var r0 *cloudanalytics.QueryRequestTimeSettings
	if rf, ok := ret.Get(0).(func(time.Time) *cloudanalytics.QueryRequestTimeSettings); ok {
		r0 = rf(month)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudanalytics.QueryRequestTimeSettings)
		}
	}

	return r0
}

// NewBillingDataQuery creates a new instance of BillingDataQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBillingDataQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *BillingDataQuery {
	mock := &BillingDataQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
