// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/doitintl/hello/scheduled-tasks/invoicing/aws"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CommonAWSInvoicing is an autogenerated mock type for the commonAWSInvoicing type
type CommonAWSInvoicing struct {
	mock.Mock
}

// CalculateSpendAndCreditsData provides a mock function with given fields: invoiceMonthString, accountID, date, cost, entityRef, assetRef, credits, accountsData, creditsData
func (_m *CommonAWSInvoicing) CalculateSpendAndCreditsData(invoiceMonthString string, accountID string, date time.Time, cost float64, entityRef *firestore.DocumentRef, assetRef *firestore.DocumentRef, credits []*aws.CustomerCreditAmazonWebServices, accountsData map[string]float64, creditsData map[string]map[string]float64) {
	_m.Called(invoiceMonthString, accountID, date, cost, entityRef, assetRef, credits, accountsData, creditsData)
}

// GetAmazonWebServicesCredits provides a mock function with given fields: ctx, invoiceMonth, customerRef, accountsWithAssets
func (_m *CommonAWSInvoicing) GetAmazonWebServicesCredits(ctx context.Context, invoiceMonth time.Time, customerRef *firestore.DocumentRef, accountsWithAssets []string) ([]*aws.CustomerCreditAmazonWebServices, error) {
	ret := _m.Called(ctx, invoiceMonth, customerRef, accountsWithAssets)

	var r0 []*aws.CustomerCreditAmazonWebServices
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, *firestore.DocumentRef, []string) []*aws.CustomerCreditAmazonWebServices); ok {
		r0 = rf(ctx, invoiceMonth, customerRef, accountsWithAssets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aws.CustomerCreditAmazonWebServices)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, *firestore.DocumentRef, []string) error); ok {
		r1 = rf(ctx, invoiceMonth, customerRef, accountsWithAssets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceMonth provides a mock function with given fields: ctx, invoiceMonthInput
func (_m *CommonAWSInvoicing) GetInvoiceMonth(ctx context.Context, invoiceMonthInput string) (time.Time, error) {
	ret := _m.Called(ctx, invoiceMonthInput)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context, string) time.Time); ok {
		r0 = rf(ctx, invoiceMonthInput)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, invoiceMonthInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
