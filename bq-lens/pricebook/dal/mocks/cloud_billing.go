// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudbilling "google.golang.org/api/cloudbilling/v1"

	mock "github.com/stretchr/testify/mock"
)

// CloudBilling is an autogenerated mock type for the CloudBilling type
type CloudBilling struct {
	mock.Mock
}

// GetServiceSKUs provides a mock function with given fields: ctx, serviceName
func (_m *CloudBilling) GetServiceSKUs(ctx context.Context, serviceName string) (*cloudbilling.ListSkusResponse, error) {
	ret := _m.Called(ctx, serviceName)

	var r0 *cloudbilling.ListSkusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cloudbilling.ListSkusResponse, error)); ok {
		return rf(ctx, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cloudbilling.ListSkusResponse); ok {
		r0 = rf(ctx, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudbilling.ListSkusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService provides a mock function with given fields: ctx
func (_m *CloudBilling) NewService(ctx context.Context) (*cloudbilling.APIService, error) {
	ret := _m.Called(ctx)

	var r0 *cloudbilling.APIService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*cloudbilling.APIService, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *cloudbilling.APIService); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudbilling.APIService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloudBilling creates a new instance of CloudBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudBilling(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudBilling {
	mock := &CloudBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
