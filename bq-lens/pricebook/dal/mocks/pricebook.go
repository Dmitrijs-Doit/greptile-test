// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/pricebook/domain"

	mock "github.com/stretchr/testify/mock"
)

// Pricebook is an autogenerated mock type for the Pricebook type
type Pricebook struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, edition
func (_m *Pricebook) Get(ctx context.Context, edition domain.Edition) (*domain.PricebookDocument, error) {
	ret := _m.Called(ctx, edition)

	var r0 *domain.PricebookDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Edition) (*domain.PricebookDocument, error)); ok {
		return rf(ctx, edition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Edition) *domain.PricebookDocument); ok {
		r0 = rf(ctx, edition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PricebookDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Edition) error); ok {
		r1 = rf(ctx, edition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, edition, data
func (_m *Pricebook) Set(ctx context.Context, edition domain.Edition, data domain.PricebookDocument) error {
	ret := _m.Called(ctx, edition, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Edition, domain.PricebookDocument) error); ok {
		r0 = rf(ctx, edition, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPricebook creates a new instance of Pricebook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPricebook(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pricebook {
	mock := &Pricebook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
