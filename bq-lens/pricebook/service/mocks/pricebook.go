// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/pricebook/domain"
	mock "github.com/stretchr/testify/mock"
)

// Pricebook is an autogenerated mock type for the Pricebook type
type Pricebook struct {
	mock.Mock
}

// GetEditionPricing provides a mock function with given fields: ctx, params
func (_m *Pricebook) GetEditionPricing(ctx context.Context, params domain.PricebookDTO) (float64, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetEditionPricing")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PricebookDTO) (float64, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.PricebookDTO) float64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.PricebookDTO) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnDemandPricebook provides a mock function with given fields: ctx
func (_m *Pricebook) GetOnDemandPricebook(ctx context.Context) (map[string]float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOnDemandPricebook")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]float64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPricebooks provides a mock function with given fields: ctx
func (_m *Pricebook) GetPricebooks(ctx context.Context) (domain.PriceBooksByEdition, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPricebooks")
	}

	var r0 domain.PriceBooksByEdition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.PriceBooksByEdition, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.PriceBooksByEdition); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PriceBooksByEdition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEditionPrices provides a mock function with given fields: ctx
func (_m *Pricebook) SetEditionPrices(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetEditionPrices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLegacyFlatRatePrices provides a mock function with given fields: ctx
func (_m *Pricebook) SetLegacyFlatRatePrices(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetLegacyFlatRatePrices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPricebook creates a new instance of Pricebook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPricebook(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pricebook {
	mock := &Pricebook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
