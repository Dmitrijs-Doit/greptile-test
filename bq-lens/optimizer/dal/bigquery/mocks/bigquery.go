// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	bigquery "cloud.google.com/go/bigquery"
	bigqueryiface "github.com/doitintl/bigquery/iface"

	bqmodels "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/domain/bigquery"

	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Bigquery is an autogenerated mock type for the Bigquery type
type Bigquery struct {
	mock.Mock
}

// GetDatasetLocationAndProjectID provides a mock function with given fields: ctx, bq, datasetID
func (_m *Bigquery) GetDatasetLocationAndProjectID(ctx context.Context, bq *bigquery.Client, datasetID string) (string, string, error) {
	ret := _m.Called(ctx, bq, datasetID)

	if len(ret) == 0 {
		panic("no return value specified for GetDatasetLocationAndProjectID")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string) (string, string, error)); ok {
		return rf(ctx, bq, datasetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string) string); ok {
		r0 = rf(ctx, bq, datasetID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string) string); ok {
		r1 = rf(ctx, bq, datasetID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *bigquery.Client, string) error); ok {
		r2 = rf(ctx, bq, datasetID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTableDiscoveryMetadata provides a mock function with given fields: ctx, bq
func (_m *Bigquery) GetTableDiscoveryMetadata(ctx context.Context, bq *bigquery.Client) (*bigquery.TableMetadata, error) {
	ret := _m.Called(ctx, bq)

	if len(ret) == 0 {
		panic("no return value specified for GetTableDiscoveryMetadata")
	}

	var r0 *bigquery.TableMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client) (*bigquery.TableMetadata, error)); ok {
		return rf(ctx, bq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client) *bigquery.TableMetadata); ok {
		r0 = rf(ctx, bq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bigquery.TableMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client) error); ok {
		r1 = rf(ctx, bq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunAggregatedJobStatisticsQuery provides a mock function with given fields: ctx, bq, projectID, location
func (_m *Bigquery) RunAggregatedJobStatisticsQuery(ctx context.Context, bq *bigquery.Client, projectID string, location string) ([]bqmodels.AggregatedJobStatistic, error) {
	ret := _m.Called(ctx, bq, projectID, location)

	if len(ret) == 0 {
		panic("no return value specified for RunAggregatedJobStatisticsQuery")
	}

	var r0 []bqmodels.AggregatedJobStatistic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, string) ([]bqmodels.AggregatedJobStatistic, error)); ok {
		return rf(ctx, bq, projectID, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, string) []bqmodels.AggregatedJobStatistic); ok {
		r0 = rf(ctx, bq, projectID, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.AggregatedJobStatistic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string, string) error); ok {
		r1 = rf(ctx, bq, projectID, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunBillingProjectSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunBillingProjectSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunBillingProjectResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunBillingProjectSlots")
	}

	var r0 *bqmodels.RunBillingProjectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunBillingProjectResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunBillingProjectResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunBillingProjectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunBillingProjectsWithEditionsQuery provides a mock function with given fields: ctx, query, bq
func (_m *Bigquery) RunBillingProjectsWithEditionsQuery(ctx context.Context, query string, bq *bigquery.Client) ([]bqmodels.BillingProjectsWithReservationsResult, error) {
	ret := _m.Called(ctx, query, bq)

	if len(ret) == 0 {
		panic("no return value specified for RunBillingProjectsWithEditionsQuery")
	}

	var r0 []bqmodels.BillingProjectsWithReservationsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *bigquery.Client) ([]bqmodels.BillingProjectsWithReservationsResult, error)); ok {
		return rf(ctx, query, bq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *bigquery.Client) []bqmodels.BillingProjectsWithReservationsResult); ok {
		r0 = rf(ctx, query, bq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.BillingProjectsWithReservationsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *bigquery.Client) error); ok {
		r1 = rf(ctx, query, bq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCheckCompleteDaysQuery provides a mock function with given fields: ctx, query, bq
func (_m *Bigquery) RunCheckCompleteDaysQuery(ctx context.Context, query string, bq *bigquery.Client) ([]bqmodels.CheckCompleteDaysResult, error) {
	ret := _m.Called(ctx, query, bq)

	if len(ret) == 0 {
		panic("no return value specified for RunCheckCompleteDaysQuery")
	}

	var r0 []bqmodels.CheckCompleteDaysResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *bigquery.Client) ([]bqmodels.CheckCompleteDaysResult, error)); ok {
		return rf(ctx, query, bq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *bigquery.Client) []bqmodels.CheckCompleteDaysResult); ok {
		r0 = rf(ctx, query, bq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.CheckCompleteDaysResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *bigquery.Client) error); ok {
		r1 = rf(ctx, query, bq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCostFromTableTypesQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunCostFromTableTypesQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.CostFromTableTypesResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunCostFromTableTypesQuery")
	}

	var r0 []bqmodels.CostFromTableTypesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.CostFromTableTypesResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.CostFromTableTypesResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.CostFromTableTypesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunDatasetStoragePriceQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunDatasetStoragePriceQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.DatasetStoragePriceResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunDatasetStoragePriceQuery")
	}

	var r0 []bqmodels.DatasetStoragePriceResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.DatasetStoragePriceResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.DatasetStoragePriceResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.DatasetStoragePriceResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunDatasetStorageTBQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunDatasetStorageTBQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.DatasetStorageTBResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunDatasetStorageTBQuery")
	}

	var r0 []bqmodels.DatasetStorageTBResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.DatasetStorageTBResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.DatasetStorageTBResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.DatasetStorageTBResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunDiscountsAllCustomersQuery provides a mock function with given fields: ctx, query, bq
func (_m *Bigquery) RunDiscountsAllCustomersQuery(ctx context.Context, query string, bq *bigquery.Client) ([]bqmodels.DiscountsAllCustomersResult, error) {
	ret := _m.Called(ctx, query, bq)

	if len(ret) == 0 {
		panic("no return value specified for RunDiscountsAllCustomersQuery")
	}

	var r0 []bqmodels.DiscountsAllCustomersResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *bigquery.Client) ([]bqmodels.DiscountsAllCustomersResult, error)); ok {
		return rf(ctx, query, bq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *bigquery.Client) []bqmodels.DiscountsAllCustomersResult); ok {
		r0 = rf(ctx, query, bq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.DiscountsAllCustomersResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *bigquery.Client) error); ok {
		r1 = rf(ctx, query, bq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterpriseBillingProjectSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunEnterpriseBillingProjectSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunEnterpriseBillingProjectResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterpriseBillingProjectSlots")
	}

	var r0 *bqmodels.RunEnterpriseBillingProjectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunEnterpriseBillingProjectResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunEnterpriseBillingProjectResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunEnterpriseBillingProjectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterprisePlusBillingProjectSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunEnterprisePlusBillingProjectSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunEnterprisePlusBillingProjectResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterprisePlusBillingProjectSlots")
	}

	var r0 *bqmodels.RunEnterprisePlusBillingProjectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunEnterprisePlusBillingProjectResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunEnterprisePlusBillingProjectResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunEnterprisePlusBillingProjectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterprisePlusScheduledQueriesMovementQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunEnterprisePlusScheduledQueriesMovementQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.EnterprisePlusScheduledQueriesMovementResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterprisePlusScheduledQueriesMovementQuery")
	}

	var r0 []bqmodels.EnterprisePlusScheduledQueriesMovementResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.EnterprisePlusScheduledQueriesMovementResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.EnterprisePlusScheduledQueriesMovementResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.EnterprisePlusScheduledQueriesMovementResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterprisePlusSlotsExplorerQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunEnterprisePlusSlotsExplorerQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.EnterprisePlusSlotsExplorerResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterprisePlusSlotsExplorerQuery")
	}

	var r0 []bqmodels.EnterprisePlusSlotsExplorerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.EnterprisePlusSlotsExplorerResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.EnterprisePlusSlotsExplorerResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.EnterprisePlusSlotsExplorerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterprisePlusUserSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunEnterprisePlusUserSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunEnterprisePlusUserSlotsResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterprisePlusUserSlots")
	}

	var r0 *bqmodels.RunEnterprisePlusUserSlotsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunEnterprisePlusUserSlotsResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunEnterprisePlusUserSlotsResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunEnterprisePlusUserSlotsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterpriseScheduledQueriesMovementQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunEnterpriseScheduledQueriesMovementQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.EnterpriseScheduledQueriesMovementResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterpriseScheduledQueriesMovementQuery")
	}

	var r0 []bqmodels.EnterpriseScheduledQueriesMovementResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.EnterpriseScheduledQueriesMovementResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.EnterpriseScheduledQueriesMovementResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.EnterpriseScheduledQueriesMovementResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterpriseSlotsExplorerQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunEnterpriseSlotsExplorerQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.EnterpriseSlotsExplorerResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterpriseSlotsExplorerQuery")
	}

	var r0 []bqmodels.EnterpriseSlotsExplorerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.EnterpriseSlotsExplorerResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.EnterpriseSlotsExplorerResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.EnterpriseSlotsExplorerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunEnterpriseUserSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunEnterpriseUserSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunEnterpriseUserSlotsResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunEnterpriseUserSlots")
	}

	var r0 *bqmodels.RunEnterpriseUserSlotsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunEnterpriseUserSlotsResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunEnterpriseUserSlotsResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunEnterpriseUserSlotsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunFlatRateSlotsExplorerQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunFlatRateSlotsExplorerQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.FlatRateSlotsExplorerResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunFlatRateSlotsExplorerQuery")
	}

	var r0 []bqmodels.FlatRateSlotsExplorerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.FlatRateSlotsExplorerResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.FlatRateSlotsExplorerResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.FlatRateSlotsExplorerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunFlatRateUserSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunFlatRateUserSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunUserSlotsResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunFlatRateUserSlots")
	}

	var r0 *bqmodels.RunUserSlotsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunUserSlotsResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunUserSlotsResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunUserSlotsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunOnDemandBillingProjectQuery provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunOnDemandBillingProjectQuery(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunODBillingProjectResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunOnDemandBillingProjectQuery")
	}

	var r0 *bqmodels.RunODBillingProjectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunODBillingProjectResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunODBillingProjectResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunODBillingProjectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunOnDemandDatasetQuery provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunOnDemandDatasetQuery(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunODDatasetResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunOnDemandDatasetQuery")
	}

	var r0 *bqmodels.RunODDatasetResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunODDatasetResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunODDatasetResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunODDatasetResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunOnDemandProjectQuery provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunOnDemandProjectQuery(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunODProjectResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunOnDemandProjectQuery")
	}

	var r0 *bqmodels.RunODProjectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunODProjectResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunODProjectResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunODProjectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunOnDemandSlotsExplorerQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunOnDemandSlotsExplorerQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.OnDemandSlotsExplorerResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunOnDemandSlotsExplorerQuery")
	}

	var r0 []bqmodels.OnDemandSlotsExplorerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.OnDemandSlotsExplorerResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.OnDemandSlotsExplorerResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.OnDemandSlotsExplorerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunOnDemandUserQuery provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunOnDemandUserQuery(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunODUserResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunOnDemandUserQuery")
	}

	var r0 *bqmodels.RunODUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunODUserResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunODUserResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunODUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunProjectStoragePriceQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunProjectStoragePriceQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.ProjectStoragePriceResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunProjectStoragePriceQuery")
	}

	var r0 []bqmodels.ProjectStoragePriceResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.ProjectStoragePriceResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.ProjectStoragePriceResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.ProjectStoragePriceResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunProjectStorageTBQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunProjectStorageTBQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.ProjectStorageTBResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunProjectStorageTBQuery")
	}

	var r0 []bqmodels.ProjectStorageTBResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.ProjectStorageTBResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.ProjectStorageTBResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.ProjectStorageTBResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunQuery provides a mock function with given fields: ctx, bq, query
func (_m *Bigquery) RunQuery(ctx context.Context, bq *bigquery.Client, query string) (bigqueryiface.RowIterator, error) {
	ret := _m.Called(ctx, bq, query)

	if len(ret) == 0 {
		panic("no return value specified for RunQuery")
	}

	var r0 bigqueryiface.RowIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string) (bigqueryiface.RowIterator, error)); ok {
		return rf(ctx, bq, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string) bigqueryiface.RowIterator); ok {
		r0 = rf(ctx, bq, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bigqueryiface.RowIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string) error); ok {
		r1 = rf(ctx, bq, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunScheduledQueriesMovementQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunScheduledQueriesMovementQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.ScheduledQueriesMovementResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunScheduledQueriesMovementQuery")
	}

	var r0 []bqmodels.ScheduledQueriesMovementResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.ScheduledQueriesMovementResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.ScheduledQueriesMovementResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.ScheduledQueriesMovementResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunStandardBillingProjectSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunStandardBillingProjectSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunStandardBillingProjectResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunStandardBillingProjectSlots")
	}

	var r0 *bqmodels.RunStandardBillingProjectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunStandardBillingProjectResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunStandardBillingProjectResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunStandardBillingProjectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunStandardScheduledQueriesMovementQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunStandardScheduledQueriesMovementQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.StandardScheduledQueriesMovementResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunStandardScheduledQueriesMovementQuery")
	}

	var r0 []bqmodels.StandardScheduledQueriesMovementResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.StandardScheduledQueriesMovementResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.StandardScheduledQueriesMovementResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.StandardScheduledQueriesMovementResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunStandardSlotsExplorerQuery provides a mock function with given fields: ctx, query, replacements, bq, _a4
func (_m *Bigquery) RunStandardSlotsExplorerQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, _a4 bqmodels.TimeRange) ([]bqmodels.StandardSlotsExplorerResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, _a4)

	if len(ret) == 0 {
		panic("no return value specified for RunStandardSlotsExplorerQuery")
	}

	var r0 []bqmodels.StandardSlotsExplorerResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.StandardSlotsExplorerResult, error)); ok {
		return rf(ctx, query, replacements, bq, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.StandardSlotsExplorerResult); ok {
		r0 = rf(ctx, query, replacements, bq, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.StandardSlotsExplorerResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunStandardUserSlots provides a mock function with given fields: ctx, _a1, replacements, bq, timeRange
func (_m *Bigquery) RunStandardUserSlots(ctx context.Context, _a1 string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) (*bqmodels.RunStandardUserSlotsResult, error) {
	ret := _m.Called(ctx, _a1, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunStandardUserSlots")
	}

	var r0 *bqmodels.RunStandardUserSlotsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) (*bqmodels.RunStandardUserSlotsResult, error)); ok {
		return rf(ctx, _a1, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) *bqmodels.RunStandardUserSlotsResult); ok {
		r0 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bqmodels.RunStandardUserSlotsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, _a1, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunStorageRecommendationsQuery provides a mock function with given fields: ctx, bq, replacements, now
func (_m *Bigquery) RunStorageRecommendationsQuery(ctx context.Context, bq *bigquery.Client, replacements domain.Replacements, now time.Time) ([]bqmodels.StorageRecommendationsResult, error) {
	ret := _m.Called(ctx, bq, replacements, now)

	if len(ret) == 0 {
		panic("no return value specified for RunStorageRecommendationsQuery")
	}

	var r0 []bqmodels.StorageRecommendationsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, domain.Replacements, time.Time) ([]bqmodels.StorageRecommendationsResult, error)); ok {
		return rf(ctx, bq, replacements, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, domain.Replacements, time.Time) []bqmodels.StorageRecommendationsResult); ok {
		r0 = rf(ctx, bq, replacements, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.StorageRecommendationsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, domain.Replacements, time.Time) error); ok {
		r1 = rf(ctx, bq, replacements, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTableStoragePriceQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunTableStoragePriceQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.TableStoragePriceResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunTableStoragePriceQuery")
	}

	var r0 []bqmodels.TableStoragePriceResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.TableStoragePriceResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.TableStoragePriceResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.TableStoragePriceResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTableStorageTBQuery provides a mock function with given fields: ctx, query, replacements, bq, timeRange
func (_m *Bigquery) RunTableStorageTBQuery(ctx context.Context, query string, replacements domain.Replacements, bq *bigquery.Client, timeRange bqmodels.TimeRange) ([]bqmodels.TableStorageTBResult, error) {
	ret := _m.Called(ctx, query, replacements, bq, timeRange)

	if len(ret) == 0 {
		panic("no return value specified for RunTableStorageTBQuery")
	}

	var r0 []bqmodels.TableStorageTBResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) ([]bqmodels.TableStorageTBResult, error)); ok {
		return rf(ctx, query, replacements, bq, timeRange)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) []bqmodels.TableStorageTBResult); ok {
		r0 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.TableStorageTBResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Replacements, *bigquery.Client, bqmodels.TimeRange) error); ok {
		r1 = rf(ctx, query, replacements, bq, timeRange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTotalScanPricePerPeriod provides a mock function with given fields: ctx, bq, replacements, now
func (_m *Bigquery) RunTotalScanPricePerPeriod(ctx context.Context, bq *bigquery.Client, replacements domain.Replacements, now time.Time) ([]bqmodels.ScanPricePerPeriod, error) {
	ret := _m.Called(ctx, bq, replacements, now)

	if len(ret) == 0 {
		panic("no return value specified for RunTotalScanPricePerPeriod")
	}

	var r0 []bqmodels.ScanPricePerPeriod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, domain.Replacements, time.Time) ([]bqmodels.ScanPricePerPeriod, error)); ok {
		return rf(ctx, bq, replacements, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, domain.Replacements, time.Time) []bqmodels.ScanPricePerPeriod); ok {
		r0 = rf(ctx, bq, replacements, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bqmodels.ScanPricePerPeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, domain.Replacements, time.Time) error); ok {
		r1 = rf(ctx, bq, replacements, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBigquery creates a new instance of Bigquery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigquery(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bigquery {
	mock := &Bigquery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
