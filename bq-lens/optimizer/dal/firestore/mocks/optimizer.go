// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	dal "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/dal/firestore"

	firestoremodels "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/domain/firestore"

	mock "github.com/stretchr/testify/mock"
)

// Optimizer is an autogenerated mock type for the Optimizer type
type Optimizer struct {
	mock.Mock
}

// GetBillingProjectScanPrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetBillingProjectScanPrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.BillingProjectScanPriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.BillingProjectScanPriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.BillingProjectScanPriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.BillingProjectScanPriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.BillingProjectScanPriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingProjectScanTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetBillingProjectScanTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.BillingProjectScanTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.BillingProjectScanTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.BillingProjectScanTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.BillingProjectScanTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.BillingProjectScanTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingProjectSlots provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetBillingProjectSlots(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.BillingProjectDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.BillingProjectDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.BillingProjectDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.BillingProjectDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.BillingProjectDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostFromTableType provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetCostFromTableType(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.CostFromTableTypeDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.CostFromTableTypeDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.CostFromTableTypeDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.CostFromTableTypeDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.CostFromTableTypeDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatasetScanPrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetDatasetScanPrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.DatasetScanPriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.DatasetScanPriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.DatasetScanPriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.DatasetScanPriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.DatasetScanPriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatasetScanTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetDatasetScanTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.DatasetScanTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.DatasetScanTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.DatasetScanTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.DatasetScanTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.DatasetScanTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatasetStoragePrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetDatasetStoragePrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.DatasetStoragePriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.DatasetStoragePriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.DatasetStoragePriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.DatasetStoragePriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.DatasetStoragePriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatasetStorageTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetDatasetStorageTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.DatasetStorageTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.DatasetStorageTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.DatasetStorageTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.DatasetStorageTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.DatasetStorageTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlatRateExplorer provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetFlatRateExplorer(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ExplorerDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ExplorerDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ExplorerDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ExplorerDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ExplorerDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnDemandExplorer provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetOnDemandExplorer(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ExplorerDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ExplorerDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ExplorerDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ExplorerDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ExplorerDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnDemandRecommendations provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetOnDemandRecommendations(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.RecommendationsDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.RecommendationsDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.RecommendationsDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.RecommendationsDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.RecommendationsDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectScanPrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetProjectScanPrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ProjectScanPriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ProjectScanPriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ProjectScanPriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ProjectScanPriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ProjectScanPriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectScanTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetProjectScanTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ProjectScanTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ProjectScanTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ProjectScanTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ProjectScanTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ProjectScanTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectStoragePrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetProjectStoragePrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ProjectStoragePriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ProjectStoragePriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ProjectStoragePriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ProjectStoragePriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ProjectStoragePriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectStorageTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetProjectStorageTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ProjectStorageTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ProjectStorageTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ProjectStorageTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ProjectStorageTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ProjectStorageTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendationCustomerDoc provides a mock function with given fields: customerID, mode
func (_m *Optimizer) GetRecommendationCustomerDoc(customerID string, mode string) *firestore.DocumentRef {
	ret := _m.Called(customerID, mode)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(string, string) *firestore.DocumentRef); ok {
		r0 = rf(customerID, mode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetRecommendationDetails provides a mock function with given fields: ctx, customerID
func (_m *Optimizer) GetRecommendationDetails(ctx context.Context, customerID string) (*firestoremodels.RecommendationOptimization, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *firestoremodels.RecommendationOptimization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*firestoremodels.RecommendationOptimization, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestoremodels.RecommendationOptimization); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.RecommendationOptimization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendationDoc provides a mock function with given fields: customerID, mode, timeframe
func (_m *Optimizer) GetRecommendationDoc(customerID string, mode string, timeframe string) *firestore.DocumentRef {
	ret := _m.Called(customerID, mode, timeframe)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(string, string, string) *firestore.DocumentRef); ok {
		r0 = rf(customerID, mode, timeframe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetRecommendationExplorerDoc provides a mock function with given fields: customerID, mode, timeframe
func (_m *Optimizer) GetRecommendationExplorerDoc(customerID string, mode string, timeframe string) *firestore.DocumentRef {
	ret := _m.Called(customerID, mode, timeframe)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(string, string, string) *firestore.DocumentRef); ok {
		r0 = rf(customerID, mode, timeframe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetRollupDoc provides a mock function with given fields: customerID, mode, timeframe
func (_m *Optimizer) GetRollupDoc(customerID string, mode string, timeframe string) *firestore.DocumentRef {
	ret := _m.Called(customerID, mode, timeframe)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(string, string, string) *firestore.DocumentRef); ok {
		r0 = rf(customerID, mode, timeframe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetScheduledQueriesMovement provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetScheduledQueriesMovement(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.ScheduledQueriesDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.ScheduledQueriesDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.ScheduledQueriesDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.ScheduledQueriesDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.ScheduledQueriesDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimulationCustomerDoc provides a mock function with given fields: customerID
func (_m *Optimizer) GetSimulationCustomerDoc(customerID string) *firestore.DocumentRef {
	ret := _m.Called(customerID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(string) *firestore.DocumentRef); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetSimulationDetails provides a mock function with given fields: ctx, customerID
func (_m *Optimizer) GetSimulationDetails(ctx context.Context, customerID string) (*firestoremodels.SimulationOptimization, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *firestoremodels.SimulationOptimization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*firestoremodels.SimulationOptimization, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestoremodels.SimulationOptimization); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.SimulationOptimization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableScanPrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetTableScanPrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.TableScanPriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.TableScanPriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.TableScanPriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.TableScanPriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.TableScanPriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableScanTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetTableScanTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.TableScanTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.TableScanTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.TableScanTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.TableScanTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.TableScanTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableStoragePrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetTableStoragePrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.TableStoragePriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.TableStoragePriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.TableStoragePriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.TableStoragePriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.TableStoragePriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableStorageTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetTableStorageTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.TableStorageTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.TableStorageTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.TableStorageTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.TableStorageTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.TableStorageTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserScanPrice provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetUserScanPrice(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.UserScanPriceDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.UserScanPriceDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.UserScanPriceDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.UserScanPriceDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.UserScanPriceDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserScanTB provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetUserScanTB(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.UserScanTBDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.UserScanTBDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.UserScanTBDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.UserScanTBDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.UserScanTBDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSlots provides a mock function with given fields: ctx, customerID, timeFrame
func (_m *Optimizer) GetUserSlots(ctx context.Context, customerID string, timeFrame string) (*firestoremodels.UserSlotsDocument, error) {
	ret := _m.Called(ctx, customerID, timeFrame)

	var r0 *firestoremodels.UserSlotsDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*firestoremodels.UserSlotsDocument, error)); ok {
		return rf(ctx, customerID, timeFrame)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestoremodels.UserSlotsDocument); ok {
		r0 = rf(ctx, customerID, timeFrame)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestoremodels.UserSlotsDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, timeFrame)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetJobsinkmetadata provides a mock function with given fields: ctx, backfillID, data
func (_m *Optimizer) SetJobsinkmetadata(ctx context.Context, backfillID string, data interface{}) (*firestore.WriteResult, error) {
	ret := _m.Called(ctx, backfillID, data)

	var r0 *firestore.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (*firestore.WriteResult, error)); ok {
		return rf(ctx, backfillID, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *firestore.WriteResult); ok {
		r0 = rf(ctx, backfillID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, backfillID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRecommendationDataIncrementally provides a mock function with given fields: ctx, customerID, data
func (_m *Optimizer) SetRecommendationDataIncrementally(ctx context.Context, customerID string, data dal.RecommendationSummary) error {
	ret := _m.Called(ctx, customerID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dal.RecommendationSummary) error); ok {
		r0 = rf(ctx, customerID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRecommendationExplorerDoc provides a mock function with given fields: ctx, customerID, mode, timeframe, data
func (_m *Optimizer) SetRecommendationExplorerDoc(ctx context.Context, customerID string, mode string, timeframe string, data firestoremodels.ExplorerDocument) (*firestore.WriteResult, error) {
	ret := _m.Called(ctx, customerID, mode, timeframe, data)

	var r0 *firestore.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, firestoremodels.ExplorerDocument) (*firestore.WriteResult, error)); ok {
		return rf(ctx, customerID, mode, timeframe, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, firestoremodels.ExplorerDocument) *firestore.WriteResult); ok {
		r0 = rf(ctx, customerID, mode, timeframe, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, firestoremodels.ExplorerDocument) error); ok {
		r1 = rf(ctx, customerID, mode, timeframe, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRecommendationOutputDoc provides a mock function with given fields: ctx, customerID, data
func (_m *Optimizer) SetRecommendationOutputDoc(ctx context.Context, customerID string, data *firestoremodels.RecommendationOptimization) (*firestore.WriteResult, error) {
	ret := _m.Called(ctx, customerID, data)

	var r0 *firestore.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *firestoremodels.RecommendationOptimization) (*firestore.WriteResult, error)); ok {
		return rf(ctx, customerID, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *firestoremodels.RecommendationOptimization) *firestore.WriteResult); ok {
		r0 = rf(ctx, customerID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *firestoremodels.RecommendationOptimization) error); ok {
		r1 = rf(ctx, customerID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRecommendationRecommenderDoc provides a mock function with given fields: ctx, customerID, mode, timeframe, data
func (_m *Optimizer) SetRecommendationRecommenderDoc(ctx context.Context, customerID string, mode string, timeframe string, data interface{}) (*firestore.WriteResult, error) {
	ret := _m.Called(ctx, customerID, mode, timeframe, data)

	var r0 *firestore.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}) (*firestore.WriteResult, error)); ok {
		return rf(ctx, customerID, mode, timeframe, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}) *firestore.WriteResult); ok {
		r0 = rf(ctx, customerID, mode, timeframe, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, interface{}) error); ok {
		r1 = rf(ctx, customerID, mode, timeframe, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSimulationOutputDoc provides a mock function with given fields: ctx, customerID, timeframe, data
func (_m *Optimizer) SetSimulationOutputDoc(ctx context.Context, customerID string, timeframe string, data interface{}) (*firestore.WriteResult, error) {
	ret := _m.Called(ctx, customerID, timeframe, data)

	var r0 *firestore.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) (*firestore.WriteResult, error)); ok {
		return rf(ctx, customerID, timeframe, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *firestore.WriteResult); ok {
		r0 = rf(ctx, customerID, timeframe, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, customerID, timeframe, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSimulationDetails provides a mock function with given fields: ctx, customerID, data
func (_m *Optimizer) UpdateSimulationDetails(ctx context.Context, customerID string, data map[string]interface{}) error {
	ret := _m.Called(ctx, customerID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, customerID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOptimizer creates a new instance of Optimizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOptimizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Optimizer {
	mock := &Optimizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
