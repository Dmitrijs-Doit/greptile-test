// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"
	bqmodels "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/domain/bigquery"

	dal "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/dal/firestore"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/domain"

	mock "github.com/stretchr/testify/mock"
)

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, customerBQ, replacements, transformerContext, queriesPerMode, hasTableDiscovery
func (_m *Executor) Execute(ctx context.Context, customerBQ *bigquery.Client, replacements domain.Replacements, transformerContext domain.TransformerContext, queriesPerMode map[bqmodels.Mode]map[bqmodels.QueryName]string, hasTableDiscovery bool) (dal.RecommendationSummary, []error) {
	ret := _m.Called(ctx, customerBQ, replacements, transformerContext, queriesPerMode, hasTableDiscovery)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 dal.RecommendationSummary
	var r1 []error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, domain.Replacements, domain.TransformerContext, map[bqmodels.Mode]map[bqmodels.QueryName]string, bool) (dal.RecommendationSummary, []error)); ok {
		return rf(ctx, customerBQ, replacements, transformerContext, queriesPerMode, hasTableDiscovery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, domain.Replacements, domain.TransformerContext, map[bqmodels.Mode]map[bqmodels.QueryName]string, bool) dal.RecommendationSummary); ok {
		r0 = rf(ctx, customerBQ, replacements, transformerContext, queriesPerMode, hasTableDiscovery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dal.RecommendationSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, domain.Replacements, domain.TransformerContext, map[bqmodels.Mode]map[bqmodels.QueryName]string, bool) []error); ok {
		r1 = rf(ctx, customerBQ, replacements, transformerContext, queriesPerMode, hasTableDiscovery)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
