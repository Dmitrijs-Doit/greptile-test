// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudresourcemanageriface "github.com/doitintl/cloudresourcemanager/iface"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/optimizer/domain"

	mock "github.com/stretchr/testify/mock"

	option "google.golang.org/api/option"

	reservation "cloud.google.com/go/bigquery/reservation/apiv1"
)

// Reservations is an autogenerated mock type for the Reservations type
type Reservations struct {
	mock.Mock
}

// GetCapacityCommitments provides a mock function with given fields: ctx, customerID, client, billingProjectsWithReservations
func (_m *Reservations) GetCapacityCommitments(ctx context.Context, customerID string, client *reservation.Client, billingProjectsWithReservations []domain.BillingProjectWithReservation) map[string][]domain.CapacityCommitment {
	ret := _m.Called(ctx, customerID, client, billingProjectsWithReservations)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacityCommitments")
	}

	var r0 map[string][]domain.CapacityCommitment
	if rf, ok := ret.Get(0).(func(context.Context, string, *reservation.Client, []domain.BillingProjectWithReservation) map[string][]domain.CapacityCommitment); ok {
		r0 = rf(ctx, customerID, client, billingProjectsWithReservations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]domain.CapacityCommitment)
		}
	}

	return r0
}

// GetProjectsWithReservations provides a mock function with given fields: ctx, customerID, client, crm, billingProjectsWithReservations
func (_m *Reservations) GetProjectsWithReservations(ctx context.Context, customerID string, client *reservation.Client, crm cloudresourcemanageriface.CloudResourceManager, billingProjectsWithReservations []domain.BillingProjectWithReservation) ([]string, []domain.ReservationAssignment) {
	ret := _m.Called(ctx, customerID, client, crm, billingProjectsWithReservations)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsWithReservations")
	}

	var r0 []string
	var r1 []domain.ReservationAssignment
	if rf, ok := ret.Get(0).(func(context.Context, string, *reservation.Client, cloudresourcemanageriface.CloudResourceManager, []domain.BillingProjectWithReservation) ([]string, []domain.ReservationAssignment)); ok {
		return rf(ctx, customerID, client, crm, billingProjectsWithReservations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *reservation.Client, cloudresourcemanageriface.CloudResourceManager, []domain.BillingProjectWithReservation) []string); ok {
		r0 = rf(ctx, customerID, client, crm, billingProjectsWithReservations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *reservation.Client, cloudresourcemanageriface.CloudResourceManager, []domain.BillingProjectWithReservation) []domain.ReservationAssignment); ok {
		r1 = rf(ctx, customerID, client, crm, billingProjectsWithReservations)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ReservationAssignment)
		}
	}

	return r0, r1
}

// NewClient provides a mock function with given fields: ctx, opts
func (_m *Reservations) NewClient(ctx context.Context, opts []option.ClientOption) (*reservation.Client, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 *reservation.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []option.ClientOption) (*reservation.Client, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []option.ClientOption) *reservation.Client); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reservation.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []option.ClientOption) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReservations creates a new instance of Reservations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservations(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reservations {
	mock := &Reservations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
