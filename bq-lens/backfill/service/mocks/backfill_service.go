// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/backfill/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BackfillService is an autogenerated mock type for the BackfillService type
type BackfillService struct {
	mock.Mock
}

// Backfill provides a mock function with given fields: ctx, sinkID, customerID, backfillProject, backfillDate, backfillInfo
func (_m *BackfillService) Backfill(ctx context.Context, sinkID string, customerID string, backfillProject string, backfillDate time.Time, backfillInfo domain.DateBackfillInfo) error {
	ret := _m.Called(ctx, sinkID, customerID, backfillProject, backfillDate, backfillInfo)

	if len(ret) == 0 {
		panic("no return value specified for Backfill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time, domain.DateBackfillInfo) error); ok {
		r0 = rf(ctx, sinkID, customerID, backfillProject, backfillDate, backfillInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBackfillService creates a new instance of BackfillService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackfillService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackfillService {
	mock := &BackfillService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
