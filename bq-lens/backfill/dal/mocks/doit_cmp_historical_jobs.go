// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DoitCmpHistoricalJobs is an autogenerated mock type for the DoitCmpHistoricalJobs type
type DoitCmpHistoricalJobs struct {
	mock.Mock
}

// CheckIfProjectHasBQUsage provides a mock function with given fields: ctx, client, projectID, timeRangeStart, timeRangeEnd
func (_m *DoitCmpHistoricalJobs) CheckIfProjectHasBQUsage(ctx context.Context, client *bigquery.Client, projectID string, timeRangeStart time.Time, timeRangeEnd time.Time) (bool, error) {
	ret := _m.Called(ctx, client, projectID, timeRangeStart, timeRangeEnd)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfProjectHasBQUsage")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, time.Time, time.Time) (bool, error)); ok {
		return rf(ctx, client, projectID, timeRangeStart, timeRangeEnd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, time.Time, time.Time) bool); ok {
		r0 = rf(ctx, client, projectID, timeRangeStart, timeRangeEnd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, client, projectID, timeRangeStart, timeRangeEnd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobsList provides a mock function with given fields: ctx, client, projectID, minCreationTime, maxCreationTime
func (_m *DoitCmpHistoricalJobs) GetJobsList(ctx context.Context, client *bigquery.Client, projectID string, minCreationTime time.Time, maxCreationTime time.Time) (chan domain.Maybe[*bigquery.Job], error) {
	ret := _m.Called(ctx, client, projectID, minCreationTime, maxCreationTime)

	if len(ret) == 0 {
		panic("no return value specified for GetJobsList")
	}

	var r0 chan domain.Maybe[*bigquery.Job]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, time.Time, time.Time) (chan domain.Maybe[*bigquery.Job], error)); ok {
		return rf(ctx, client, projectID, minCreationTime, maxCreationTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, time.Time, time.Time) chan domain.Maybe[*bigquery.Job]); ok {
		r0 = rf(ctx, client, projectID, minCreationTime, maxCreationTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan domain.Maybe[*bigquery.Job])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, client, projectID, minCreationTime, maxCreationTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSinkFirstRecordTime provides a mock function with given fields: ctx, bq, projectLocation, projectID
func (_m *DoitCmpHistoricalJobs) GetSinkFirstRecordTime(ctx context.Context, bq *bigquery.Client, projectLocation string, projectID string) (time.Time, error) {
	ret := _m.Called(ctx, bq, projectLocation, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSinkFirstRecordTime")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, string) (time.Time, error)); ok {
		return rf(ctx, bq, projectLocation, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, string) time.Time); ok {
		r0 = rf(ctx, bq, projectLocation, projectID)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string, string) error); ok {
		r1 = rf(ctx, bq, projectLocation, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveJobs provides a mock function with given fields: ctx, destinationTable, jobs
func (_m *DoitCmpHistoricalJobs) SaveJobs(ctx context.Context, destinationTable *bigquery.Table, jobs chan domain.Maybe[*bigquery.Job]) error {
	ret := _m.Called(ctx, destinationTable, jobs)

	if len(ret) == 0 {
		panic("no return value specified for SaveJobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Table, chan domain.Maybe[*bigquery.Job]) error); ok {
		r0 = rf(ctx, destinationTable, jobs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDoitCmpHistoricalJobs creates a new instance of DoitCmpHistoricalJobs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDoitCmpHistoricalJobs(t interface {
	mock.TestingT
	Cleanup(func())
}) *DoitCmpHistoricalJobs {
	mock := &DoitCmpHistoricalJobs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
