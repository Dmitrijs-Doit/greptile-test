// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/bq-lens/backfill/domain"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/cloudconnect/pkg"

	time "time"
)

// JobsSinksMetadata is an autogenerated mock type for the JobsSinksMetadata type
type JobsSinksMetadata struct {
	mock.Mock
}

// DeleteSinkMetadata provides a mock function with given fields: ctx, jobID
func (_m *JobsSinksMetadata) DeleteSinkMetadata(ctx context.Context, jobID string) error {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSinkMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSinkMetadata provides a mock function with given fields: ctx, sinkID
func (_m *JobsSinksMetadata) GetSinkMetadata(ctx context.Context, sinkID string) (*pkg.SinkMetadata, error) {
	ret := _m.Called(ctx, sinkID)

	if len(ret) == 0 {
		panic("no return value specified for GetSinkMetadata")
	}

	var r0 *pkg.SinkMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.SinkMetadata, error)); ok {
		return rf(ctx, sinkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.SinkMetadata); ok {
		r0 = rf(ctx, sinkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.SinkMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sinkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSinkProjectDates provides a mock function with given fields: ctx, sinkID, backfillProject
func (_m *JobsSinksMetadata) GetSinkProjectDates(ctx context.Context, sinkID string, backfillProject string) ([]*domain.DateBackfillInfo, error) {
	ret := _m.Called(ctx, sinkID, backfillProject)

	if len(ret) == 0 {
		panic("no return value specified for GetSinkProjectDates")
	}

	var r0 []*domain.DateBackfillInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*domain.DateBackfillInfo, error)); ok {
		return rf(ctx, sinkID, backfillProject)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*domain.DateBackfillInfo); ok {
		r0 = rf(ctx, sinkID, backfillProject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DateBackfillInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sinkID, backfillProject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSinkProjects provides a mock function with given fields: ctx, sinkID
func (_m *JobsSinksMetadata) GetSinkProjects(ctx context.Context, sinkID string) ([]*domain.ProjectBackfillInfo, error) {
	ret := _m.Called(ctx, sinkID)

	if len(ret) == 0 {
		panic("no return value specified for GetSinkProjects")
	}

	var r0 []*domain.ProjectBackfillInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.ProjectBackfillInfo, error)); ok {
		return rf(ctx, sinkID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.ProjectBackfillInfo); ok {
		r0 = rf(ctx, sinkID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ProjectBackfillInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sinkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackfillForProjectAndDate provides a mock function with given fields: ctx, sinkID, project, date, dateBackInfo
func (_m *JobsSinksMetadata) UpdateBackfillForProjectAndDate(ctx context.Context, sinkID string, project string, date time.Time, dateBackInfo *domain.DateBackfillInfo) error {
	ret := _m.Called(ctx, sinkID, project, date, dateBackInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackfillForProjectAndDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, *domain.DateBackfillInfo) error); ok {
		r0 = rf(ctx, sinkID, project, date, dateBackInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBackfillProgress provides a mock function with given fields: ctx, sinkID, projectsToBeBackfilled
func (_m *JobsSinksMetadata) UpdateBackfillProgress(ctx context.Context, sinkID string, projectsToBeBackfilled []string) error {
	ret := _m.Called(ctx, sinkID, projectsToBeBackfilled)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackfillProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, sinkID, projectsToBeBackfilled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSinkProjectProgress provides a mock function with given fields: ctx, sinkID, project, progress
func (_m *JobsSinksMetadata) UpdateSinkProjectProgress(ctx context.Context, sinkID string, project string, progress int) error {
	ret := _m.Called(ctx, sinkID, project, progress)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSinkProjectProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, sinkID, project, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobsSinksMetadata creates a new instance of JobsSinksMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobsSinksMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobsSinksMetadata {
	mock := &JobsSinksMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
