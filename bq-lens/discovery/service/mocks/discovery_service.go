// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/bq-lens/discovery/service"
)

// DiscoveryService is an autogenerated mock type for the DiscoveryService type
type DiscoveryService struct {
	mock.Mock
}

// Schedule provides a mock function with given fields: ctx
func (_m *DiscoveryService) Schedule(ctx context.Context) ([]error, error) {
	ret := _m.Called(ctx)

	var r0 []error
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]error, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TablesDiscovery provides a mock function with given fields: ctx, customerID, input
func (_m *DiscoveryService) TablesDiscovery(ctx context.Context, customerID string, input service.TablesDiscoveryPayload) error {
	ret := _m.Called(ctx, customerID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, service.TablesDiscoveryPayload) error); ok {
		r0 = rf(ctx, customerID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDiscoveryService creates a new instance of DiscoveryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoveryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoveryService {
	mock := &DiscoveryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
