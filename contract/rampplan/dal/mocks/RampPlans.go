// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"
)

// RampPlans is an autogenerated mock type for the RampPlans type
type RampPlans struct {
	mock.Mock
}

// AddRampPlan provides a mock function with given fields: ctx, rampPlan
func (_m *RampPlans) AddRampPlan(ctx context.Context, rampPlan *pkg.RampPlan) (*firestore.DocumentRef, *firestore.WriteResult, error) {
	ret := _m.Called(ctx, rampPlan)

	var r0 *firestore.DocumentRef

	var r1 *firestore.WriteResult

	var r2 error

	if rf, ok := ret.Get(0).(func(context.Context, *pkg.RampPlan) (*firestore.DocumentRef, *firestore.WriteResult, error)); ok {
		return rf(ctx, rampPlan)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *pkg.RampPlan) *firestore.DocumentRef); ok {
		r0 = rf(ctx, rampPlan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.RampPlan) *firestore.WriteResult); ok {
		r1 = rf(ctx, rampPlan)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *pkg.RampPlan) error); ok {
		r2 = rf(ctx, rampPlan)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllActiveRampPlans provides a mock function with given fields: ctx
func (_m *RampPlans) GetAllActiveRampPlans(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	var r0 []*firestore.DocumentSnapshot

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRampPlan provides a mock function with given fields: ctx, PlanID
func (_m *RampPlans) GetRampPlan(ctx context.Context, PlanID string) (*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx, PlanID)

	var r0 *firestore.DocumentSnapshot

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx, PlanID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentSnapshot); ok {
		r0 = rf(ctx, PlanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, PlanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRampPlansByContractID provides a mock function with given fields: ctx, contractID
func (_m *RampPlans) GetRampPlansByContractID(ctx context.Context, contractID string) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx, contractID)

	var r0 []*firestore.DocumentSnapshot

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx, contractID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx, contractID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, contractID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRampPlans interface {
	mock.TestingT
	Cleanup(func())
}

// NewRampPlans creates a new instance of RampPlans. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRampPlans(t mockConstructorTestingTNewRampPlans) *RampPlans {
	mock := &RampPlans{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
