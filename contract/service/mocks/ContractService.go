// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/contract/domain"

	mock "github.com/stretchr/testify/mock"
)

// ContractService is an autogenerated mock type for the ContractService type
type ContractService struct {
	mock.Mock
}

// AggregateInvoiceData provides a mock function with given fields: ctx, invoiceMonth, contractID
func (_m *ContractService) AggregateInvoiceData(ctx context.Context, invoiceMonth string, contractID string) error {
	ret := _m.Called(ctx, invoiceMonth, contractID)

	if len(ret) == 0 {
		panic("no return value specified for AggregateInvoiceData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, invoiceMonth, contractID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelContract provides a mock function with given fields: ctx, contractID
func (_m *ContractService) CancelContract(ctx context.Context, contractID string) error {
	ret := _m.Called(ctx, contractID)

	if len(ret) == 0 {
		panic("no return value specified for CancelContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, contractID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateContract provides a mock function with given fields: ctx, req
func (_m *ContractService) CreateContract(ctx context.Context, req domain.ContractInputStruct) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ContractInputStruct) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContract provides a mock function with given fields: ctx, contractID
func (_m *ContractService) DeleteContract(ctx context.Context, contractID string) error {
	ret := _m.Called(ctx, contractID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, contractID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportContracts provides a mock function with given fields: ctx
func (_m *ContractService) ExportContracts(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExportContracts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshAllCustomerTiers provides a mock function with given fields: ctx
func (_m *ContractService) RefreshAllCustomerTiers(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAllCustomerTiers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshCustomerTiers provides a mock function with given fields: ctx, customerID
func (_m *ContractService) RefreshCustomerTiers(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshCustomerTiers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateContract provides a mock function with given fields: ctx, contractID, req, email, userName
func (_m *ContractService) UpdateContract(ctx context.Context, contractID string, req domain.ContractUpdateInputStruct, email string, userName string) error {
	ret := _m.Called(ctx, contractID, req, email, userName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ContractUpdateInputStruct, string, string) error); ok {
		r0 = rf(ctx, contractID, req, email, userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGoogleCloudContractsSupport provides a mock function with given fields: ctx
func (_m *ContractService) UpdateGoogleCloudContractsSupport(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGoogleCloudContractsSupport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContractService creates a new instance of ContractService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractService {
	mock := &ContractService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
