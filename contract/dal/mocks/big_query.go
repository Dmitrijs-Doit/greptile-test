// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/contract/domain"

	mock "github.com/stretchr/testify/mock"
)

// BigQuery is an autogenerated mock type for the BigQuery type
type BigQuery struct {
	mock.Mock
}

// GetBillingAccountsSKU provides a mock function with given fields: ctx, startDate, endDate
func (_m *BigQuery) GetBillingAccountsSKU(ctx context.Context, startDate string, endDate string) ([]domain.SKUBillingRecord, error) {
	ret := _m.Called(ctx, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetBillingAccountsSKU")
	}

	var r0 []domain.SKUBillingRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.SKUBillingRecord, error)); ok {
		return rf(ctx, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.SKUBillingRecord); ok {
		r0 = rf(ctx, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SKUBillingRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBigQuery creates a new instance of BigQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *BigQuery {
	mock := &BigQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
