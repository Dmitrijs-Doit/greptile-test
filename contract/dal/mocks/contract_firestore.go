// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	domain "github.com/doitintl/hello/scheduled-tasks/contract/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"
)

// ContractFirestore is an autogenerated mock type for the ContractFirestore type
type ContractFirestore struct {
	mock.Mock
}

// CancelContract provides a mock function with given fields: ctx, contractID
func (_m *ContractFirestore) CancelContract(ctx context.Context, contractID string) error {
	ret := _m.Called(ctx, contractID)

	if len(ret) == 0 {
		panic("no return value specified for CancelContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, contractID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConvertSnapshotToContract provides a mock function with given fields: ctx, doc
func (_m *ContractFirestore) ConvertSnapshotToContract(ctx context.Context, doc *firestore.DocumentSnapshot) (pkg.Contract, error) {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for ConvertSnapshotToContract")
	}

	var r0 pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentSnapshot) (pkg.Contract, error)); ok {
		return rf(ctx, doc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentSnapshot) pkg.Contract); ok {
		r0 = rf(ctx, doc)
	} else {
		r0 = ret.Get(0).(pkg.Contract)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentSnapshot) error); ok {
		r1 = rf(ctx, doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContract provides a mock function with given fields: ctx, req
func (_m *ContractFirestore) CreateContract(ctx context.Context, req pkg.Contract) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkg.Contract) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContract provides a mock function with given fields: ctx, contractID
func (_m *ContractFirestore) DeleteContract(ctx context.Context, contractID string) error {
	ret := _m.Called(ctx, contractID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, contractID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveContracts provides a mock function with given fields: ctx
func (_m *ContractFirestore) GetActiveContracts(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveContracts")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveGoogleCloudContracts provides a mock function with given fields: ctx
func (_m *ContractFirestore) GetActiveGoogleCloudContracts(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveGoogleCloudContracts")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingDataOfContract provides a mock function with given fields: ctx, doc
func (_m *ContractFirestore) GetBillingDataOfContract(ctx context.Context, doc *firestore.DocumentSnapshot) (map[string]map[string]interface{}, error) {
	ret := _m.Called(ctx, doc)

	if len(ret) == 0 {
		panic("no return value specified for GetBillingDataOfContract")
	}

	var r0 map[string]map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentSnapshot) (map[string]map[string]interface{}, error)); ok {
		return rf(ctx, doc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentSnapshot) map[string]map[string]interface{}); ok {
		r0 = rf(ctx, doc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentSnapshot) error); ok {
		r1 = rf(ctx, doc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContractByID provides a mock function with given fields: ctx, contractID
func (_m *ContractFirestore) GetContractByID(ctx context.Context, contractID string) (*pkg.Contract, error) {
	ret := _m.Called(ctx, contractID)

	if len(ret) == 0 {
		panic("no return value specified for GetContractByID")
	}

	var r0 *pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.Contract, error)); ok {
		return rf(ctx, contractID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.Contract); ok {
		r0 = rf(ctx, contractID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, contractID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContractsByType provides a mock function with given fields: ctx, customerRef, contractType
func (_m *ContractFirestore) GetContractsByType(ctx context.Context, customerRef *firestore.DocumentRef, contractType ...domain.ContractType) ([]common.Contract, error) {
	_va := make([]interface{}, len(contractType))
	for _i := range contractType {
		_va[_i] = contractType[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, customerRef)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContractsByType")
	}

	var r0 []common.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, ...domain.ContractType) ([]common.Contract, error)); ok {
		return rf(ctx, customerRef, contractType...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, ...domain.ContractType) []common.Contract); ok {
		r0 = rf(ctx, customerRef, contractType...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, ...domain.ContractType) error); ok {
		r1 = rf(ctx, customerRef, contractType...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerContractByID provides a mock function with given fields: ctx, customerID, contractID
func (_m *ContractFirestore) GetCustomerContractByID(ctx context.Context, customerID string, contractID string) (*pkg.Contract, error) {
	ret := _m.Called(ctx, customerID, contractID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerContractByID")
	}

	var r0 *pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*pkg.Contract, error)); ok {
		return rf(ctx, customerID, contractID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *pkg.Contract); ok {
		r0 = rf(ctx, customerID, contractID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, contractID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNavigatorAndSolveContracts provides a mock function with given fields: ctx
func (_m *ContractFirestore) GetNavigatorAndSolveContracts(ctx context.Context) ([]pkg.Contract, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNavigatorAndSolveContracts")
	}

	var r0 []pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]pkg.Contract, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []pkg.Contract); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContracts provides a mock function with given fields: ctx, customerRef, limit
func (_m *ContractFirestore) ListContracts(ctx context.Context, customerRef *firestore.DocumentRef, limit int) ([]common.Contract, error) {
	ret := _m.Called(ctx, customerRef, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListContracts")
	}

	var r0 []common.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, int) ([]common.Contract, error)); ok {
		return rf(ctx, customerRef, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, int) []common.Contract); ok {
		r0 = rf(ctx, customerRef, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, int) error); ok {
		r1 = rf(ctx, customerRef, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomerNext10Contracts provides a mock function with given fields: ctx, customerRef
func (_m *ContractFirestore) ListCustomerNext10Contracts(ctx context.Context, customerRef *firestore.DocumentRef) ([]pkg.Contract, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomerNext10Contracts")
	}

	var r0 []pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]pkg.Contract, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []pkg.Contract); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomersWithNext10Contracts provides a mock function with given fields: ctx
func (_m *ContractFirestore) ListCustomersWithNext10Contracts(ctx context.Context) ([]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomersWithNext10Contracts")
	}

	var r0 []*firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentRef, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentRef); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNext10Contracts provides a mock function with given fields: ctx
func (_m *ContractFirestore) ListNext10Contracts(ctx context.Context) ([]pkg.Contract, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListNext10Contracts")
	}

	var r0 []pkg.Contract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]pkg.Contract, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []pkg.Contract); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.Contract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActiveFlag provides a mock function with given fields: ctx, contractID, value
func (_m *ContractFirestore) SetActiveFlag(ctx context.Context, contractID string, value bool) error {
	ret := _m.Called(ctx, contractID, value)

	if len(ret) == 0 {
		panic("no return value specified for SetActiveFlag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, contractID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateContract provides a mock function with given fields: ctx, contractID, contractUpdates
func (_m *ContractFirestore) UpdateContract(ctx context.Context, contractID string, contractUpdates []firestore.Update) error {
	ret := _m.Called(ctx, contractID, contractUpdates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContract")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []firestore.Update) error); ok {
		r0 = rf(ctx, contractID, contractUpdates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateContractSupport provides a mock function with given fields: ctx, inputs
func (_m *ContractFirestore) UpdateContractSupport(ctx context.Context, inputs []domain.UpdateSupportInput) error {
	ret := _m.Called(ctx, inputs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContractSupport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.UpdateSupportInput) error); ok {
		r0 = rf(ctx, inputs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteBillingDataInContracts provides a mock function with given fields: ctx, contractBillingAggData, billingMonth, contractID, lastUpdated, final
func (_m *ContractFirestore) WriteBillingDataInContracts(ctx context.Context, contractBillingAggData domain.ContractBillingAggregatedData, billingMonth string, contractID string, lastUpdated string, final bool) error {
	ret := _m.Called(ctx, contractBillingAggData, billingMonth, contractID, lastUpdated, final)

	if len(ret) == 0 {
		panic("no return value specified for WriteBillingDataInContracts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ContractBillingAggregatedData, string, string, string, bool) error); ok {
		r0 = rf(ctx, contractBillingAggData, billingMonth, contractID, lastUpdated, final)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContractFirestore creates a new instance of ContractFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContractFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContractFirestore {
	mock := &ContractFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
