// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Authorization is an autogenerated mock type for the Authorization type
type Authorization struct {
	mock.Mock
}

// GetID provides a mock function with given fields:
func (_m *Authorization) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInstanceURL provides a mock function with given fields:
func (_m *Authorization) GetInstanceURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetScope provides a mock function with given fields:
func (_m *Authorization) GetScope() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetToken provides a mock function with given fields:
func (_m *Authorization) GetToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTokenType provides a mock function with given fields:
func (_m *Authorization) GetTokenType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewAuthorization creates a new instance of Authorization. It also registers a cleanup function to assert the mocks expectations.
func NewAuthorization(t testing.TB) *Authorization {
	mock := &Authorization{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
