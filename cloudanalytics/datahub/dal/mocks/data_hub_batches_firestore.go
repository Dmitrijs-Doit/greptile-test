// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/datahub/domain"

	mock "github.com/stretchr/testify/mock"
)

// DataHubBatchesFirestore is an autogenerated mock type for the DataHubBatchesFirestore type
type DataHubBatchesFirestore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, customerID, datasetName
func (_m *DataHubBatchesFirestore) Delete(ctx context.Context, customerID string, datasetName string) error {
	ret := _m.Called(ctx, customerID, datasetName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, datasetName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBatches provides a mock function with given fields: ctx, customerID, datasetName, batches
func (_m *DataHubBatchesFirestore) DeleteBatches(ctx context.Context, customerID string, datasetName string, batches []string) error {
	ret := _m.Called(ctx, customerID, datasetName, batches)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, customerID, datasetName, batches)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, customerID, datasetName
func (_m *DataHubBatchesFirestore) Get(ctx context.Context, customerID string, datasetName string) (*domain.DatasetBatchesRes, error) {
	ret := _m.Called(ctx, customerID, datasetName)

	var r0 *domain.DatasetBatchesRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.DatasetBatchesRes, error)); ok {
		return rf(ctx, customerID, datasetName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.DatasetBatchesRes); ok {
		r0 = rf(ctx, customerID, datasetName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DatasetBatchesRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, datasetName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, customerID, datasetName, datasetBatchesRes
func (_m *DataHubBatchesFirestore) Update(ctx context.Context, customerID string, datasetName string, datasetBatchesRes *domain.DatasetBatchesRes) error {
	ret := _m.Called(ctx, customerID, datasetName, datasetBatchesRes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *domain.DatasetBatchesRes) error); ok {
		r0 = rf(ctx, customerID, datasetName, datasetBatchesRes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataHubBatchesFirestore creates a new instance of DataHubBatchesFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHubBatchesFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHubBatchesFirestore {
	mock := &DataHubBatchesFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
