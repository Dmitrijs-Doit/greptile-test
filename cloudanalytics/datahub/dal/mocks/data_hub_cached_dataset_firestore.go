// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/datahub/domain"

	mock "github.com/stretchr/testify/mock"
)

// DataHubCachedDatasetFirestore is an autogenerated mock type for the DataHubCachedDatasetFirestore type
type DataHubCachedDatasetFirestore struct {
	mock.Mock
}

// DeleteItems provides a mock function with given fields: ctx, customerID, datasets
func (_m *DataHubCachedDatasetFirestore) DeleteItems(ctx context.Context, customerID string, datasets []string) error {
	ret := _m.Called(ctx, customerID, datasets)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, customerID, datasets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, customerID
func (_m *DataHubCachedDatasetFirestore) Get(ctx context.Context, customerID string) (*domain.CachedDatasetsRes, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *domain.CachedDatasetsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.CachedDatasetsRes, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.CachedDatasetsRes); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CachedDatasetsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, customerID, datasetSummaryRes
func (_m *DataHubCachedDatasetFirestore) Update(ctx context.Context, customerID string, datasetSummaryRes *domain.CachedDatasetsRes) error {
	ret := _m.Called(ctx, customerID, datasetSummaryRes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.CachedDatasetsRes) error); ok {
		r0 = rf(ctx, customerID, datasetSummaryRes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataHubCachedDatasetFirestore creates a new instance of DataHubCachedDatasetFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHubCachedDatasetFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHubCachedDatasetFirestore {
	mock := &DataHubCachedDatasetFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
