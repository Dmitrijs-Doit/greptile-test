// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/datahub/domain"

	mock "github.com/stretchr/testify/mock"
)

// DataHubDatasetFirestore is an autogenerated mock type for the DataHubDatasetFirestore type
type DataHubDatasetFirestore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, customerID, dataset
func (_m *DataHubDatasetFirestore) Create(ctx context.Context, customerID string, dataset domain.DatasetMetadata) error {
	ret := _m.Called(ctx, customerID, dataset)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.DatasetMetadata) error); ok {
		r0 = rf(ctx, customerID, dataset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, customerID, datasetIDs
func (_m *DataHubDatasetFirestore) Delete(ctx context.Context, customerID string, datasetIDs []string) error {
	ret := _m.Called(ctx, customerID, datasetIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, customerID, datasetIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, customerID
func (_m *DataHubDatasetFirestore) List(ctx context.Context, customerID string) ([]domain.DatasetMetadata, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []domain.DatasetMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.DatasetMetadata, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.DatasetMetadata); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DatasetMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataHubDatasetFirestore creates a new instance of DataHubDatasetFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHubDatasetFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHubDatasetFirestore {
	mock := &DataHubDatasetFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
