// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	report "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/reports/domain/report"
)

// Reports is an autogenerated mock type for the Reports type
type Reports struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, _a2
func (_m *Reports) Create(ctx context.Context, tx *firestore.Transaction, _a2 *report.Report) (*report.Report, error) {
	ret := _m.Called(ctx, tx, _a2)

	var r0 *report.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, *report.Report) (*report.Report, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, *report.Report) *report.Report); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.Transaction, *report.Report) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, reportID
func (_m *Reports) Delete(ctx context.Context, reportID string) error {
	ret := _m.Called(ctx, reportID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, reportID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, reportID
func (_m *Reports) Get(ctx context.Context, reportID string) (*report.Report, error) {
	ret := _m.Called(ctx, reportID)

	var r0 *report.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*report.Report, error)); ok {
		return rf(ctx, reportID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *report.Report); ok {
		r0 = rf(ctx, reportID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, reportID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMetricRef provides a mock function with given fields: ctx, metricRef
func (_m *Reports) GetByMetricRef(ctx context.Context, metricRef *firestore.DocumentRef) ([]*report.Report, error) {
	ret := _m.Called(ctx, metricRef)

	var r0 []*report.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*report.Report, error)); ok {
		return rf(ctx, metricRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*report.Report); ok {
		r0 = rf(ctx, metricRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, metricRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerReports provides a mock function with given fields: ctx, customerID
func (_m *Reports) GetCustomerReports(ctx context.Context, customerID string) ([]*report.Report, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []*report.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*report.Report, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*report.Report); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, reportID
func (_m *Reports) GetRef(ctx context.Context, reportID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, reportID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, reportID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// Share provides a mock function with given fields: ctx, reportID, collaborators, public
func (_m *Reports) Share(ctx context.Context, reportID string, collaborators []collab.Collaborator, public *collab.PublicAccess) error {
	ret := _m.Called(ctx, reportID, collaborators, public)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []collab.Collaborator, *collab.PublicAccess) error); ok {
		r0 = rf(ctx, reportID, collaborators, public)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, reportID, _a2
func (_m *Reports) Update(ctx context.Context, reportID string, _a2 *report.Report) error {
	ret := _m.Called(ctx, reportID, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report) error); ok {
		r0 = rf(ctx, reportID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStats provides a mock function with given fields: ctx, reportID, origin, serverDurationMs, totalBytesProcessed
func (_m *Reports) UpdateStats(ctx context.Context, reportID string, origin string, serverDurationMs *int64, totalBytesProcessed *int64) error {
	ret := _m.Called(ctx, reportID, origin, serverDurationMs, totalBytesProcessed)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *int64, *int64) error); ok {
		r0 = rf(ctx, reportID, origin, serverDurationMs, totalBytesProcessed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTimeLastRun provides a mock function with given fields: ctx, reportID, key
func (_m *Reports) UpdateTimeLastRun(ctx context.Context, reportID string, key string) error {
	ret := _m.Called(ctx, reportID, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, reportID, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReports creates a new instance of Reports. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReports(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reports {
	mock := &Reports{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
