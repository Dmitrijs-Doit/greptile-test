// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	errormsg "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/externalapi/domain/errormsg"
	externalreport "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/reports/domain/externalreport"

	mock "github.com/stretchr/testify/mock"

	report "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/reports/domain/report"
)

// IExternalReportService is an autogenerated mock type for the IExternalReportService type
type IExternalReportService struct {
	mock.Mock
}

// MergeConfigWithExternalConfig provides a mock function with given fields: ctx, customerID, config, externalConfig
func (_m *IExternalReportService) MergeConfigWithExternalConfig(ctx context.Context, customerID string, config *report.Config, externalConfig *externalreport.ExternalConfig) (*report.Config, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, customerID, config, externalConfig)

	var r0 *report.Config
	var r1 []errormsg.ErrorMsg
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Config, *externalreport.ExternalConfig) (*report.Config, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, customerID, config, externalConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Config, *externalreport.ExternalConfig) *report.Config); ok {
		r0 = rf(ctx, customerID, config, externalConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*report.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *report.Config, *externalreport.ExternalConfig) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, customerID, config, externalConfig)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *report.Config, *externalreport.ExternalConfig) error); ok {
		r2 = rf(ctx, customerID, config, externalConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewExternalReportFromInternal provides a mock function with given fields: ctx, customerID, _a2
func (_m *IExternalReportService) NewExternalReportFromInternal(ctx context.Context, customerID string, _a2 *report.Report) (*externalreport.ExternalReport, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, customerID, _a2)

	var r0 *externalreport.ExternalReport
	var r1 []errormsg.ErrorMsg
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report) (*externalreport.ExternalReport, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, customerID, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report) *externalreport.ExternalReport); ok {
		r0 = rf(ctx, customerID, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalreport.ExternalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *report.Report) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, customerID, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *report.Report) error); ok {
		r2 = rf(ctx, customerID, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateReportWithExternalReport provides a mock function with given fields: ctx, customerID, _a2, externalReport
func (_m *IExternalReportService) UpdateReportWithExternalReport(ctx context.Context, customerID string, _a2 *report.Report, externalReport *externalreport.ExternalReport) (*report.Report, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, customerID, _a2, externalReport)

	var r0 *report.Report
	var r1 []errormsg.ErrorMsg
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report, *externalreport.ExternalReport) (*report.Report, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, customerID, _a2, externalReport)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report, *externalreport.ExternalReport) *report.Report); ok {
		r0 = rf(ctx, customerID, _a2, externalReport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *report.Report, *externalreport.ExternalReport) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, customerID, _a2, externalReport)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *report.Report, *externalreport.ExternalReport) error); ok {
		r2 = rf(ctx, customerID, _a2, externalReport)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIExternalReportService creates a new instance of IExternalReportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExternalReportService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExternalReportService {
	mock := &IExternalReportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
