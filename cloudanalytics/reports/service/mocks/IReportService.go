// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/externalapi/domain"
	errormsg "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/externalapi/domain/errormsg"

	externalreport "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/reports/domain/externalreport"

	mock "github.com/stretchr/testify/mock"

	report "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/reports/domain/report"
)

// IReportService is an autogenerated mock type for the IReportService type
type IReportService struct {
	mock.Mock
}

// CreateReportWithExternal provides a mock function with given fields: ctx, externalReport, customerID, email
func (_m *IReportService) CreateReportWithExternal(ctx context.Context, externalReport *externalreport.ExternalReport, customerID string, email string) (*externalreport.ExternalReport, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, externalReport, customerID, email)

	var r0 *externalreport.ExternalReport

	var r1 []errormsg.ErrorMsg

	var r2 error

	if rf, ok := ret.Get(0).(func(context.Context, *externalreport.ExternalReport, string, string) (*externalreport.ExternalReport, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, externalReport, customerID, email)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *externalreport.ExternalReport, string, string) *externalreport.ExternalReport); ok {
		r0 = rf(ctx, externalReport, customerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalreport.ExternalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *externalreport.ExternalReport, string, string) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, externalReport, customerID, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *externalreport.ExternalReport, string, string) error); ok {
		r2 = rf(ctx, externalReport, customerID, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteMany provides a mock function with given fields: ctx, customerID, email, reportIDs
func (_m *IReportService) DeleteMany(ctx context.Context, customerID string, email string, reportIDs []string) error {
	ret := _m.Called(ctx, customerID, email, reportIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, customerID, email, reportIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReport provides a mock function with given fields: ctx, customerID, requesterEmail, reportID
func (_m *IReportService) DeleteReport(ctx context.Context, customerID string, requesterEmail string, reportID string) error {
	ret := _m.Called(ctx, customerID, requesterEmail, reportID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, customerID, requesterEmail, reportID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReportConfig provides a mock function with given fields: ctx, reportID, customerID
func (_m *IReportService) GetReportConfig(ctx context.Context, reportID string, customerID string) (*externalreport.ExternalReport, error) {
	ret := _m.Called(ctx, reportID, customerID)

	var r0 *externalreport.ExternalReport

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*externalreport.ExternalReport, error)); ok {
		return rf(ctx, reportID, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string) *externalreport.ExternalReport); ok {
		r0 = rf(ctx, reportID, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalreport.ExternalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, reportID, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunReportFromExternalConfig provides a mock function with given fields: ctx, externalConfig, customerID, requesterEmail
func (_m *IReportService) RunReportFromExternalConfig(ctx context.Context, externalConfig *externalreport.ExternalConfig, customerID string, requesterEmail string) (*domain.RunReportResult, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, externalConfig, customerID, requesterEmail)

	var r0 *domain.RunReportResult

	var r1 []errormsg.ErrorMsg

	var r2 error

	if rf, ok := ret.Get(0).(func(context.Context, *externalreport.ExternalConfig, string, string) (*domain.RunReportResult, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, externalConfig, customerID, requesterEmail)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *externalreport.ExternalConfig, string, string) *domain.RunReportResult); ok {
		r0 = rf(ctx, externalConfig, customerID, requesterEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RunReportResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *externalreport.ExternalConfig, string, string) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, externalConfig, customerID, requesterEmail)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *externalreport.ExternalConfig, string, string) error); ok {
		r2 = rf(ctx, externalConfig, customerID, requesterEmail)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShareReport provides a mock function with given fields: ctx, args
func (_m *IReportService) ShareReport(ctx context.Context, args report.ShareReportArgsReq) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, report.ShareReportArgsReq) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReportWithExternal provides a mock function with given fields: ctx, reportID, externalReportPayload, customerID, email
func (_m *IReportService) UpdateReportWithExternal(ctx context.Context, reportID string, externalReportPayload *externalreport.ExternalReport, customerID string, email string) (*externalreport.ExternalReport, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, reportID, externalReportPayload, customerID, email)

	var r0 *externalreport.ExternalReport

	var r1 []errormsg.ErrorMsg

	var r2 error

	if rf, ok := ret.Get(0).(func(context.Context, string, *externalreport.ExternalReport, string, string) (*externalreport.ExternalReport, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, reportID, externalReportPayload, customerID, email)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, *externalreport.ExternalReport, string, string) *externalreport.ExternalReport); ok {
		r0 = rf(ctx, reportID, externalReportPayload, customerID, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalreport.ExternalReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *externalreport.ExternalReport, string, string) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, reportID, externalReportPayload, customerID, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *externalreport.ExternalReport, string, string) error); ok {
		r2 = rf(ctx, reportID, externalReportPayload, customerID, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIReportService creates a new instance of IReportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIReportService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReportService {
	mock := &IReportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
