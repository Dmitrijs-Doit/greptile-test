// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	iface "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metadata/dal/iface"
	metadata "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metadata/domain/metadata"

	mock "github.com/stretchr/testify/mock"
)

// Metadata is an autogenerated mock type for the Metadata type
type Metadata struct {
	mock.Mock
}

// FlatAndSortListMap provides a mock function with given fields: listsByType
func (_m *Metadata) FlatAndSortListMap(listsByType map[metadata.MetadataFieldType][]iface.ListItem) []iface.ListItem {
	ret := _m.Called(listsByType)

	if len(ret) == 0 {
		panic("no return value specified for FlatAndSortListMap")
	}

	var r0 []iface.ListItem
	if rf, ok := ret.Get(0).(func(map[metadata.MetadataFieldType][]iface.ListItem) []iface.ListItem); ok {
		r0 = rf(listsByType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.ListItem)
		}
	}

	return r0
}

// Get provides a mock function with given fields: args
func (_m *Metadata) Get(args iface.GetArgs) ([]iface.GetItem, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []iface.GetItem
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.GetArgs) ([]iface.GetItem, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(iface.GetArgs) []iface.GetItem); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.GetItem)
		}
	}

	if rf, ok := ret.Get(1).(func(iface.GetArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerOrgMetadataCollectionRef provides a mock function with given fields: ctx, customerID, orgID, mdID
func (_m *Metadata) GetCustomerOrgMetadataCollectionRef(ctx context.Context, customerID string, orgID string, mdID string) *firestore.CollectionRef {
	ret := _m.Called(ctx, customerID, orgID, mdID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerOrgMetadataCollectionRef")
	}

	var r0 *firestore.CollectionRef
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *firestore.CollectionRef); ok {
		r0 = rf(ctx, customerID, orgID, mdID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.CollectionRef)
		}
	}

	return r0
}

// GetCustomerOrgRef provides a mock function with given fields: ctx, customerID, orgID
func (_m *Metadata) GetCustomerOrgRef(ctx context.Context, customerID string, orgID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, customerID, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerOrgRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, customerID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetCustomerRef provides a mock function with given fields: ctx, customerID
func (_m *Metadata) GetCustomerRef(ctx context.Context, customerID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetPresetOrgRef provides a mock function with given fields: ctx, orgID
func (_m *Metadata) GetPresetOrgRef(ctx context.Context, orgID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetPresetOrgRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// List provides a mock function with given fields: args
func (_m *Metadata) List(args iface.ListArgs) ([]iface.ListItem, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []iface.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.ListArgs) ([]iface.ListItem, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(iface.ListArgs) []iface.ListItem); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.ListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(iface.ListArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMap provides a mock function with given fields: args
func (_m *Metadata) ListMap(args iface.ListArgs) (map[metadata.MetadataFieldType][]iface.ListItem, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for ListMap")
	}

	var r0 map[metadata.MetadataFieldType][]iface.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.ListArgs) (map[metadata.MetadataFieldType][]iface.ListItem, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(iface.ListArgs) map[metadata.MetadataFieldType][]iface.ListItem); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[metadata.MetadataFieldType][]iface.ListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(iface.ListArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetadata creates a new instance of Metadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metadata {
	mock := &Metadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
