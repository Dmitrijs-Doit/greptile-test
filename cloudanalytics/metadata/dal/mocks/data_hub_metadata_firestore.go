// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metadata/domain"
	datahub "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metadata/domain/datahub"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// DataHubMetadataFirestore is an autogenerated mock type for the DataHubMetadataFirestore type
type DataHubMetadataFirestore struct {
	mock.Mock
}

// DeleteCustomerMetadata provides a mock function with given fields: ctx, customerID
func (_m *DataHubMetadataFirestore) DeleteCustomerMetadata(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomerMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, customerID, docID
func (_m *DataHubMetadataFirestore) Get(ctx context.Context, customerID string, docID string) (*domain.OrgMetadataModel, error) {
	ret := _m.Called(ctx, customerID, docID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.OrgMetadataModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.OrgMetadataModel, error)); ok {
		return rf(ctx, customerID, docID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.OrgMetadataModel); ok {
		r0 = rf(ctx, customerID, docID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OrgMetadataModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerMetadataDocRef provides a mock function with given fields: ctx, customerID, docID
func (_m *DataHubMetadataFirestore) GetCustomerMetadataDocRef(ctx context.Context, customerID string, docID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, customerID, docID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerMetadataDocRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, customerID, docID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetCustomerOrgRef provides a mock function with given fields: ctx, customerID
func (_m *DataHubMetadataFirestore) GetCustomerOrgRef(ctx context.Context, customerID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerOrgRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetMergeableDocument provides a mock function with given fields: tx, docRef
func (_m *DataHubMetadataFirestore) GetMergeableDocument(tx *firestore.Transaction, docRef *firestore.DocumentRef) (*domain.OrgMetadataModel, error) {
	ret := _m.Called(tx, docRef)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeableDocument")
	}

	var r0 *domain.OrgMetadataModel
	var r1 error
	if rf, ok := ret.Get(0).(func(*firestore.Transaction, *firestore.DocumentRef) (*domain.OrgMetadataModel, error)); ok {
		return rf(tx, docRef)
	}
	if rf, ok := ret.Get(0).(func(*firestore.Transaction, *firestore.DocumentRef) *domain.OrgMetadataModel); ok {
		r0 = rf(tx, docRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OrgMetadataModel)
		}
	}

	if rf, ok := ret.Get(1).(func(*firestore.Transaction, *firestore.DocumentRef) error); ok {
		r1 = rf(tx, docRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetadataDocs provides a mock function with given fields: ctx, mergeMetadataDoc, cleanUpFunc, metadataPerCustomer, metricTypesPerCustomer, mergeMetricTypesDocFunc
func (_m *DataHubMetadataFirestore) UpdateMetadataDocs(ctx context.Context, mergeMetadataDoc datahub.MergeMetadataDocFunc, cleanUpFunc datahub.UpdateMetadataDocsPostTxFunc, metadataPerCustomer datahub.MetadataByCustomer, metricTypesPerCustomer datahub.MetricTypesByCustomer, mergeMetricTypesDocFunc datahub.MergeDataHubMetricTypesDocFunc) error {
	ret := _m.Called(ctx, mergeMetadataDoc, cleanUpFunc, metadataPerCustomer, metricTypesPerCustomer, mergeMetricTypesDocFunc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadataDocs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datahub.MergeMetadataDocFunc, datahub.UpdateMetadataDocsPostTxFunc, datahub.MetadataByCustomer, datahub.MetricTypesByCustomer, datahub.MergeDataHubMetricTypesDocFunc) error); ok {
		r0 = rf(ctx, mergeMetadataDoc, cleanUpFunc, metadataPerCustomer, metricTypesPerCustomer, mergeMetricTypesDocFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataHubMetadataFirestore creates a new instance of DataHubMetadataFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHubMetadataFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHubMetadataFirestore {
	mock := &DataHubMetadataFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
