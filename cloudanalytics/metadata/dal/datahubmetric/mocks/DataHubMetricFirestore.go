// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metadata/domain/datahub"

	mock "github.com/stretchr/testify/mock"
)

// DataHubMetricFirestore is an autogenerated mock type for the DataHubMetricFirestore type
type DataHubMetricFirestore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, customerID
func (_m *DataHubMetricFirestore) Delete(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, customerID
func (_m *DataHubMetricFirestore) Get(ctx context.Context, customerID string) (*domain.DataHubMetrics, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.DataHubMetrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.DataHubMetrics, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.DataHubMetrics); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DataHubMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMergeableDocument provides a mock function with given fields: tx, docRef
func (_m *DataHubMetricFirestore) GetMergeableDocument(tx *firestore.Transaction, docRef *firestore.DocumentRef) (*domain.DataHubMetrics, error) {
	ret := _m.Called(tx, docRef)

	if len(ret) == 0 {
		panic("no return value specified for GetMergeableDocument")
	}

	var r0 *domain.DataHubMetrics
	var r1 error
	if rf, ok := ret.Get(0).(func(*firestore.Transaction, *firestore.DocumentRef) (*domain.DataHubMetrics, error)); ok {
		return rf(tx, docRef)
	}
	if rf, ok := ret.Get(0).(func(*firestore.Transaction, *firestore.DocumentRef) *domain.DataHubMetrics); ok {
		r0 = rf(tx, docRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DataHubMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(*firestore.Transaction, *firestore.DocumentRef) error); ok {
		r1 = rf(tx, docRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, customerID
func (_m *DataHubMetricFirestore) GetRef(ctx context.Context, customerID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// NewDataHubMetricFirestore creates a new instance of DataHubMetricFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataHubMetricFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataHubMetricFirestore {
	mock := &DataHubMetricFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
