// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metadata/service/aws/domain"

	mock "github.com/stretchr/testify/mock"
)

// AWSMetadata is an autogenerated mock type for the AWSMetadata type
type AWSMetadata struct {
	mock.Mock
}

// UpdateAccountMetadata provides a mock function with given fields: ctx, input
func (_m *AWSMetadata) UpdateAccountMetadata(ctx context.Context, input *domain.UpdateAccountMetadataInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateAccountMetadataInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAllCustomersMetadata provides a mock function with given fields: ctx
func (_m *AWSMetadata) UpdateAllCustomersMetadata(ctx context.Context) ([]error, error) {
	ret := _m.Called(ctx)

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context) []error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomerMetadata provides a mock function with given fields: ctx, customerID, orgs
func (_m *AWSMetadata) UpdateCustomerMetadata(ctx context.Context, customerID string, orgs []*common.Organization) error {
	ret := _m.Called(ctx, customerID, orgs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*common.Organization) error); ok {
		r0 = rf(ctx, customerID, orgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAWSMetadata interface {
	mock.TestingT
	Cleanup(func())
}

// NewAWSMetadata creates a new instance of AWSMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAWSMetadata(t mockConstructorTestingTNewAWSMetadata) *AWSMetadata {
	mock := &AWSMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
