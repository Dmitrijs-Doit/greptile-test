// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AzureMetadata is an autogenerated mock type for the AzureMetadata type
type AzureMetadata struct {
	mock.Mock
}

// UpdateAllCustomersMetadata provides a mock function with given fields: ctx
func (_m *AzureMetadata) UpdateAllCustomersMetadata(ctx context.Context) ([]error, error) {
	ret := _m.Called(ctx)

	var r0 []error

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]error, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomerMetadata provides a mock function with given fields: ctx, customerID, organizationID
func (_m *AzureMetadata) UpdateCustomerMetadata(ctx context.Context, customerID string, organizationID string) error {
	ret := _m.Called(ctx, customerID, organizationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, organizationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAzureMetadata creates a new instance of AzureMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAzureMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *AzureMetadata {
	mock := &AzureMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
