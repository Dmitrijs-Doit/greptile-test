// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	metrics "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/metrics/domain"

	mock "github.com/stretchr/testify/mock"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

// DeleteMany provides a mock function with given fields: ctx, IDs
func (_m *Metrics) DeleteMany(ctx context.Context, IDs []string) error {
	ret := _m.Called(ctx, IDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, IDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, calculatedMetricID
func (_m *Metrics) Exists(ctx context.Context, calculatedMetricID string) (bool, error) {
	ret := _m.Called(ctx, calculatedMetricID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, calculatedMetricID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, calculatedMetricID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, calculatedMetricID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomMetric provides a mock function with given fields: ctx, calculatedMetricID
func (_m *Metrics) GetCustomMetric(ctx context.Context, calculatedMetricID string) (*metrics.CalculatedMetric, error) {
	ret := _m.Called(ctx, calculatedMetricID)

	var r0 *metrics.CalculatedMetric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*metrics.CalculatedMetric, error)); ok {
		return rf(ctx, calculatedMetricID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *metrics.CalculatedMetric); ok {
		r0 = rf(ctx, calculatedMetricID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metrics.CalculatedMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, calculatedMetricID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricsUsingAttr provides a mock function with given fields: ctx, attrRef
func (_m *Metrics) GetMetricsUsingAttr(ctx context.Context, attrRef *firestore.DocumentRef) ([]*metrics.CalculatedMetric, error) {
	ret := _m.Called(ctx, attrRef)

	var r0 []*metrics.CalculatedMetric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*metrics.CalculatedMetric, error)); ok {
		return rf(ctx, attrRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*metrics.CalculatedMetric); ok {
		r0 = rf(ctx, attrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metrics.CalculatedMetric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, attrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, calculatedMetricID
func (_m *Metrics) GetRef(ctx context.Context, calculatedMetricID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, calculatedMetricID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, calculatedMetricID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
