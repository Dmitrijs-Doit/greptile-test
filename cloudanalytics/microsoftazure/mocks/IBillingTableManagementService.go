// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IBillingTableManagementService is an autogenerated mock type for the IBillingTableManagementService type
type IBillingTableManagementService struct {
	mock.Mock
}

// UpdateAggregatedTable provides a mock function with given fields: ctx, suffix, interval, allPartitions
func (_m *IBillingTableManagementService) UpdateAggregatedTable(ctx context.Context, suffix string, interval string, allPartitions bool) error {
	ret := _m.Called(ctx, suffix, interval, allPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, suffix, interval, allPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAllAggregatedTables provides a mock function with given fields: ctx, suffix, allPartitions
func (_m *IBillingTableManagementService) UpdateAllAggregatedTables(ctx context.Context, suffix string, allPartitions bool) []error {
	ret := _m.Called(ctx, suffix, allPartitions)

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []error); ok {
		r0 = rf(ctx, suffix, allPartitions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// UpdateAllAggregatedTablesAllCustomers provides a mock function with given fields: ctx, allPartitions
func (_m *IBillingTableManagementService) UpdateAllAggregatedTablesAllCustomers(ctx context.Context, allPartitions bool) []error {
	ret := _m.Called(ctx, allPartitions)

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, bool) []error); ok {
		r0 = rf(ctx, allPartitions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

type mockConstructorTestingTNewIBillingTableManagementService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillingTableManagementService creates a new instance of IBillingTableManagementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillingTableManagementService(t mockConstructorTestingTNewIBillingTableManagementService) *IBillingTableManagementService {
	mock := &IBillingTableManagementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
