// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	budget "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/budgets/domain/budget"
	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/budgets/dal"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// Budgets is an autogenerated mock type for the Budgets type
type Budgets struct {
	mock.Mock
}

// GetBudget provides a mock function with given fields: ctx, budgetID
func (_m *Budgets) GetBudget(ctx context.Context, budgetID string) (*budget.Budget, error) {
	ret := _m.Called(ctx, budgetID)

	var r0 *budget.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*budget.Budget, error)); ok {
		return rf(ctx, budgetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *budget.Budget); ok {
		r0 = rf(ctx, budgetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budget.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, budgetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCustomerAndAttribution provides a mock function with given fields: ctx, customerRef, attrRef
func (_m *Budgets) GetByCustomerAndAttribution(ctx context.Context, customerRef *firestore.DocumentRef, attrRef *firestore.DocumentRef) ([]*budget.Budget, error) {
	ret := _m.Called(ctx, customerRef, attrRef)

	var r0 []*budget.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, *firestore.DocumentRef) ([]*budget.Budget, error)); ok {
		return rf(ctx, customerRef, attrRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, *firestore.DocumentRef) []*budget.Budget); ok {
		r0 = rf(ctx, customerRef, attrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*budget.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef, attrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, budgetID
func (_m *Budgets) GetRef(ctx context.Context, budgetID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, budgetID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, budgetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// ListBudgets provides a mock function with given fields: ctx, args
func (_m *Budgets) ListBudgets(ctx context.Context, args *dal.ListBudgetsArgs) ([]budget.Budget, error) {
	ret := _m.Called(ctx, args)

	var r0 []budget.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dal.ListBudgetsArgs) ([]budget.Budget, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dal.ListBudgetsArgs) []budget.Budget); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]budget.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dal.ListBudgetsArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveNotification provides a mock function with given fields: ctx, notification
func (_m *Budgets) SaveNotification(ctx context.Context, notification *budget.BudgetNotification) error {
	ret := _m.Called(ctx, notification)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *budget.BudgetNotification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Share provides a mock function with given fields: ctx, budgetID, collaborators, public
func (_m *Budgets) Share(ctx context.Context, budgetID string, collaborators []collab.Collaborator, public *collab.PublicAccess) error {
	ret := _m.Called(ctx, budgetID, collaborators, public)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []collab.Collaborator, *collab.PublicAccess) error); ok {
		r0 = rf(ctx, budgetID, collaborators, public)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBudgetEnforcedByMetering provides a mock function with given fields: ctx, budgetID, enforcedByMetering
func (_m *Budgets) UpdateBudgetEnforcedByMetering(ctx context.Context, budgetID string, enforcedByMetering bool) error {
	ret := _m.Called(ctx, budgetID, enforcedByMetering)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, budgetID, enforcedByMetering)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBudgetRecipients provides a mock function with given fields: ctx, budgetID, newRecipients, newRecipientsSlackChannels
func (_m *Budgets) UpdateBudgetRecipients(ctx context.Context, budgetID string, newRecipients []string, newRecipientsSlackChannels []common.SlackChannel) error {
	ret := _m.Called(ctx, budgetID, newRecipients, newRecipientsSlackChannels)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, []common.SlackChannel) error); ok {
		r0 = rf(ctx, budgetID, newRecipients, newRecipientsSlackChannels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBudgets creates a new instance of Budgets. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBudgets(t interface {
	mock.TestingT
	Cleanup(func())
}) *Budgets {
	mock := &Budgets{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
