// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	budget "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/budgets/domain/budget"
	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/budgets/service"

	slack "github.com/slack-go/slack"
)

// IBudgetsService is an autogenerated mock type for the IBudgetsService type
type IBudgetsService struct {
	mock.Mock
}

// DeleteMany provides a mock function with given fields: ctx, email, budgetIDs
func (_m *IBudgetsService) DeleteMany(ctx context.Context, email string, budgetIDs []string) error {
	ret := _m.Called(ctx, email, budgetIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, email, budgetIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBudget provides a mock function with given fields: ctx, budgetID
func (_m *IBudgetsService) GetBudget(ctx context.Context, budgetID string) (*budget.Budget, error) {
	ret := _m.Called(ctx, budgetID)

	if len(ret) == 0 {
		panic("no return value specified for GetBudget")
	}

	var r0 *budget.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*budget.Budget, error)); ok {
		return rf(ctx, budgetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *budget.Budget); ok {
		r0 = rf(ctx, budgetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budget.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, budgetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudgetExternal provides a mock function with given fields: ctx, budgetID, email, customerID
func (_m *IBudgetsService) GetBudgetExternal(ctx context.Context, budgetID string, email string, customerID string) (*service.BudgetAPI, error) {
	ret := _m.Called(ctx, budgetID, email, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetExternal")
	}

	var r0 *service.BudgetAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*service.BudgetAPI, error)); ok {
		return rf(ctx, budgetID, email, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *service.BudgetAPI); ok {
		r0 = rf(ctx, budgetID, email, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.BudgetAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, budgetID, email, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudgetSlackUnfurl provides a mock function with given fields: ctx, budgetID, customerID, URL, imageURLCurrent, imageURLForecasted
func (_m *IBudgetsService) GetBudgetSlackUnfurl(ctx context.Context, budgetID string, customerID string, URL string, imageURLCurrent string, imageURLForecasted string) (*budget.Budget, map[string]slack.Attachment, error) {
	ret := _m.Called(ctx, budgetID, customerID, URL, imageURLCurrent, imageURLForecasted)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetSlackUnfurl")
	}

	var r0 *budget.Budget
	var r1 map[string]slack.Attachment
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) (*budget.Budget, map[string]slack.Attachment, error)); ok {
		return rf(ctx, budgetID, customerID, URL, imageURLCurrent, imageURLForecasted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) *budget.Budget); ok {
		r0 = rf(ctx, budgetID, customerID, URL, imageURLCurrent, imageURLForecasted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*budget.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) map[string]slack.Attachment); ok {
		r1 = rf(ctx, budgetID, customerID, URL, imageURLCurrent, imageURLForecasted)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]slack.Attachment)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, string) error); ok {
		r2 = rf(ctx, budgetID, customerID, URL, imageURLCurrent, imageURLForecasted)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBudgets provides a mock function with given fields: ctx, requestData
func (_m *IBudgetsService) ListBudgets(ctx context.Context, requestData *service.ExternalAPIListArgsReq) (*service.BudgetList, error, error) {
	ret := _m.Called(ctx, requestData)

	if len(ret) == 0 {
		panic("no return value specified for ListBudgets")
	}

	var r0 *service.BudgetList
	var r1 error
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.ExternalAPIListArgsReq) (*service.BudgetList, error, error)); ok {
		return rf(ctx, requestData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.ExternalAPIListArgsReq) *service.BudgetList); ok {
		r0 = rf(ctx, requestData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.BudgetList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.ExternalAPIListArgsReq) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *service.ExternalAPIListArgsReq) error); ok {
		r2 = rf(ctx, requestData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShareBudget provides a mock function with given fields: ctx, newShareBudget, budgetID, userID, requesterEmail
func (_m *IBudgetsService) ShareBudget(ctx context.Context, newShareBudget service.ShareBudgetRequest, budgetID string, userID string, requesterEmail string) error {
	ret := _m.Called(ctx, newShareBudget, budgetID, userID, requesterEmail)

	if len(ret) == 0 {
		panic("no return value specified for ShareBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.ShareBudgetRequest, string, string, string) error); ok {
		r0 = rf(ctx, newShareBudget, budgetID, userID, requesterEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEnforcedByMeteringField provides a mock function with given fields: ctx, budgetID, collaborators, recipients, public
func (_m *IBudgetsService) UpdateEnforcedByMeteringField(ctx context.Context, budgetID string, collaborators []collab.Collaborator, recipients []string, public *collab.PublicAccess) error {
	ret := _m.Called(ctx, budgetID, collaborators, recipients, public)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnforcedByMeteringField")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []collab.Collaborator, []string, *collab.PublicAccess) error); ok {
		r0 = rf(ctx, budgetID, collaborators, recipients, public)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBudgetsService creates a new instance of IBudgetsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBudgetsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBudgetsService {
	mock := &IBudgetsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
