// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BigQueryDAL is an autogenerated mock type for the BigQueryDAL type
type BigQueryDAL struct {
	mock.Mock
}

// AuthorizeView provides a mock function with given fields: ctx, customerID, customerEmail
func (_m *BigQueryDAL) AuthorizeView(ctx context.Context, customerID string, customerEmail string) error {
	ret := _m.Called(ctx, customerID, customerEmail)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeView")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, customerEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckViewExists provides a mock function with given fields: ctx, customerID
func (_m *BigQueryDAL) CheckViewExists(ctx context.Context, customerID string) (bool, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for CheckViewExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateViewAWS provides a mock function with given fields: ctx, customerID
func (_m *BigQueryDAL) CreateViewAWS(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for CreateViewAWS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBigQueryDAL creates a new instance of BigQueryDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigQueryDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *BigQueryDAL {
	mock := &BigQueryDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
