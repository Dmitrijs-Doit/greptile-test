// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	mock "github.com/stretchr/testify/mock"
)

// Icollab is an autogenerated mock type for the Icollab type
type Icollab struct {
	mock.Mock
}

// ShareAnalyticsResource provides a mock function with given fields: ctx, oldCollabs, newCollabs, public, resourceID, requesterEmail, sharer, isCAOwner
func (_m *Icollab) ShareAnalyticsResource(ctx context.Context, oldCollabs []collab.Collaborator, newCollabs []collab.Collaborator, public *collab.PublicAccess, resourceID string, requesterEmail string, sharer collab.AnalyticsSharer, isCAOwner bool) error {
	ret := _m.Called(ctx, oldCollabs, newCollabs, public, resourceID, requesterEmail, sharer, isCAOwner)

	if len(ret) == 0 {
		panic("no return value specified for ShareAnalyticsResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []collab.Collaborator, []collab.Collaborator, *collab.PublicAccess, string, string, collab.AnalyticsSharer, bool) error); ok {
		r0 = rf(ctx, oldCollabs, newCollabs, public, resourceID, requesterEmail, sharer, isCAOwner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIcollab creates a new instance of Icollab. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIcollab(t interface {
	mock.TestingT
	Cleanup(func())
}) *Icollab {
	mock := &Icollab{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
