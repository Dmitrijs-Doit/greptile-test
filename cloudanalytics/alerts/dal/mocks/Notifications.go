// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/alerts/domain"

	mock "github.com/stretchr/testify/mock"
)

// Notifications is an autogenerated mock type for the Notifications type
type Notifications struct {
	mock.Mock
}

// AddDetectedNotifications provides a mock function with given fields: ctx, notifications, alertEtag
func (_m *Notifications) AddDetectedNotifications(ctx context.Context, notifications []*domain.Notification, alertEtag string) ([]*domain.Notification, error) {
	ret := _m.Called(ctx, notifications, alertEtag)

	var r0 []*domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Notification, string) ([]*domain.Notification, error)); ok {
		return rf(ctx, notifications, alertEtag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Notification, string) []*domain.Notification); ok {
		r0 = rf(ctx, notifications, alertEtag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*domain.Notification, string) error); ok {
		r1 = rf(ctx, notifications, alertEtag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertDetectedNotifications provides a mock function with given fields: ctx, customerID
func (_m *Notifications) GetAlertDetectedNotifications(ctx context.Context, customerID string) (domain.NotificationsByAlertID, error) {
	ret := _m.Called(ctx, customerID)

	var r0 domain.NotificationsByAlertID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.NotificationsByAlertID, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.NotificationsByAlertID); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.NotificationsByAlertID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: ctx
func (_m *Notifications) GetCustomers(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetectedBreakdowns provides a mock function with given fields: ctx, etag, alertID, period
func (_m *Notifications) GetDetectedBreakdowns(ctx context.Context, etag string, alertID string, period string) ([]string, int, error) {
	ret := _m.Called(ctx, etag, alertID, period)

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]string, int, error)); ok {
		return rf(ctx, etag, alertID, period)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []string); ok {
		r0 = rf(ctx, etag, alertID, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) int); ok {
		r1 = rf(ctx, etag, alertID, period)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, etag, alertID, period)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateNotificationTimeSent provides a mock function with given fields: ctx, notification
func (_m *Notifications) UpdateNotificationTimeSent(ctx context.Context, notification *domain.Notification) error {
	ret := _m.Called(ctx, notification)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotifications creates a new instance of Notifications. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifications(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notifications {
	mock := &Notifications{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
