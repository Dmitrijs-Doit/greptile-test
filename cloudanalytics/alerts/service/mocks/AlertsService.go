// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"

	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/alerts/service"
)

// AlertsService is an autogenerated mock type for the AlertsService type
type AlertsService struct {
	mock.Mock
}

// CreateAlert provides a mock function with given fields: ctx, args
func (_m *AlertsService) CreateAlert(ctx context.Context, args service.ExternalAPICreateUpdateArgsReq) service.ExternalAPICreateUpdateResp {
	ret := _m.Called(ctx, args)

	var r0 service.ExternalAPICreateUpdateResp
	if rf, ok := ret.Get(0).(func(context.Context, service.ExternalAPICreateUpdateArgsReq) service.ExternalAPICreateUpdateResp); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(service.ExternalAPICreateUpdateResp)
	}

	return r0
}

// DeleteAlert provides a mock function with given fields: ctx, customerID, email, alertID
func (_m *AlertsService) DeleteAlert(ctx context.Context, customerID string, email string, alertID string) error {
	ret := _m.Called(ctx, customerID, email, alertID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, customerID, email, alertID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ctx, email, alertIDs
func (_m *AlertsService) DeleteMany(ctx context.Context, email string, alertIDs []string) error {
	ret := _m.Called(ctx, email, alertIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, email, alertIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAlert provides a mock function with given fields: ctx, alertID
func (_m *AlertsService) GetAlert(ctx context.Context, alertID string) (*service.AlertAPI, error) {
	ret := _m.Called(ctx, alertID)

	var r0 *service.AlertAPI

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.AlertAPI, error)); ok {
		return rf(ctx, alertID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *service.AlertAPI); ok {
		r0 = rf(ctx, alertID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.AlertAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alertID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAlerts provides a mock function with given fields: ctx, req
func (_m *AlertsService) ListAlerts(ctx context.Context, req service.ExternalAPIListArgsReq) (*service.ExternalAlertList, error) {
	ret := _m.Called(ctx, req)

	var r0 *service.ExternalAlertList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, service.ExternalAPIListArgsReq) (*service.ExternalAlertList, error)); ok {
		return rf(ctx, req)
	}

	if rf, ok := ret.Get(0).(func(context.Context, service.ExternalAPIListArgsReq) *service.ExternalAlertList); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ExternalAlertList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.ExternalAPIListArgsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAlert provides a mock function with given fields: ctx, alertID
func (_m *AlertsService) RefreshAlert(ctx context.Context, alertID string) error {
	ret := _m.Called(ctx, alertID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, alertID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshAlerts provides a mock function with given fields: ctx
func (_m *AlertsService) RefreshAlerts(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmails provides a mock function with given fields: ctx
func (_m *AlertsService) SendEmails(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailsToCustomer provides a mock function with given fields: ctx, customerID
func (_m *AlertsService) SendEmailsToCustomer(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareAlert provides a mock function with given fields: ctx, newCollabs, public, alertID, requesterEmail, userID
func (_m *AlertsService) ShareAlert(ctx context.Context, newCollabs []collab.Collaborator, public *collab.PublicAccess, alertID string, requesterEmail string, userID string, customerID string) error {
	ret := _m.Called(ctx, newCollabs, public, alertID, requesterEmail, userID, customerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []collab.Collaborator, *collab.PublicAccess, string, string, string, string) error); ok {
		r0 = rf(ctx, newCollabs, public, alertID, requesterEmail, userID, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAlert provides a mock function with given fields: ctx, alertID, args
func (_m *AlertsService) UpdateAlert(ctx context.Context, alertID string, args service.ExternalAPICreateUpdateArgsReq) service.ExternalAPICreateUpdateResp {
	ret := _m.Called(ctx, alertID, args)

	var r0 service.ExternalAPICreateUpdateResp
	if rf, ok := ret.Get(0).(func(context.Context, string, service.ExternalAPICreateUpdateArgsReq) service.ExternalAPICreateUpdateResp); ok {
		r0 = rf(ctx, alertID, args)
	} else {
		r0 = ret.Get(0).(service.ExternalAPICreateUpdateResp)
	}

	return r0
}

type mockConstructorTestingTNewAlertsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlertsService creates a new instance of AlertsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlertsService(t mockConstructorTestingTNewAlertsService) *AlertsService {
	mock := &AlertsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
