// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"

	mock "github.com/stretchr/testify/mock"
)

// IAttributionQuery is an autogenerated mock type for the IAttributionQuery type
type IAttributionQuery struct {
	mock.Mock
}

// LogicalOperatorsAlphaToSymbol provides a mock function with given fields: formulaString
func (_m *IAttributionQuery) LogicalOperatorsAlphaToSymbol(formulaString string) string {
	ret := _m.Called(formulaString)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(formulaString)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogicalOperatorsSymbolToAlpha provides a mock function with given fields: formulaString
func (_m *IAttributionQuery) LogicalOperatorsSymbolToAlpha(formulaString string) string {
	ret := _m.Called(formulaString)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(formulaString)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ValidateFormula provides a mock function with given fields: ctx, bq, variablesLength, formula
func (_m *IAttributionQuery) ValidateFormula(ctx context.Context, bq *bigquery.Client, variablesLength int, formula string) error {
	ret := _m.Called(ctx, bq, variablesLength, formula)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, int, string) error); ok {
		r0 = rf(ctx, bq, variablesLength, formula)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAttributionQuery creates a new instance of IAttributionQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAttributionQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAttributionQuery {
	mock := &IAttributionQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
