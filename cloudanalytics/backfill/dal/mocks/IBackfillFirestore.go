// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"
	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/backfill/domain"

	googleclouddirect "github.com/doitintl/hello/scheduled-tasks/googleclouddirect"

	mock "github.com/stretchr/testify/mock"
)

// IBackfillFirestore is an autogenerated mock type for the IBackfillFirestore type
type IBackfillFirestore struct {
	mock.Mock
}

// GetAssetsWithRelevantFlag provides a mock function with given fields: ctx, flag, operation, comparingTo
func (_m *IBackfillFirestore) GetAssetsWithRelevantFlag(ctx context.Context, flag string, operation string, comparingTo string) *firestore.DocumentIterator {
	ret := _m.Called(ctx, flag, operation, comparingTo)

	var r0 *firestore.DocumentIterator
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *firestore.DocumentIterator); ok {
		r0 = rf(ctx, flag, operation, comparingTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentIterator)
		}
	}

	return r0
}

// GetConfig provides a mock function with given fields: ctx
func (_m *IBackfillFirestore) GetConfig(ctx context.Context) (*domain.Config, error) {
	ret := _m.Called(ctx)

	var r0 *domain.Config

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) (*domain.Config, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) *domain.Config); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerAsset provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *IBackfillFirestore) GetCustomerAsset(ctx context.Context, customerID string, billingAccountID string) (*googleclouddirect.GoogleCloudBillingAsset, error) {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 *googleclouddirect.GoogleCloudBillingAsset

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*googleclouddirect.GoogleCloudBillingAsset, error)); ok {
		return rf(ctx, customerID, billingAccountID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string) *googleclouddirect.GoogleCloudBillingAsset); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*googleclouddirect.GoogleCloudBillingAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, billingAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerGCPDoc provides a mock function with given fields: ctx, customerID
func (_m *IBackfillFirestore) GetCustomerGCPDoc(ctx context.Context, customerID string) (*domain.CloudConnect, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *domain.CloudConnect

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.CloudConnect, error)); ok {
		return rf(ctx, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.CloudConnect); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CloudConnect)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectBillingAccountsDocs provides a mock function with given fields: ctx, customerID
func (_m *IBackfillFirestore) GetDirectBillingAccountsDocs(ctx context.Context, customerID string) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []*firestore.DocumentSnapshot

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssetCopyJobProgress provides a mock function with given fields: ctx, status, progress, err, flowInfo
func (_m *IBackfillFirestore) UpdateAssetCopyJobProgress(ctx context.Context, status string, progress float64, err error, flowInfo *domain.FlowInfo) error {
	ret := _m.Called(ctx, status, progress, err, flowInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, error, *domain.FlowInfo) error); ok {
		r0 = rf(ctx, status, progress, err, flowInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConfigDoc provides a mock function with given fields: ctx, region, bucketName
func (_m *IBackfillFirestore) UpdateConfigDoc(ctx context.Context, region string, bucketName string) error {
	ret := _m.Called(ctx, region, bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, region, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBackfillFirestore creates a new instance of IBackfillFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBackfillFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBackfillFirestore {
	mock := &IBackfillFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
