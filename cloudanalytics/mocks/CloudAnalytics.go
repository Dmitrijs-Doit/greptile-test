// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudanalytics "github.com/doitintl/hello/scheduled-tasks/cloudanalytics"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/query/domain"

	mock "github.com/stretchr/testify/mock"

	report "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/reports/domain/report"

	slack "github.com/slack-go/slack"
)

// CloudAnalytics is an autogenerated mock type for the CloudAnalytics type
type CloudAnalytics struct {
	mock.Mock
}

// DeleteStaleDraftReports provides a mock function with given fields: ctx
func (_m *CloudAnalytics) DeleteStaleDraftReports(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccounts provides a mock function with given fields: ctx, customerID, cloudProviders, filters
func (_m *CloudAnalytics) GetAccounts(ctx context.Context, customerID string, cloudProviders *[]string, filters []*report.ConfigFilter) ([]string, error) {
	ret := _m.Called(ctx, customerID, cloudProviders, filters)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]string, []*report.ConfigFilter) ([]string, error)); ok {
		return rf(ctx, customerID, cloudProviders, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]string, []*report.ConfigFilter) []string); ok {
		r0 = rf(ctx, customerID, cloudProviders, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *[]string, []*report.ConfigFilter) error); ok {
		r1 = rf(ctx, customerID, cloudProviders, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributions provides a mock function with given fields: ctx, filters, rows, cols, customerID
func (_m *CloudAnalytics) GetAttributions(ctx context.Context, filters []*domain.QueryRequestX, rows []string, cols []string, customerID string) ([]*domain.QueryRequestX, error) {
	ret := _m.Called(ctx, filters, rows, cols, customerID)

	var r0 []*domain.QueryRequestX
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.QueryRequestX, []string, []string, string) ([]*domain.QueryRequestX, error)); ok {
		return rf(ctx, filters, rows, cols, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.QueryRequestX, []string, []string, string) []*domain.QueryRequestX); ok {
		r0 = rf(ctx, filters, rows, cols, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.QueryRequestX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*domain.QueryRequestX, []string, []string, string) error); ok {
		r1 = rf(ctx, filters, rows, cols, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryRequest provides a mock function with given fields: ctx, customerID, reportID
func (_m *CloudAnalytics) GetQueryRequest(ctx context.Context, customerID string, reportID string) (*cloudanalytics.QueryRequest, *report.Report, error) {
	ret := _m.Called(ctx, customerID, reportID)

	var r0 *cloudanalytics.QueryRequest
	var r1 *report.Report
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*cloudanalytics.QueryRequest, *report.Report, error)); ok {
		return rf(ctx, customerID, reportID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *cloudanalytics.QueryRequest); ok {
		r0 = rf(ctx, customerID, reportID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudanalytics.QueryRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *report.Report); ok {
		r1 = rf(ctx, customerID, reportID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*report.Report)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, customerID, reportID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetQueryResult provides a mock function with given fields: ctx, qr, customerID, email
func (_m *CloudAnalytics) GetQueryResult(ctx context.Context, qr *cloudanalytics.QueryRequest, customerID string, email string) (cloudanalytics.QueryResult, error) {
	ret := _m.Called(ctx, qr, customerID, email)

	var r0 cloudanalytics.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudanalytics.QueryRequest, string, string) (cloudanalytics.QueryResult, error)); ok {
		return rf(ctx, qr, customerID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudanalytics.QueryRequest, string, string) cloudanalytics.QueryResult); ok {
		r0 = rf(ctx, qr, customerID, email)
	} else {
		r0 = ret.Get(0).(cloudanalytics.QueryResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudanalytics.QueryRequest, string, string) error); ok {
		r1 = rf(ctx, qr, customerID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReport provides a mock function with given fields: ctx, customerID, reportID, presentationModeEnabled
func (_m *CloudAnalytics) GetReport(ctx context.Context, customerID string, reportID string, presentationModeEnabled bool) (*report.Report, error) {
	ret := _m.Called(ctx, customerID, reportID, presentationModeEnabled)

	var r0 *report.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) (*report.Report, error)); ok {
		return rf(ctx, customerID, reportID, presentationModeEnabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) *report.Report); ok {
		r0 = rf(ctx, customerID, reportID, presentationModeEnabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, customerID, reportID, presentationModeEnabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportSlackUnfurl provides a mock function with given fields: ctx, reportID, customerID, URL, imageURL
func (_m *CloudAnalytics) GetReportSlackUnfurl(ctx context.Context, reportID string, customerID string, URL string, imageURL string) (*report.Report, map[string]slack.Attachment, error) {
	ret := _m.Called(ctx, reportID, customerID, URL, imageURL)

	var r0 *report.Report
	var r1 map[string]slack.Attachment
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*report.Report, map[string]slack.Attachment, error)); ok {
		return rf(ctx, reportID, customerID, URL, imageURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *report.Report); ok {
		r0 = rf(ctx, reportID, customerID, URL, imageURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*report.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) map[string]slack.Attachment); ok {
		r1 = rf(ctx, reportID, customerID, URL, imageURL)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]slack.Attachment)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string) error); ok {
		r2 = rf(ctx, reportID, customerID, URL, imageURL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewQueryRequestFromFirestoreReport provides a mock function with given fields: ctx, customerID, _a2
func (_m *CloudAnalytics) NewQueryRequestFromFirestoreReport(ctx context.Context, customerID string, _a2 *report.Report) (*cloudanalytics.QueryRequest, error) {
	ret := _m.Called(ctx, customerID, _a2)

	var r0 *cloudanalytics.QueryRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report) (*cloudanalytics.QueryRequest, error)); ok {
		return rf(ctx, customerID, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *report.Report) *cloudanalytics.QueryRequest); ok {
		r0 = rf(ctx, customerID, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudanalytics.QueryRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *report.Report) error); ok {
		r1 = rf(ctx, customerID, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunQuery provides a mock function with given fields: ctx, qr, params
func (_m *CloudAnalytics) RunQuery(ctx context.Context, qr *cloudanalytics.QueryRequest, params cloudanalytics.RunQueryInput) (*cloudanalytics.QueryResult, error) {
	ret := _m.Called(ctx, qr, params)

	var r0 *cloudanalytics.QueryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudanalytics.QueryRequest, cloudanalytics.RunQueryInput) (*cloudanalytics.QueryResult, error)); ok {
		return rf(ctx, qr, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudanalytics.QueryRequest, cloudanalytics.RunQueryInput) *cloudanalytics.QueryResult); ok {
		r0 = rf(ctx, qr, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudanalytics.QueryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudanalytics.QueryRequest, cloudanalytics.RunQueryInput) error); ok {
		r1 = rf(ctx, qr, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCurrenciesTable provides a mock function with given fields: ctx
func (_m *CloudAnalytics) UpdateCurrenciesTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCustomersInfoTable provides a mock function with given fields: ctx
func (_m *CloudAnalytics) UpdateCustomersInfoTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCloudAnalytics interface {
	mock.TestingT
	Cleanup(func())
}

// NewCloudAnalytics creates a new instance of CloudAnalytics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCloudAnalytics(t mockConstructorTestingTNewCloudAnalytics) *CloudAnalytics {
	mock := &CloudAnalytics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
