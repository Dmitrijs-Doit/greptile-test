// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	attribution "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/attributions/domain/attribution"

	customerapi "github.com/doitintl/customerapi"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// Attributions is an autogenerated mock type for the Attributions type
type Attributions struct {
	mock.Mock
}

// CreateAttribution provides a mock function with given fields: ctx, _a1
func (_m *Attributions) CreateAttribution(ctx context.Context, _a1 *attribution.Attribution) (*attribution.Attribution, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *attribution.Attribution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *attribution.Attribution) (*attribution.Attribution, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *attribution.Attribution) *attribution.Attribution); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribution.Attribution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *attribution.Attribution) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerHasCustomAttributions provides a mock function with given fields: ctx, customerRef
func (_m *Attributions) CustomerHasCustomAttributions(ctx context.Context, customerRef *firestore.DocumentRef) (bool, error) {
	ret := _m.Called(ctx, customerRef)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (bool, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) bool); ok {
		r0 = rf(ctx, customerRef)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttribution provides a mock function with given fields: ctx, attributionID
func (_m *Attributions) DeleteAttribution(ctx context.Context, attributionID string) error {
	ret := _m.Called(ctx, attributionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, attributionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAttribution provides a mock function with given fields: ctx, attributionID
func (_m *Attributions) GetAttribution(ctx context.Context, attributionID string) (*attribution.Attribution, error) {
	ret := _m.Called(ctx, attributionID)

	var r0 *attribution.Attribution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*attribution.Attribution, error)); ok {
		return rf(ctx, attributionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *attribution.Attribution); ok {
		r0 = rf(ctx, attributionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribution.Attribution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, attributionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributions provides a mock function with given fields: ctx, attributionsRefs
func (_m *Attributions) GetAttributions(ctx context.Context, attributionsRefs []*firestore.DocumentRef) ([]*attribution.Attribution, error) {
	ret := _m.Called(ctx, attributionsRefs)

	var r0 []*attribution.Attribution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*firestore.DocumentRef) ([]*attribution.Attribution, error)); ok {
		return rf(ctx, attributionsRefs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*firestore.DocumentRef) []*attribution.Attribution); ok {
		r0 = rf(ctx, attributionsRefs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribution.Attribution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*firestore.DocumentRef) error); ok {
		r1 = rf(ctx, attributionsRefs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, attributionID
func (_m *Attributions) GetRef(ctx context.Context, attributionID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, attributionID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, attributionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// ListAttributions provides a mock function with given fields: ctx, req, cRef
func (_m *Attributions) ListAttributions(ctx context.Context, req *customerapi.Request, cRef *firestore.DocumentRef) ([]attribution.Attribution, error) {
	ret := _m.Called(ctx, req, cRef)

	var r0 []attribution.Attribution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerapi.Request, *firestore.DocumentRef) ([]attribution.Attribution, error)); ok {
		return rf(ctx, req, cRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerapi.Request, *firestore.DocumentRef) []attribution.Attribution); ok {
		r0 = rf(ctx, req, cRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attribution.Attribution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerapi.Request, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, req, cRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttribution provides a mock function with given fields: ctx, attributionID, _a2
func (_m *Attributions) UpdateAttribution(ctx context.Context, attributionID string, _a2 []firestore.Update) error {
	ret := _m.Called(ctx, attributionID, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []firestore.Update) error); ok {
		r0 = rf(ctx, attributionID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAttributions creates a new instance of Attributions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttributions(t interface {
	mock.TestingT
	Cleanup(func())
}) *Attributions {
	mock := &Attributions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
