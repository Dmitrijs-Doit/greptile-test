// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	attribution "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/attributions/domain/attribution"

	customerapi "github.com/doitintl/customerapi"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/attributions/service"
)

// AttributionsIface is an autogenerated mock type for the AttributionsIface type
type AttributionsIface struct {
	mock.Mock
}

// CreateAttribution provides a mock function with given fields: ctx, req
func (_m *AttributionsIface) CreateAttribution(ctx context.Context, req *service.CreateAttributionRequest) (*attribution.AttributionAPI, error) {
	ret := _m.Called(ctx, req)

	var r0 *attribution.AttributionAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateAttributionRequest) (*attribution.AttributionAPI, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.CreateAttributionRequest) *attribution.AttributionAPI); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribution.AttributionAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.CreateAttributionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAttributionsForInvoiceAssetTypes provides a mock function with given fields: ctx, req
func (_m *AttributionsIface) CreateAttributionsForInvoiceAssetTypes(ctx context.Context, req service.SyncInvoiceByAssetTypeAttributionRequest) ([]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, req)

	var r0 []*firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncInvoiceByAssetTypeAttributionRequest) ([]*firestore.DocumentRef, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncInvoiceByAssetTypeAttributionRequest) []*firestore.DocumentRef); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.SyncInvoiceByAssetTypeAttributionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucketAttribution provides a mock function with given fields: ctx, req
func (_m *AttributionsIface) CreateBucketAttribution(ctx context.Context, req *service.SyncBucketAttributionRequest) (*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, req)

	var r0 *firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.SyncBucketAttributionRequest) (*firestore.DocumentRef, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.SyncBucketAttributionRequest) *firestore.DocumentRef); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.SyncBucketAttributionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttributions provides a mock function with given fields: ctx, req
func (_m *AttributionsIface) DeleteAttributions(ctx context.Context, req *service.DeleteAttributionsRequest) ([]service.AttributionDeleteValidation, error) {
	ret := _m.Called(ctx, req)

	var r0 []service.AttributionDeleteValidation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.DeleteAttributionsRequest) ([]service.AttributionDeleteValidation, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.DeleteAttributionsRequest) []service.AttributionDeleteValidation); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.AttributionDeleteValidation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.DeleteAttributionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttribution provides a mock function with given fields: ctx, attributionID, isDoitEmployee, customerID, userEmail
func (_m *AttributionsIface) GetAttribution(ctx context.Context, attributionID string, isDoitEmployee bool, customerID string, userEmail string) (*attribution.AttributionAPI, error) {
	ret := _m.Called(ctx, attributionID, isDoitEmployee, customerID, userEmail)

	var r0 *attribution.AttributionAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string, string) (*attribution.AttributionAPI, error)); ok {
		return rf(ctx, attributionID, isDoitEmployee, customerID, userEmail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string, string) *attribution.AttributionAPI); ok {
		r0 = rf(ctx, attributionID, isDoitEmployee, customerID, userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribution.AttributionAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, string, string) error); ok {
		r1 = rf(ctx, attributionID, isDoitEmployee, customerID, userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributions provides a mock function with given fields: ctx, attributionsIDs
func (_m *AttributionsIface) GetAttributions(ctx context.Context, attributionsIDs []string) ([]*attribution.Attribution, error) {
	ret := _m.Called(ctx, attributionsIDs)

	var r0 []*attribution.Attribution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*attribution.Attribution, error)); ok {
		return rf(ctx, attributionsIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*attribution.Attribution); ok {
		r0 = rf(ctx, attributionsIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribution.Attribution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, attributionsIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttributions provides a mock function with given fields: ctx, req
func (_m *AttributionsIface) ListAttributions(ctx context.Context, req *customerapi.Request) (*attribution.AttributionsList, error) {
	ret := _m.Called(ctx, req)

	var r0 *attribution.AttributionsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerapi.Request) (*attribution.AttributionsList, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerapi.Request) *attribution.AttributionsList); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribution.AttributionsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerapi.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShareAttributions provides a mock function with given fields: ctx, req, email, userID
func (_m *AttributionsIface) ShareAttributions(ctx context.Context, req *service.ShareAttributionRequest, email string, userID string) error {
	ret := _m.Called(ctx, req, email, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.ShareAttributionRequest, string, string) error); ok {
		r0 = rf(ctx, req, email, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAttribution provides a mock function with given fields: ctx, req
func (_m *AttributionsIface) UpdateAttribution(ctx context.Context, req *service.UpdateAttributionRequest) (*attribution.AttributionAPI, error) {
	ret := _m.Called(ctx, req)

	var r0 *attribution.AttributionAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.UpdateAttributionRequest) (*attribution.AttributionAPI, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.UpdateAttributionRequest) *attribution.AttributionAPI); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribution.AttributionAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.UpdateAttributionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttributions provides a mock function with given fields: ctx, customerID, attributions, userID
func (_m *AttributionsIface) UpdateAttributions(ctx context.Context, customerID string, attributions []*attribution.Attribution, userID string) ([]*attribution.AttributionAPI, error) {
	ret := _m.Called(ctx, customerID, attributions, userID)

	var r0 []*attribution.AttributionAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*attribution.Attribution, string) ([]*attribution.AttributionAPI, error)); ok {
		return rf(ctx, customerID, attributions, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*attribution.Attribution, string) []*attribution.AttributionAPI); ok {
		r0 = rf(ctx, customerID, attributions, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribution.AttributionAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*attribution.Attribution, string) error); ok {
		r1 = rf(ctx, customerID, attributions, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAttributionsIface creates a new instance of AttributionsIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttributionsIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttributionsIface {
	mock := &AttributionsIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
