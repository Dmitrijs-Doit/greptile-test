// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/templatelibrary/dal"
	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/templatelibrary/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// ReportTemplateFirestore is an autogenerated mock type for the ReportTemplateFirestore type
type ReportTemplateFirestore struct {
	mock.Mock
}

// CreateReportTemplate provides a mock function with given fields: ctx, tx, reportTemplate
func (_m *ReportTemplateFirestore) CreateReportTemplate(ctx context.Context, tx *firestore.Transaction, reportTemplate *domain.ReportTemplate) (*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, tx, reportTemplate)

	if len(ret) == 0 {
		panic("no return value specified for CreateReportTemplate")
	}

	var r0 *firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, *domain.ReportTemplate) (*firestore.DocumentRef, error)); ok {
		return rf(ctx, tx, reportTemplate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, *domain.ReportTemplate) *firestore.DocumentRef); ok {
		r0 = rf(ctx, tx, reportTemplate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.Transaction, *domain.ReportTemplate) error); ok {
		r1 = rf(ctx, tx, reportTemplate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVersion provides a mock function with given fields: ctx, tx, reportTemplateVersionID, reportTemplateID, reportTemplateVersion
func (_m *ReportTemplateFirestore) CreateVersion(ctx context.Context, tx *firestore.Transaction, reportTemplateVersionID string, reportTemplateID string, reportTemplateVersion *domain.ReportTemplateVersion) (*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, tx, reportTemplateVersionID, reportTemplateID, reportTemplateVersion)

	if len(ret) == 0 {
		panic("no return value specified for CreateVersion")
	}

	var r0 *firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, string, string, *domain.ReportTemplateVersion) (*firestore.DocumentRef, error)); ok {
		return rf(ctx, tx, reportTemplateVersionID, reportTemplateID, reportTemplateVersion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, string, string, *domain.ReportTemplateVersion) *firestore.DocumentRef); ok {
		r0 = rf(ctx, tx, reportTemplateVersionID, reportTemplateID, reportTemplateVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.Transaction, string, string, *domain.ReportTemplateVersion) error); ok {
		r1 = rf(ctx, tx, reportTemplateVersionID, reportTemplateID, reportTemplateVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReportTemplate provides a mock function with given fields: ctx, reportTemplateID
func (_m *ReportTemplateFirestore) DeleteReportTemplate(ctx context.Context, reportTemplateID string) error {
	ret := _m.Called(ctx, reportTemplateID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReportTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, reportTemplateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, tx, reportTemplateID
func (_m *ReportTemplateFirestore) Get(ctx context.Context, tx *firestore.Transaction, reportTemplateID string) (*domain.ReportTemplate, error) {
	ret := _m.Called(ctx, tx, reportTemplateID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ReportTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, string) (*domain.ReportTemplate, error)); ok {
		return rf(ctx, tx, reportTemplateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, string) *domain.ReportTemplate); ok {
		r0 = rf(ctx, tx, reportTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReportTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.Transaction, string) error); ok {
		r1 = rf(ctx, tx, reportTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplates provides a mock function with given fields: ctx
func (_m *ReportTemplateFirestore) GetTemplates(ctx context.Context) ([]domain.ReportTemplate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplates")
	}

	var r0 []domain.ReportTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ReportTemplate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ReportTemplate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ReportTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionByRef provides a mock function with given fields: ctx, reportTemplateVersionRef
func (_m *ReportTemplateFirestore) GetVersionByRef(ctx context.Context, reportTemplateVersionRef *firestore.DocumentRef) (*domain.ReportTemplateVersion, error) {
	ret := _m.Called(ctx, reportTemplateVersionRef)

	if len(ret) == 0 {
		panic("no return value specified for GetVersionByRef")
	}

	var r0 *domain.ReportTemplateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (*domain.ReportTemplateVersion, error)); ok {
		return rf(ctx, reportTemplateVersionRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) *domain.ReportTemplateVersion); ok {
		r0 = rf(ctx, reportTemplateVersionRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReportTemplateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, reportTemplateVersionRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersions provides a mock function with given fields: ctx, versionRefs
func (_m *ReportTemplateFirestore) GetVersions(ctx context.Context, versionRefs []*firestore.DocumentRef) ([]domain.ReportTemplateVersion, error) {
	ret := _m.Called(ctx, versionRefs)

	if len(ret) == 0 {
		panic("no return value specified for GetVersions")
	}

	var r0 []domain.ReportTemplateVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*firestore.DocumentRef) ([]domain.ReportTemplateVersion, error)); ok {
		return rf(ctx, versionRefs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*firestore.DocumentRef) []domain.ReportTemplateVersion); ok {
		r0 = rf(ctx, versionRefs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ReportTemplateVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*firestore.DocumentRef) error); ok {
		r1 = rf(ctx, versionRefs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HideReportTemplate provides a mock function with given fields: ctx, reportTemplateID
func (_m *ReportTemplateFirestore) HideReportTemplate(ctx context.Context, reportTemplateID string) error {
	ret := _m.Called(ctx, reportTemplateID)

	if len(ret) == 0 {
		panic("no return value specified for HideReportTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, reportTemplateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTransaction provides a mock function with given fields: ctx, f
func (_m *ReportTemplateFirestore) RunTransaction(ctx context.Context, f dal.TransactionFunc) (interface{}, error) {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for RunTransaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.TransactionFunc) (interface{}, error)); ok {
		return rf(ctx, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dal.TransactionFunc) interface{}); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dal.TransactionFunc) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportTemplate provides a mock function with given fields: ctx, tx, reportTemplateID, reportTemplate
func (_m *ReportTemplateFirestore) UpdateReportTemplate(ctx context.Context, tx *firestore.Transaction, reportTemplateID string, reportTemplate *domain.ReportTemplate) error {
	ret := _m.Called(ctx, tx, reportTemplateID, reportTemplate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, string, *domain.ReportTemplate) error); ok {
		r0 = rf(ctx, tx, reportTemplateID, reportTemplate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReportTemplateVersion provides a mock function with given fields: ctx, tx, reportTemplateVersion
func (_m *ReportTemplateFirestore) UpdateReportTemplateVersion(ctx context.Context, tx *firestore.Transaction, reportTemplateVersion *domain.ReportTemplateVersion) error {
	ret := _m.Called(ctx, tx, reportTemplateVersion)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportTemplateVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Transaction, *domain.ReportTemplateVersion) error); ok {
		r0 = rf(ctx, tx, reportTemplateVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReportTemplateFirestore creates a new instance of ReportTemplateFirestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportTemplateFirestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportTemplateFirestore {
	mock := &ReportTemplateFirestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
