// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	errormsg "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/externalapi/domain/errormsg"
	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/templatelibrary/domain"

	mock "github.com/stretchr/testify/mock"
)

// ReportTemplateService is an autogenerated mock type for the ReportTemplateService type
type ReportTemplateService struct {
	mock.Mock
}

// ApproveReportTemplate provides a mock function with given fields: ctx, requesterEmail, reportTemplateID
func (_m *ReportTemplateService) ApproveReportTemplate(ctx context.Context, requesterEmail string, reportTemplateID string) (*domain.ReportTemplateWithVersion, error) {
	ret := _m.Called(ctx, requesterEmail, reportTemplateID)

	var r0 *domain.ReportTemplateWithVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.ReportTemplateWithVersion, error)); ok {
		return rf(ctx, requesterEmail, reportTemplateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.ReportTemplateWithVersion); ok {
		r0 = rf(ctx, requesterEmail, reportTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReportTemplateWithVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, requesterEmail, reportTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReportTemplate provides a mock function with given fields: ctx, email, createReportTemplateReq
func (_m *ReportTemplateService) CreateReportTemplate(ctx context.Context, email string, createReportTemplateReq *domain.ReportTemplateReq) (*domain.ReportTemplateWithVersion, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, email, createReportTemplateReq)

	var r0 *domain.ReportTemplateWithVersion
	var r1 []errormsg.ErrorMsg
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.ReportTemplateReq) (*domain.ReportTemplateWithVersion, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, email, createReportTemplateReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.ReportTemplateReq) *domain.ReportTemplateWithVersion); ok {
		r0 = rf(ctx, email, createReportTemplateReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReportTemplateWithVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.ReportTemplateReq) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, email, createReportTemplateReq)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *domain.ReportTemplateReq) error); ok {
		r2 = rf(ctx, email, createReportTemplateReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteReportTemplate provides a mock function with given fields: ctx, requesterEmail, reportTemplateID
func (_m *ReportTemplateService) DeleteReportTemplate(ctx context.Context, requesterEmail string, reportTemplateID string) error {
	ret := _m.Called(ctx, requesterEmail, reportTemplateID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, requesterEmail, reportTemplateID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTemplateData provides a mock function with given fields: ctx, isDoitEmployee
func (_m *ReportTemplateService) GetTemplateData(ctx context.Context, isDoitEmployee bool) ([]domain.ReportTemplate, []domain.ReportTemplateVersion, error) {
	ret := _m.Called(ctx, isDoitEmployee)

	var r0 []domain.ReportTemplate
	var r1 []domain.ReportTemplateVersion
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]domain.ReportTemplate, []domain.ReportTemplateVersion, error)); ok {
		return rf(ctx, isDoitEmployee)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []domain.ReportTemplate); ok {
		r0 = rf(ctx, isDoitEmployee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ReportTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) []domain.ReportTemplateVersion); ok {
		r1 = rf(ctx, isDoitEmployee)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ReportTemplateVersion)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, bool) error); ok {
		r2 = rf(ctx, isDoitEmployee)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RejectReportTemplate provides a mock function with given fields: ctx, requesterEmail, reportTemplateID, comment
func (_m *ReportTemplateService) RejectReportTemplate(ctx context.Context, requesterEmail string, reportTemplateID string, comment string) (*domain.ReportTemplateWithVersion, error) {
	ret := _m.Called(ctx, requesterEmail, reportTemplateID, comment)

	var r0 *domain.ReportTemplateWithVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.ReportTemplateWithVersion, error)); ok {
		return rf(ctx, requesterEmail, reportTemplateID, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.ReportTemplateWithVersion); ok {
		r0 = rf(ctx, requesterEmail, reportTemplateID, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReportTemplateWithVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, requesterEmail, reportTemplateID, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportTemplate provides a mock function with given fields: ctx, requesterEmail, isDoitEmployee, reportTemplateID, updateReportTemplateReq
func (_m *ReportTemplateService) UpdateReportTemplate(ctx context.Context, requesterEmail string, isDoitEmployee bool, reportTemplateID string, updateReportTemplateReq *domain.ReportTemplateReq) (*domain.ReportTemplateWithVersion, []errormsg.ErrorMsg, error) {
	ret := _m.Called(ctx, requesterEmail, isDoitEmployee, reportTemplateID, updateReportTemplateReq)

	var r0 *domain.ReportTemplateWithVersion
	var r1 []errormsg.ErrorMsg
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string, *domain.ReportTemplateReq) (*domain.ReportTemplateWithVersion, []errormsg.ErrorMsg, error)); ok {
		return rf(ctx, requesterEmail, isDoitEmployee, reportTemplateID, updateReportTemplateReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string, *domain.ReportTemplateReq) *domain.ReportTemplateWithVersion); ok {
		r0 = rf(ctx, requesterEmail, isDoitEmployee, reportTemplateID, updateReportTemplateReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ReportTemplateWithVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, string, *domain.ReportTemplateReq) []errormsg.ErrorMsg); ok {
		r1 = rf(ctx, requesterEmail, isDoitEmployee, reportTemplateID, updateReportTemplateReq)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]errormsg.ErrorMsg)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool, string, *domain.ReportTemplateReq) error); ok {
		r2 = rf(ctx, requesterEmail, isDoitEmployee, reportTemplateID, updateReportTemplateReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewReportTemplateService creates a new instance of ReportTemplateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportTemplateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportTemplateService {
	mock := &ReportTemplateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
