// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/query/domain"

	forecastdomain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/forecast/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetForecastOriginAndResultRows provides a mock function with given fields: ctx, queryResultRows, queryRequestRows, queryRequestCols, interval, metric, maxRefreshTime, from, to
func (_m *Service) GetForecastOriginAndResultRows(ctx context.Context, queryResultRows [][]bigquery.Value, queryRequestRows int, queryRequestCols []*domain.QueryRequestX, interval string, metric int, maxRefreshTime time.Time, from time.Time, to time.Time) ([]*forecastdomain.OriginSeries, [][]bigquery.Value, error) {
	ret := _m.Called(ctx, queryResultRows, queryRequestRows, queryRequestCols, interval, metric, maxRefreshTime, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetForecastOriginAndResultRows")
	}

	var r0 []*forecastdomain.OriginSeries
	var r1 [][]bigquery.Value
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]bigquery.Value, int, []*domain.QueryRequestX, string, int, time.Time, time.Time, time.Time) ([]*forecastdomain.OriginSeries, [][]bigquery.Value, error)); ok {
		return rf(ctx, queryResultRows, queryRequestRows, queryRequestCols, interval, metric, maxRefreshTime, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]bigquery.Value, int, []*domain.QueryRequestX, string, int, time.Time, time.Time, time.Time) []*forecastdomain.OriginSeries); ok {
		r0 = rf(ctx, queryResultRows, queryRequestRows, queryRequestCols, interval, metric, maxRefreshTime, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*forecastdomain.OriginSeries)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]bigquery.Value, int, []*domain.QueryRequestX, string, int, time.Time, time.Time, time.Time) [][]bigquery.Value); ok {
		r1 = rf(ctx, queryResultRows, queryRequestRows, queryRequestCols, interval, metric, maxRefreshTime, from, to)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([][]bigquery.Value)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, [][]bigquery.Value, int, []*domain.QueryRequestX, string, int, time.Time, time.Time, time.Time) error); ok {
		r2 = rf(ctx, queryResultRows, queryRequestRows, queryRequestCols, interval, metric, maxRefreshTime, from, to)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
