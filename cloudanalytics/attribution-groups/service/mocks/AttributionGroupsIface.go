// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	attributiongroups "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/attribution-groups/domain/attributiongroups"
	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	context "context"

	customerapi "github.com/doitintl/customerapi"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/resource/domain"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/attribution-groups/service"
)

// AttributionGroupsIface is an autogenerated mock type for the AttributionGroupsIface type
type AttributionGroupsIface struct {
	mock.Mock
}

// CreateAttributionGroup provides a mock function with given fields: ctx, customerID, requesterEmail, attributionGroup
func (_m *AttributionGroupsIface) CreateAttributionGroup(ctx context.Context, customerID string, requesterEmail string, attributionGroup *attributiongroups.AttributionGroupRequest) (string, error) {
	ret := _m.Called(ctx, customerID, requesterEmail, attributionGroup)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *attributiongroups.AttributionGroupRequest) (string, error)); ok {
		return rf(ctx, customerID, requesterEmail, attributionGroup)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *attributiongroups.AttributionGroupRequest) string); ok {
		r0 = rf(ctx, customerID, requesterEmail, attributionGroup)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *attributiongroups.AttributionGroupRequest) error); ok {
		r1 = rf(ctx, customerID, requesterEmail, attributionGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttributionGroup provides a mock function with given fields: ctx, customerID, requesterEmail, attributionGroupID
func (_m *AttributionGroupsIface) DeleteAttributionGroup(ctx context.Context, customerID string, requesterEmail string, attributionGroupID string) ([]domain.Resource, error) {
	ret := _m.Called(ctx, customerID, requesterEmail, attributionGroupID)

	var r0 []domain.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]domain.Resource, error)); ok {
		return rf(ctx, customerID, requesterEmail, attributionGroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []domain.Resource); ok {
		r0 = rf(ctx, customerID, requesterEmail, attributionGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerID, requesterEmail, attributionGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributionGroupExternal provides a mock function with given fields: ctx, attributionGroupID
func (_m *AttributionGroupsIface) GetAttributionGroupExternal(ctx context.Context, attributionGroupID string) (*attributiongroups.AttributionGroupGetExternal, error) {
	ret := _m.Called(ctx, attributionGroupID)

	var r0 *attributiongroups.AttributionGroupGetExternal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*attributiongroups.AttributionGroupGetExternal, error)); ok {
		return rf(ctx, attributionGroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *attributiongroups.AttributionGroupGetExternal); ok {
		r0 = rf(ctx, attributionGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attributiongroups.AttributionGroupGetExternal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, attributionGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributionGroups provides a mock function with given fields: ctx, attributionGroupsIDs
func (_m *AttributionGroupsIface) GetAttributionGroups(ctx context.Context, attributionGroupsIDs []string) ([]*attributiongroups.AttributionGroup, error) {
	ret := _m.Called(ctx, attributionGroupsIDs)

	var r0 []*attributiongroups.AttributionGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*attributiongroups.AttributionGroup, error)); ok {
		return rf(ctx, attributionGroupsIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*attributiongroups.AttributionGroup); ok {
		r0 = rf(ctx, attributionGroupsIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attributiongroups.AttributionGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, attributionGroupsIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttributionGroupsExternal provides a mock function with given fields: ctx, req
func (_m *AttributionGroupsIface) ListAttributionGroupsExternal(ctx context.Context, req *customerapi.Request) (*attributiongroups.AttributionGroupsListExternal, error) {
	ret := _m.Called(ctx, req)

	var r0 *attributiongroups.AttributionGroupsListExternal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerapi.Request) (*attributiongroups.AttributionGroupsListExternal, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerapi.Request) *attributiongroups.AttributionGroupsListExternal); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attributiongroups.AttributionGroupsListExternal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerapi.Request) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShareAttributionGroup provides a mock function with given fields: ctx, newCollabs, public, attributionGroupID, userID, requesterEmail
func (_m *AttributionGroupsIface) ShareAttributionGroup(ctx context.Context, newCollabs []collab.Collaborator, public *collab.PublicAccess, attributionGroupID string, userID string, requesterEmail string) error {
	ret := _m.Called(ctx, newCollabs, public, attributionGroupID, userID, requesterEmail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []collab.Collaborator, *collab.PublicAccess, string, string, string) error); ok {
		r0 = rf(ctx, newCollabs, public, attributionGroupID, userID, requesterEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncEntityInvoiceAttributions provides a mock function with given fields: ctx, req
func (_m *AttributionGroupsIface) SyncEntityInvoiceAttributions(ctx context.Context, req service.SyncEntityInvoiceAttributionsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.SyncEntityInvoiceAttributionsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAttributionGroup provides a mock function with given fields: ctx, customerID, attributionGroupID, requesterEmail, attributionGroupUpdate
func (_m *AttributionGroupsIface) UpdateAttributionGroup(ctx context.Context, customerID string, attributionGroupID string, requesterEmail string, attributionGroupUpdate *attributiongroups.AttributionGroupUpdateRequest) error {
	ret := _m.Called(ctx, customerID, attributionGroupID, requesterEmail, attributionGroupUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *attributiongroups.AttributionGroupUpdateRequest) error); ok {
		r0 = rf(ctx, customerID, attributionGroupID, requesterEmail, attributionGroupUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAttributionGroupsIface creates a new instance of AttributionGroupsIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttributionGroupsIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttributionGroupsIface {
	mock := &AttributionGroupsIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
