// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/widget/domain"

	mock "github.com/stretchr/testify/mock"
)

// WidgetService is an autogenerated mock type for the WidgetService type
type WidgetService struct {
	mock.Mock
}

// BuildWidgetDocID provides a mock function with given fields: customerID, orgID, reportID
func (_m *WidgetService) BuildWidgetDocID(customerID string, orgID string, reportID string) string {
	ret := _m.Called(customerID, orgID, reportID)

	if len(ret) == 0 {
		panic("no return value specified for BuildWidgetDocID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(customerID, orgID, reportID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeleteReportWidget provides a mock function with given fields: ctx, customerID, reportID
func (_m *WidgetService) DeleteReportWidget(ctx context.Context, customerID string, reportID string) error {
	ret := _m.Called(ctx, customerID, reportID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReportWidget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, reportID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReportsWidgets provides a mock function with given fields: ctx, customerID, reportIDs
func (_m *WidgetService) DeleteReportsWidgets(ctx context.Context, customerID string, reportIDs []string) error {
	ret := _m.Called(ctx, customerID, reportIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReportsWidgets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, customerID, reportIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshReportWidget provides a mock function with given fields: ctx, requestParams
func (_m *WidgetService) RefreshReportWidget(ctx context.Context, requestParams *domain.ReportWidgetRequest) error {
	ret := _m.Called(ctx, requestParams)

	if len(ret) == 0 {
		panic("no return value specified for RefreshReportWidget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ReportWidgetRequest) error); ok {
		r0 = rf(ctx, requestParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, minUpdateDelayMinutes, request
func (_m *WidgetService) Save(ctx context.Context, minUpdateDelayMinutes int, request domain.ReportWidgetRequest) error {
	ret := _m.Called(ctx, minUpdateDelayMinutes, request)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.ReportWidgetRequest) error); ok {
		r0 = rf(ctx, minUpdateDelayMinutes, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReportWidget provides a mock function with given fields: ctx, requestParams
func (_m *WidgetService) UpdateReportWidget(ctx context.Context, requestParams *domain.ReportWidgetRequest) error {
	ret := _m.Called(ctx, requestParams)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportWidget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ReportWidgetRequest) error); ok {
		r0 = rf(ctx, requestParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWidgetService creates a new instance of WidgetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWidgetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WidgetService {
	mock := &WidgetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
