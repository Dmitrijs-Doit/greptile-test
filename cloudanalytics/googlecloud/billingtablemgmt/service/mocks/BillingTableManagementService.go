// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/googlecloud/billingtablemgmt/domain"

	mock "github.com/stretchr/testify/mock"
)

// BillingTableManagementService is an autogenerated mock type for the BillingTableManagementService type
type BillingTableManagementService struct {
	mock.Mock
}

// AppendToTempCSPBillingAccountTable provides a mock function with given fields: ctx, billingAccountID, updateAll, allPartitions, numPartitions, fromDate
func (_m *BillingTableManagementService) AppendToTempCSPBillingAccountTable(ctx context.Context, billingAccountID string, updateAll bool, allPartitions bool, numPartitions int, fromDate string) error {
	ret := _m.Called(ctx, billingAccountID, updateAll, allPartitions, numPartitions, fromDate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, bool, int, string) error); ok {
		r0 = rf(ctx, billingAccountID, updateAll, allPartitions, numPartitions, fromDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitRawResourceTable provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) InitRawResourceTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitRawTable provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) InitRawTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JoinCSPTempTable provides a mock function with given fields: ctx, billingAccountID, idx, allPartitions, fromDate, numPartitions
func (_m *BillingTableManagementService) JoinCSPTempTable(ctx context.Context, billingAccountID string, idx int, allPartitions bool, fromDate string, numPartitions int) error {
	ret := _m.Called(ctx, billingAccountID, idx, allPartitions, fromDate, numPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool, string, int) error); ok {
		r0 = rf(ctx, billingAccountID, idx, allPartitions, fromDate, numPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduledBillingAccountsTableUpdate provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) ScheduledBillingAccountsTableUpdate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StandaloneBillingUpdateEvents provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) StandaloneBillingUpdateEvents(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAggregatedTable provides a mock function with given fields: ctx, billingAccountID, interval, fromDate, numPartitions, allPartitions
func (_m *BillingTableManagementService) UpdateAggregatedTable(ctx context.Context, billingAccountID string, interval string, fromDate string, numPartitions int, allPartitions bool) error {
	ret := _m.Called(ctx, billingAccountID, interval, fromDate, numPartitions, allPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, bool) error); ok {
		r0 = rf(ctx, billingAccountID, interval, fromDate, numPartitions, allPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAllAggregatedTables provides a mock function with given fields: ctx, billingAccountID, fromDate, numPartitions, allPartitions
func (_m *BillingTableManagementService) UpdateAllAggregatedTables(ctx context.Context, billingAccountID string, fromDate string, numPartitions int, allPartitions bool) []error {
	ret := _m.Called(ctx, billingAccountID, fromDate, numPartitions, allPartitions)

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, bool) []error); ok {
		r0 = rf(ctx, billingAccountID, fromDate, numPartitions, allPartitions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// UpdateBillingAccountTable provides a mock function with given fields: ctx, uri, billingAccountID, allPartitions, refreshMetadata, assetType, fromDate, numPartitions
func (_m *BillingTableManagementService) UpdateBillingAccountTable(ctx context.Context, uri string, billingAccountID string, allPartitions bool, refreshMetadata bool, assetType string, fromDate string, numPartitions int) error {
	ret := _m.Called(ctx, uri, billingAccountID, allPartitions, refreshMetadata, assetType, fromDate, numPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, string, string, int) error); ok {
		r0 = rf(ctx, uri, billingAccountID, allPartitions, refreshMetadata, assetType, fromDate, numPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBillingAccountsTable provides a mock function with given fields: ctx, input
func (_m *BillingTableManagementService) UpdateBillingAccountsTable(ctx context.Context, input domain.UpdateBillingAccountsTableInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateBillingAccountsTableInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCSPAggregatedTable provides a mock function with given fields: ctx, billingAccountID, allPartitions
func (_m *BillingTableManagementService) UpdateCSPAggregatedTable(ctx context.Context, billingAccountID string, allPartitions bool) error {
	ret := _m.Called(ctx, billingAccountID, allPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, billingAccountID, allPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCSPBillingAccounts provides a mock function with given fields: ctx, params, numPartitions, allPartitions, fromDate
func (_m *BillingTableManagementService) UpdateCSPBillingAccounts(ctx context.Context, params domain.UpdateCspTaskParams, numPartitions int, allPartitions bool, fromDate string) error {
	ret := _m.Called(ctx, params, numPartitions, allPartitions, fromDate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateCspTaskParams, int, bool, string) error); ok {
		r0 = rf(ctx, params, numPartitions, allPartitions, fromDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCSPTableAndDeleteTemp provides a mock function with given fields: ctx, billingAccountID, allPartitions, fromDate, numPartitions
func (_m *BillingTableManagementService) UpdateCSPTableAndDeleteTemp(ctx context.Context, billingAccountID string, allPartitions bool, fromDate string, numPartitions int) error {
	ret := _m.Called(ctx, billingAccountID, allPartitions, fromDate, numPartitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, string, int) error); ok {
		r0 = rf(ctx, billingAccountID, allPartitions, fromDate, numPartitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDiscounts provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) UpdateDiscounts(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIAMResources provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) UpdateIAMResources(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRawResourceTableLastPartition provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) UpdateRawResourceTableLastPartition(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRawTableLastPartition provides a mock function with given fields: ctx
func (_m *BillingTableManagementService) UpdateRawTableLastPartition(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBillingTableManagementService creates a new instance of BillingTableManagementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBillingTableManagementService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BillingTableManagementService {
	mock := &BillingTableManagementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
