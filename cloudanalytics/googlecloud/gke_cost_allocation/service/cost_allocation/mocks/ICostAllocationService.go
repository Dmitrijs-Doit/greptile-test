// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ICostAllocationService is an autogenerated mock type for the ICostAllocationService type
type ICostAllocationService struct {
	mock.Mock
}

// InitStandaloneAccount provides a mock function with given fields: ctx, billingAccountID
func (_m *ICostAllocationService) InitStandaloneAccount(ctx context.Context, billingAccountID string) error {
	ret := _m.Called(ctx, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleInitStandaloneAccounts provides a mock function with given fields: ctx, billingAccountIDs
func (_m *ICostAllocationService) ScheduleInitStandaloneAccounts(ctx context.Context, billingAccountIDs []string) error {
	ret := _m.Called(ctx, billingAccountIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, billingAccountIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActiveCustomers provides a mock function with given fields: ctx
func (_m *ICostAllocationService) UpdateActiveCustomers(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMissingClusters provides a mock function with given fields: ctx
func (_m *ICostAllocationService) UpdateMissingClusters(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICostAllocationService creates a new instance of ICostAllocationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICostAllocationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICostAllocationService {
	mock := &ICostAllocationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
