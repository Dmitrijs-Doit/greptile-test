// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/azure/dal"
	mock "github.com/stretchr/testify/mock"
)

// FirestoreDAL is an autogenerated mock type for the FirestoreDAL type
type FirestoreDAL struct {
	mock.Mock
}

// CreateCustomerBillingDataConfig provides a mock function with given fields: ctx, config
func (_m *FirestoreDAL) CreateCustomerBillingDataConfig(ctx context.Context, config dal.BillingDataConfig) error {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomerBillingDataConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dal.BillingDataConfig) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerBillingDataConfigs provides a mock function with given fields: ctx, customerID
func (_m *FirestoreDAL) GetCustomerBillingDataConfigs(ctx context.Context, customerID string) ([]dal.BillingDataConfig, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerBillingDataConfigs")
	}

	var r0 []dal.BillingDataConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]dal.BillingDataConfig, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []dal.BillingDataConfig); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dal.BillingDataConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFirestoreDAL creates a new instance of FirestoreDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFirestoreDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *FirestoreDAL {
	mock := &FirestoreDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
