// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"
	common "github.com/doitintl/hello/scheduled-tasks/common"

	mock "github.com/stretchr/testify/mock"

	segments "github.com/doitintl/hello/scheduled-tasks/rowsvalidator/segments"
)

// RowsCounter is an autogenerated mock type for the RowsCounter type
type RowsCounter struct {
	mock.Mock
}

// GetRowsCount provides a mock function with given fields: ctx, bq, table, billingAccountID, segment
func (_m *RowsCounter) GetRowsCount(ctx context.Context, bq *bigquery.Client, table *common.TableInfo, billingAccountID string, segment *segments.Segment) (map[segments.HashableSegment]int, error) {
	ret := _m.Called(ctx, bq, table, billingAccountID, segment)

	var r0 map[segments.HashableSegment]int
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, *common.TableInfo, string, *segments.Segment) map[segments.HashableSegment]int); ok {
		r0 = rf(ctx, bq, table, billingAccountID, segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[segments.HashableSegment]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, *common.TableInfo, string, *segments.Segment) error); ok {
		r1 = rf(ctx, bq, table, billingAccountID, segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRowsCounter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRowsCounter creates a new instance of RowsCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRowsCounter(t mockConstructorTestingTNewRowsCounter) *RowsCounter {
	mock := &RowsCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
