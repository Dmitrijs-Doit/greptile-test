// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/billing-explainer/domain"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/assets/pkg"
)

// BillingExplainerService is an autogenerated mock type for the BillingExplainerService type
type BillingExplainerService struct {
	mock.Mock
}

// GetBillingExplainerSummaryAndStoreInFS provides a mock function with given fields: ctx, customerID, billingMonth, entityID, isBackfill
func (_m *BillingExplainerService) GetBillingExplainerSummaryAndStoreInFS(ctx context.Context, customerID string, billingMonth string, entityID string, isBackfill bool) error {
	ret := _m.Called(ctx, customerID, billingMonth, entityID, isBackfill)

	if len(ret) == 0 {
		panic("no return value specified for GetBillingExplainerSummaryAndStoreInFS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool) error); ok {
		r0 = rf(ctx, customerID, billingMonth, entityID, isBackfill)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPayerInfoFromCustID provides a mock function with given fields: ctx, customerID, startOfMonth
func (_m *BillingExplainerService) GetPayerInfoFromCustID(ctx context.Context, customerID string, startOfMonth string) ([]domain.PayerAccountInfoStruct, error) {
	ret := _m.Called(ctx, customerID, startOfMonth)

	if len(ret) == 0 {
		panic("no return value specified for GetPayerInfoFromCustID")
	}

	var r0 []domain.PayerAccountInfoStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.PayerAccountInfoStruct, error)); ok {
		return rf(ctx, customerID, startOfMonth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.PayerAccountInfoStruct); ok {
		r0 = rf(ctx, customerID, startOfMonth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PayerAccountInfoStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, startOfMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSummaryPageData provides a mock function with given fields: ctx, explainerParams, accountIDString, string3, PayerID, isDefaultBucket
func (_m *BillingExplainerService) GetSummaryPageData(ctx context.Context, explainerParams domain.BillingExplainerParams, accountIDString string, string3 string, PayerID string, isDefaultBucket bool) ([]domain.SummaryBQ, error) {
	ret := _m.Called(ctx, explainerParams, accountIDString, string3, PayerID, isDefaultBucket)

	if len(ret) == 0 {
		panic("no return value specified for GetSummaryPageData")
	}

	var r0 []domain.SummaryBQ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, bool) ([]domain.SummaryBQ, error)); ok {
		return rf(ctx, explainerParams, accountIDString, string3, PayerID, isDefaultBucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, bool) []domain.SummaryBQ); ok {
		r0 = rf(ctx, explainerParams, accountIDString, string3, PayerID, isDefaultBucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SummaryBQ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BillingExplainerParams, string, string, string, bool) error); ok {
		r1 = rf(ctx, explainerParams, accountIDString, string3, PayerID, isDefaultBucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessAssets provides a mock function with given fields: ctx, explainerParams, bucketAssetsMap, payerTable, bucketMap, serviceBucketMap, accountBucketMap, PayerID
func (_m *BillingExplainerService) ProcessAssets(ctx context.Context, explainerParams domain.BillingExplainerParams, bucketAssetsMap map[string][]*pkg.BaseAsset, payerTable string, bucketMap map[string][]domain.SummaryBQ, serviceBucketMap map[string][]domain.ServiceRecord, accountBucketMap map[string][]domain.AccountRecord, PayerID string) error {
	ret := _m.Called(ctx, explainerParams, bucketAssetsMap, payerTable, bucketMap, serviceBucketMap, accountBucketMap, PayerID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAssets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, map[string][]*pkg.BaseAsset, string, map[string][]domain.SummaryBQ, map[string][]domain.ServiceRecord, map[string][]domain.AccountRecord, string) error); ok {
		r0 = rf(ctx, explainerParams, bucketAssetsMap, payerTable, bucketMap, serviceBucketMap, accountBucketMap, PayerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessAssetsForEntity provides a mock function with given fields: ctx, explainerParams, entityID, payerTable, PayerID
func (_m *BillingExplainerService) ProcessAssetsForEntity(ctx context.Context, explainerParams domain.BillingExplainerParams, entityID string, payerTable string, PayerID string) ([]domain.SummaryBQ, []domain.ServiceRecord, []domain.AccountRecord, string, error) {
	ret := _m.Called(ctx, explainerParams, entityID, payerTable, PayerID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAssetsForEntity")
	}

	var r0 []domain.SummaryBQ
	var r1 []domain.ServiceRecord
	var r2 []domain.AccountRecord
	var r3 string
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string) ([]domain.SummaryBQ, []domain.ServiceRecord, []domain.AccountRecord, string, error)); ok {
		return rf(ctx, explainerParams, entityID, payerTable, PayerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string) []domain.SummaryBQ); ok {
		r0 = rf(ctx, explainerParams, entityID, payerTable, PayerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SummaryBQ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BillingExplainerParams, string, string, string) []domain.ServiceRecord); ok {
		r1 = rf(ctx, explainerParams, entityID, payerTable, PayerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ServiceRecord)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.BillingExplainerParams, string, string, string) []domain.AccountRecord); ok {
		r2 = rf(ctx, explainerParams, entityID, payerTable, PayerID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]domain.AccountRecord)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, domain.BillingExplainerParams, string, string, string) string); ok {
		r3 = rf(ctx, explainerParams, entityID, payerTable, PayerID)
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func(context.Context, domain.BillingExplainerParams, string, string, string) error); ok {
		r4 = rf(ctx, explainerParams, entityID, payerTable, PayerID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// ProcessAssetsInBucket provides a mock function with given fields: ctx, explainerParams, assets, payerTable, bucketName, PayerID
func (_m *BillingExplainerService) ProcessAssetsInBucket(ctx context.Context, explainerParams domain.BillingExplainerParams, assets []*pkg.BaseAsset, payerTable string, bucketName string, PayerID string) ([]domain.SummaryBQ, []domain.ServiceRecord, []domain.AccountRecord, string, error) {
	ret := _m.Called(ctx, explainerParams, assets, payerTable, bucketName, PayerID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAssetsInBucket")
	}

	var r0 []domain.SummaryBQ
	var r1 []domain.ServiceRecord
	var r2 []domain.AccountRecord
	var r3 string
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, []*pkg.BaseAsset, string, string, string) ([]domain.SummaryBQ, []domain.ServiceRecord, []domain.AccountRecord, string, error)); ok {
		return rf(ctx, explainerParams, assets, payerTable, bucketName, PayerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, []*pkg.BaseAsset, string, string, string) []domain.SummaryBQ); ok {
		r0 = rf(ctx, explainerParams, assets, payerTable, bucketName, PayerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SummaryBQ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BillingExplainerParams, []*pkg.BaseAsset, string, string, string) []domain.ServiceRecord); ok {
		r1 = rf(ctx, explainerParams, assets, payerTable, bucketName, PayerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ServiceRecord)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.BillingExplainerParams, []*pkg.BaseAsset, string, string, string) []domain.AccountRecord); ok {
		r2 = rf(ctx, explainerParams, assets, payerTable, bucketName, PayerID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]domain.AccountRecord)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, domain.BillingExplainerParams, []*pkg.BaseAsset, string, string, string) string); ok {
		r3 = rf(ctx, explainerParams, assets, payerTable, bucketName, PayerID)
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func(context.Context, domain.BillingExplainerParams, []*pkg.BaseAsset, string, string, string) error); ok {
		r4 = rf(ctx, explainerParams, assets, payerTable, bucketName, PayerID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// NewBillingExplainerService creates a new instance of BillingExplainerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBillingExplainerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BillingExplainerService {
	mock := &BillingExplainerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
