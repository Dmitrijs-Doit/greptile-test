// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/billing-explainer/domain"

	mock "github.com/stretchr/testify/mock"
)

// BigQueryDAL is an autogenerated mock type for the BigQueryDAL type
type BigQueryDAL struct {
	mock.Mock
}

// GetAccountBreakdownData provides a mock function with given fields: ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition
func (_m *BigQueryDAL) GetAccountBreakdownData(ctx context.Context, explainerParams domain.BillingExplainerParams, payerTable string, accountIDString string, PayerID string, flexsaveCondition string) ([]domain.AccountRecord, error) {
	ret := _m.Called(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBreakdownData")
	}

	var r0 []domain.AccountRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) ([]domain.AccountRecord, error)); ok {
		return rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) []domain.AccountRecord); ok {
		r0 = rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AccountRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) error); ok {
		r1 = rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceSummary provides a mock function with given fields: ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition
func (_m *BigQueryDAL) GetInvoiceSummary(ctx context.Context, explainerParams domain.BillingExplainerParams, payerTable string, accountIDString string, PayerID string, flexsaveCondition string) ([]domain.SummaryBQ, error) {
	ret := _m.Called(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceSummary")
	}

	var r0 []domain.SummaryBQ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) ([]domain.SummaryBQ, error)); ok {
		return rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) []domain.SummaryBQ); ok {
		r0 = rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SummaryBQ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) error); ok {
		r1 = rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayerIDFromAccountsHistory provides a mock function with given fields: ctx, startOfMonth, customerID
func (_m *BigQueryDAL) GetPayerIDFromAccountsHistory(ctx context.Context, startOfMonth string, customerID string) ([]domain.PayerAccountHistoryResult, error) {
	ret := _m.Called(ctx, startOfMonth, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayerIDFromAccountsHistory")
	}

	var r0 []domain.PayerAccountHistoryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.PayerAccountHistoryResult, error)); ok {
		return rf(ctx, startOfMonth, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []domain.PayerAccountHistoryResult); ok {
		r0 = rf(ctx, startOfMonth, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PayerAccountHistoryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, startOfMonth, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceBreakdownData provides a mock function with given fields: ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition
func (_m *BigQueryDAL) GetServiceBreakdownData(ctx context.Context, explainerParams domain.BillingExplainerParams, payerTable string, accountIDString string, PayerID string, flexsaveCondition string) ([]domain.ServiceRecord, error) {
	ret := _m.Called(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceBreakdownData")
	}

	var r0 []domain.ServiceRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) ([]domain.ServiceRecord, error)); ok {
		return rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) []domain.ServiceRecord); ok {
		r0 = rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ServiceRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BillingExplainerParams, string, string, string, string) error); ok {
		r1 = rf(ctx, explainerParams, payerTable, accountIDString, PayerID, flexsaveCondition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBigQueryDAL creates a new instance of BigQueryDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigQueryDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *BigQueryDAL {
	mock := &BigQueryDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
