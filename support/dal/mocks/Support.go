// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/support/domain"

	mock "github.com/stretchr/testify/mock"
)

// Support is an autogenerated mock type for the Support type
type Support struct {
	mock.Mock
}

// ListPlatforms provides a mock function with given fields: ctx, isOnlySaasSupported
func (_m *Support) ListPlatforms(ctx context.Context, isOnlySaasSupported bool) ([]domain.Platform, error) {
	ret := _m.Called(ctx, isOnlySaasSupported)

	var r0 []domain.Platform
	if rf, ok := ret.Get(0).(func(context.Context, bool) []domain.Platform); ok {
		r0 = rf(ctx, isOnlySaasSupported)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Platform)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, isOnlySaasSupported)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, platforms
func (_m *Support) ListProducts(ctx context.Context, platforms []string) ([]domain.Product, error) {
	ret := _m.Called(ctx, platforms)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, []string) []domain.Product); ok {
		r0 = rf(ctx, platforms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, platforms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSupport interface {
	mock.TestingT
	Cleanup(func())
}

// NewSupport creates a new instance of Support. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSupport(t mockConstructorTestingTNewSupport) *Support {
	mock := &Support{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
