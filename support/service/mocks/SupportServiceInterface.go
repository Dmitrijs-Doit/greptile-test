// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"

	service "github.com/doitintl/hello/scheduled-tasks/support/service"
)

// SupportServiceInterface is an autogenerated mock type for the SupportServiceInterface type
type SupportServiceInterface struct {
	mock.Mock
}

// ApplyNewSupportTier provides a mock function with given fields: ctx, customerID, newTier
func (_m *SupportServiceInterface) ApplyNewSupportTier(ctx context.Context, customerID string, newTier pkg.TierNameType) error {
	ret := _m.Called(ctx, customerID, newTier)

	if len(ret) == 0 {
		panic("no return value specified for ApplyNewSupportTier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.TierNameType) error); ok {
		r0 = rf(ctx, customerID, newTier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyOneTimeSupport provides a mock function with given fields: ctx, customerID, oneTime, email
func (_m *SupportServiceInterface) ApplyOneTimeSupport(ctx context.Context, customerID string, oneTime pkg.OneTimeProductType, email string) error {
	ret := _m.Called(ctx, customerID, oneTime, email)

	if len(ret) == 0 {
		panic("no return value specified for ApplyOneTimeSupport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.OneTimeProductType, string) error); ok {
		r0 = rf(ctx, customerID, oneTime, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPlatforms provides a mock function with given fields: ctx
func (_m *SupportServiceInterface) ListPlatforms(ctx context.Context) (*service.PlatformsAPI, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPlatforms")
	}

	var r0 *service.PlatformsAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*service.PlatformsAPI, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *service.PlatformsAPI); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.PlatformsAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, incomingPlatform
func (_m *SupportServiceInterface) ListProducts(ctx context.Context, incomingPlatform string) (*service.ProductsAPI, error) {
	ret := _m.Called(ctx, incomingPlatform)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 *service.ProductsAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.ProductsAPI, error)); ok {
		return rf(ctx, incomingPlatform)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.ProductsAPI); ok {
		r0 = rf(ctx, incomingPlatform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ProductsAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, incomingPlatform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSupportServiceInterface creates a new instance of SupportServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupportServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SupportServiceInterface {
	mock := &SupportServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
