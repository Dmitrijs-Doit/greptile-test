// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	mock "github.com/stretchr/testify/mock"
)

// IUserPermissionsChecker is an autogenerated mock type for the IUserPermissionsChecker type
type IUserPermissionsChecker struct {
	mock.Mock
}

// HasAnomaliesViewerPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasAnomaliesViewerPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasAttributionsPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasAttributionsPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasBudgetsPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasBudgetsPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasCAOwnerRoleAssignerPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasCAOwnerRoleAssignerPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasCloudAnalyticsPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasCloudAnalyticsPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasContractsViewerPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasContractsViewerPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasEntitiesPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasEntitiesPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasFlexSaveAdminPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasFlexSaveAdminPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasInvoicesPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasInvoicesPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasIssuesPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasIssuesPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasLabelsManagerPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasLabelsManagerPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasLicenseManagePermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasLicenseManagePermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasManageSettingsPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasManageSettingsPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasMetricsPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasMetricsPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasPerksViewerPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasPerksViewerPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasRequiredPermissions provides a mock function with given fields: ctx, user, requiredPermissions
func (_m *IUserPermissionsChecker) HasRequiredPermissions(ctx context.Context, user *common.User, requiredPermissions []common.Permission) error {
	ret := _m.Called(ctx, user, requiredPermissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.User, []common.Permission) error); ok {
		r0 = rf(ctx, user, requiredPermissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasSandboxAdminPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasSandboxAdminPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasSandboxUserPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasSandboxUserPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasSupportPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasSupportPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasUsersPermission provides a mock function with given fields: ctx, user
func (_m *IUserPermissionsChecker) HasUsersPermission(ctx context.Context, user *common.User) bool {
	ret := _m.Called(ctx, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *common.User) bool); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewIUserPermissionsChecker interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserPermissionsChecker creates a new instance of IUserPermissionsChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserPermissionsChecker(t mockConstructorTestingTNewIUserPermissionsChecker) *IUserPermissionsChecker {
	mock := &IUserPermissionsChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
