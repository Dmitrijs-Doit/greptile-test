// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	domain "github.com/doitintl/hello/scheduled-tasks/user/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// ClearUserNotifications provides a mock function with given fields: ctx, user
func (_m *IUserService) ClearUserNotifications(ctx context.Context, user *pkg.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *IUserService) Get(ctx context.Context, id string) (*common.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *common.User

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.User, error)); ok {
		return rf(ctx, id)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *common.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerUsersWithNotifications provides a mock function with given fields: ctx, customerID, isRestore
func (_m *IUserService) GetCustomerUsersWithNotifications(ctx context.Context, customerID string, isRestore bool) ([]*pkg.User, error) {
	ret := _m.Called(ctx, customerID, isRestore)

	var r0 []*pkg.User

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]*pkg.User, error)); ok {
		return rf(ctx, customerID, isRestore)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []*pkg.User); ok {
		r0 = rf(ctx, customerID, isRestore)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, customerID, isRestore)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, ID
func (_m *IUserService) GetRef(ctx context.Context, ID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, ID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email, customerID
func (_m *IUserService) GetUserByEmail(ctx context.Context, email string, customerID string) (*domain.User, error) {
	ret := _m.Called(ctx, email, customerID)

	var r0 *domain.User

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, error)); ok {
		return rf(ctx, email, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(ctx, email, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreUserNotifications provides a mock function with given fields: ctx, user
func (_m *IUserService) RestoreUserNotifications(ctx context.Context, user *pkg.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserService(t mockConstructorTestingTNewIUserService) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
