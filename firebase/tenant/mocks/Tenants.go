// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Tenants is an autogenerated mock type for the Tenants type
type Tenants struct {
	mock.Mock
}

// GetCustomerIDByTenant provides a mock function with given fields: ctx, tenantID
func (_m *Tenants) GetCustomerIDByTenant(ctx context.Context, tenantID string) (*string, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantIDByCustomer provides a mock function with given fields: ctx, customerID
func (_m *Tenants) GetTenantIDByCustomer(ctx context.Context, customerID string) (*string, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantIDByEmail provides a mock function with given fields: ctx, email
func (_m *Tenants) GetTenantIDByEmail(ctx context.Context, email string) (*string, error) {
	ret := _m.Called(ctx, email)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantsDocRef provides a mock function with given fields: ctx
func (_m *Tenants) GetTenantsDocRef(ctx context.Context) *firestore.DocumentRef {
	ret := _m.Called(ctx)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context) *firestore.DocumentRef); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// NewTenants creates a new instance of Tenants. It also registers a cleanup function to assert the mocks expectations.
func NewTenants(t testing.TB) *Tenants {
	mock := &Tenants{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
