// Code generated by mockery v2.35.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	domain "github.com/doitintl/notificationcenter/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"
)

// IFirestoreDAL is an autogenerated mock type for the IFirestoreDAL type
type IFirestoreDAL struct {
	mock.Mock
}

// CreateNotificationConfig provides a mock function with given fields: ctx, config
func (_m *IFirestoreDAL) CreateNotificationConfig(ctx context.Context, config domain.NotificationConfig) error {
	ret := _m.Called(ctx, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.NotificationConfig) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCustomerSharedChannel provides a mock function with given fields: ctx, customerID, channelID
func (_m *IFirestoreDAL) DeleteCustomerSharedChannel(ctx context.Context, customerID string, channelID string) error {
	ret := _m.Called(ctx, customerID, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomer provides a mock function with given fields: ctx, customerID
func (_m *IFirestoreDAL) GetCustomer(ctx context.Context, customerID string) (*firestore.DocumentRef, *common.Customer, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *firestore.DocumentRef
	var r1 *common.Customer
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*firestore.DocumentRef, *common.Customer, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *common.Customer); ok {
		r1 = rf(ctx, customerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*common.Customer)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, customerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCustomerSharedChannel provides a mock function with given fields: ctx, customerID
func (_m *IFirestoreDAL) GetCustomerSharedChannel(ctx context.Context, customerID string) (*pkg.SharedChannel, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *pkg.SharedChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.SharedChannel, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.SharedChannel); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.SharedChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerWorkspace provides a mock function with given fields: ctx, customerID
func (_m *IFirestoreDAL) GetCustomerWorkspace(ctx context.Context, customerID string) (*pkg.SlackWorkspace, string, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *pkg.SlackWorkspace
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.SlackWorkspace, string, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.SlackWorkspace); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.SlackWorkspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, customerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCustomerWorkspaceDecrypted provides a mock function with given fields: ctx, customerID
func (_m *IFirestoreDAL) GetCustomerWorkspaceDecrypted(ctx context.Context, customerID string) (*pkg.SlackWorkspace, string, string, string, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *pkg.SlackWorkspace
	var r1 string
	var r2 string
	var r3 string
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.SlackWorkspace, string, string, string, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.SlackWorkspace); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.SlackWorkspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) string); ok {
		r2 = rf(ctx, customerID)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) string); ok {
		r3 = rf(ctx, customerID)
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func(context.Context, string) error); ok {
		r4 = rf(ctx, customerID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetDoitEmployee provides a mock function with given fields: ctx, email
func (_m *IFirestoreDAL) GetDoitEmployee(ctx context.Context, email string) (*pkg.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *pkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSharedChannel provides a mock function with given fields: ctx, channelID
func (_m *IFirestoreDAL) GetSharedChannel(ctx context.Context, channelID string) (*pkg.SharedChannel, error) {
	ret := _m.Called(ctx, channelID)

	var r0 *pkg.SharedChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.SharedChannel, error)); ok {
		return rf(ctx, channelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.SharedChannel); ok {
		r0 = rf(ctx, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.SharedChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, email
func (_m *IFirestoreDAL) GetUser(ctx context.Context, email string) (*pkg.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *pkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceDecrypted provides a mock function with given fields: ctx, workspaceID
func (_m *IFirestoreDAL) GetWorkspaceDecrypted(ctx context.Context, workspaceID string) (*pkg.SlackWorkspace, string, string, string, error) {
	ret := _m.Called(ctx, workspaceID)

	var r0 *pkg.SlackWorkspace
	var r1 string
	var r2 string
	var r3 string
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.SlackWorkspace, string, string, string, error)); ok {
		return rf(ctx, workspaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.SlackWorkspace); ok {
		r0 = rf(ctx, workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.SlackWorkspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, workspaceID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) string); ok {
		r2 = rf(ctx, workspaceID)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) string); ok {
		r3 = rf(ctx, workspaceID)
	} else {
		r3 = ret.Get(3).(string)
	}

	if rf, ok := ret.Get(4).(func(context.Context, string) error); ok {
		r4 = rf(ctx, workspaceID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// SetCustomerSharedChannel provides a mock function with given fields: ctx, customerID, channel
func (_m *IFirestoreDAL) SetCustomerSharedChannel(ctx context.Context, customerID string, channel *pkg.SharedChannel) error {
	ret := _m.Called(ctx, customerID, channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *pkg.SharedChannel) error); ok {
		r0 = rf(ctx, customerID, channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomerWorkspace provides a mock function with given fields: ctx, workspaceID, workspace
func (_m *IFirestoreDAL) SetCustomerWorkspace(ctx context.Context, workspaceID string, workspace *pkg.SlackWorkspace) error {
	ret := _m.Called(ctx, workspaceID, workspace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *pkg.SlackWorkspace) error); ok {
		r0 = rf(ctx, workspaceID, workspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserHasCloudAnalyticsPermission provides a mock function with given fields: ctx, email
func (_m *IFirestoreDAL) UserHasCloudAnalyticsPermission(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFirestoreDAL creates a new instance of IFirestoreDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFirestoreDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFirestoreDAL {
	mock := &IFirestoreDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
