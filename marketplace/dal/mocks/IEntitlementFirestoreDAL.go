// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/marketplace/domain"

	mock "github.com/stretchr/testify/mock"
)

// IEntitlementFirestoreDAL is an autogenerated mock type for the IEntitlementFirestoreDAL type
type IEntitlementFirestoreDAL struct {
	mock.Mock
}

// GetEntitlement provides a mock function with given fields: ctx, entitlementID
func (_m *IEntitlementFirestoreDAL) GetEntitlement(ctx context.Context, entitlementID string) (*domain.EntitlementFirestore, error) {
	ret := _m.Called(ctx, entitlementID)

	var r0 *domain.EntitlementFirestore

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.EntitlementFirestore, error)); ok {
		return rf(ctx, entitlementID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.EntitlementFirestore); ok {
		r0 = rf(ctx, entitlementID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EntitlementFirestore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entitlementID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIEntitlementFirestoreDAL creates a new instance of IEntitlementFirestoreDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEntitlementFirestoreDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEntitlementFirestoreDAL {
	mock := &IEntitlementFirestoreDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
