// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/marketplace/dal"
	domain "github.com/doitintl/hello/scheduled-tasks/marketplace/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// IAccountFirestoreDAL is an autogenerated mock type for the IAccountFirestoreDAL type
type IAccountFirestoreDAL struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: ctx, accountID
func (_m *IAccountFirestoreDAL) GetAccount(ctx context.Context, accountID string) (*domain.AccountFirestore, error) {
	ret := _m.Called(ctx, accountID)

	var r0 *domain.AccountFirestore

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.AccountFirestore, error)); ok {
		return rf(ctx, accountID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AccountFirestore); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccountFirestore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByCustomer provides a mock function with given fields: ctx, customerID
func (_m *IAccountFirestoreDAL) GetAccountByCustomer(ctx context.Context, customerID string) (*domain.AccountFirestore, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *domain.AccountFirestore

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.AccountFirestore, error)); ok {
		return rf(ctx, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AccountFirestore); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccountFirestore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsIDs provides a mock function with given fields: ctx
func (_m *IAccountFirestoreDAL) GetAccountsIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountWithCustomerDetails provides a mock function with given fields: ctx, customerRef, subscribePayload
func (_m *IAccountFirestoreDAL) UpdateAccountWithCustomerDetails(ctx context.Context, customerRef *firestore.DocumentRef, subscribePayload domain.SubscribePayload) (bool, error) {
	ret := _m.Called(ctx, customerRef, subscribePayload)

	var r0 bool

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, domain.SubscribePayload) (bool, error)); ok {
		return rf(ctx, customerRef, subscribePayload)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, domain.SubscribePayload) bool); ok {
		r0 = rf(ctx, customerRef, subscribePayload)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, domain.SubscribePayload) error); ok {
		r1 = rf(ctx, customerRef, subscribePayload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomerWithDoitConsoleStatus provides a mock function with given fields: ctx, customerRef, status
func (_m *IAccountFirestoreDAL) UpdateCustomerWithDoitConsoleStatus(ctx context.Context, customerRef *firestore.DocumentRef, status bool) error {
	ret := _m.Called(ctx, customerRef, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, bool) error); ok {
		r0 = rf(ctx, customerRef, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGcpBillingAccountDetails provides a mock function with given fields: ctx, procurementAccountID, details
func (_m *IAccountFirestoreDAL) UpdateGcpBillingAccountDetails(ctx context.Context, procurementAccountID string, details dal.BillingAccountDetails) error {
	ret := _m.Called(ctx, procurementAccountID, details)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dal.BillingAccountDetails) error); ok {
		r0 = rf(ctx, procurementAccountID, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAccountFirestoreDAL creates a new instance of IAccountFirestoreDAL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAccountFirestoreDAL(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAccountFirestoreDAL {
	mock := &IAccountFirestoreDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
