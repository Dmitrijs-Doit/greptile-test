// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/assets/pkg"
)

// Assets is an autogenerated mock type for the Assets type
type Assets struct {
	mock.Mock
}

// DeleteAssets provides a mock function with given fields: ctx, accountIDList
func (_m *Assets) DeleteAssets(ctx context.Context, accountIDList []string) error {
	ret := _m.Called(ctx, accountIDList)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, accountIDList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, ID
func (_m *Assets) Get(ctx context.Context, ID string) (*common.BaseAsset, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *common.BaseAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.BaseAsset, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *common.BaseAsset); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.BaseAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSAsset provides a mock function with given fields: ctx, ID
func (_m *Assets) GetAWSAsset(ctx context.Context, ID string) (*pkg.AWSAsset, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSAsset")
	}

	var r0 *pkg.AWSAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.AWSAsset, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.AWSAsset); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.AWSAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSAssetFromAccountNumber provides a mock function with given fields: ctx, accountNumber, opts
func (_m *Assets) GetAWSAssetFromAccountNumber(ctx context.Context, accountNumber string, opts ...func(firestore.Query) firestore.Query) (*pkg.AWSAsset, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountNumber)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSAssetFromAccountNumber")
	}

	var r0 *pkg.AWSAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...func(firestore.Query) firestore.Query) (*pkg.AWSAsset, error)); ok {
		return rf(ctx, accountNumber, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...func(firestore.Query) firestore.Query) *pkg.AWSAsset); ok {
		r0 = rf(ctx, accountNumber, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.AWSAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...func(firestore.Query) firestore.Query) error); ok {
		r1 = rf(ctx, accountNumber, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSStandaloneAssets provides a mock function with given fields: ctx, customerRef
func (_m *Assets) GetAWSStandaloneAssets(ctx context.Context, customerRef *firestore.DocumentRef) ([]*pkg.AWSAsset, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSStandaloneAssets")
	}

	var r0 []*pkg.AWSAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*pkg.AWSAsset, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*pkg.AWSAsset); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.AWSAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsInBucket provides a mock function with given fields: ctx, bucketRef
func (_m *Assets) GetAssetsInBucket(ctx context.Context, bucketRef *firestore.DocumentRef) ([]*pkg.BaseAsset, error) {
	ret := _m.Called(ctx, bucketRef)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetsInBucket")
	}

	var r0 []*pkg.BaseAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*pkg.BaseAsset, error)); ok {
		return rf(ctx, bucketRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*pkg.BaseAsset); ok {
		r0 = rf(ctx, bucketRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.BaseAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, bucketRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetsInEntity provides a mock function with given fields: ctx, entityRef
func (_m *Assets) GetAssetsInEntity(ctx context.Context, entityRef *firestore.DocumentRef) ([]*pkg.BaseAsset, error) {
	ret := _m.Called(ctx, entityRef)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetsInEntity")
	}

	var r0 []*pkg.BaseAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*pkg.BaseAsset, error)); ok {
		return rf(ctx, entityRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*pkg.BaseAsset); ok {
		r0 = rf(ctx, entityRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.BaseAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, entityRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerAWSAssets provides a mock function with given fields: ctx, customerID
func (_m *Assets) GetCustomerAWSAssets(ctx context.Context, customerID string) ([]*pkg.AWSAsset, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerAWSAssets")
	}

	var r0 []*pkg.AWSAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*pkg.AWSAsset, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*pkg.AWSAsset); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.AWSAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerGCPAssets provides a mock function with given fields: ctx, customerID
func (_m *Assets) GetCustomerGCPAssets(ctx context.Context, customerID string) ([]*pkg.GCPAsset, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerGCPAssets")
	}

	var r0 []*pkg.GCPAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*pkg.GCPAsset, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*pkg.GCPAsset); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.GCPAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerGCPAssetsWithTypes provides a mock function with given fields: ctx, customerRef, gcpAssetTypes
func (_m *Assets) GetCustomerGCPAssetsWithTypes(ctx context.Context, customerRef *firestore.DocumentRef, gcpAssetTypes []string) ([]*pkg.GCPAsset, error) {
	ret := _m.Called(ctx, customerRef, gcpAssetTypes)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerGCPAssetsWithTypes")
	}

	var r0 []*pkg.GCPAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, []string) ([]*pkg.GCPAsset, error)); ok {
		return rf(ctx, customerRef, gcpAssetTypes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, []string) []*pkg.GCPAsset); ok {
		r0 = rf(ctx, customerRef, gcpAssetTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.GCPAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, []string) error); ok {
		r1 = rf(ctx, customerRef, gcpAssetTypes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, ID
func (_m *Assets) GetRef(ctx context.Context, ID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// HasSharedPayerAWSAssets provides a mock function with given fields: ctx, customerRef
func (_m *Assets) HasSharedPayerAWSAssets(ctx context.Context, customerRef *firestore.DocumentRef) (bool, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for HasSharedPayerAWSAssets")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (bool, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) bool); ok {
		r0 = rf(ctx, customerRef)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAWSAssets provides a mock function with given fields: ctx, assetType
func (_m *Assets) ListAWSAssets(ctx context.Context, assetType string) ([]*pkg.AWSAsset, error) {
	ret := _m.Called(ctx, assetType)

	if len(ret) == 0 {
		panic("no return value specified for ListAWSAssets")
	}

	var r0 []*pkg.AWSAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*pkg.AWSAsset, error)); ok {
		return rf(ctx, assetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*pkg.AWSAsset); ok {
		r0 = rf(ctx, assetType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.AWSAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBaseAssets provides a mock function with given fields: ctx, assetType
func (_m *Assets) ListBaseAssets(ctx context.Context, assetType string) ([]*pkg.BaseAsset, error) {
	ret := _m.Called(ctx, assetType)

	if len(ret) == 0 {
		panic("no return value specified for ListBaseAssets")
	}

	var r0 []*pkg.BaseAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*pkg.BaseAsset, error)); ok {
		return rf(ctx, assetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*pkg.BaseAsset); ok {
		r0 = rf(ctx, assetType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.BaseAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBaseAssetsForCustomer provides a mock function with given fields: ctx, customerRef, limit
func (_m *Assets) ListBaseAssetsForCustomer(ctx context.Context, customerRef *firestore.DocumentRef, limit int) ([]*pkg.BaseAsset, error) {
	ret := _m.Called(ctx, customerRef, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListBaseAssetsForCustomer")
	}

	var r0 []*pkg.BaseAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, int) ([]*pkg.BaseAsset, error)); ok {
		return rf(ctx, customerRef, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, int) []*pkg.BaseAsset); ok {
		r0 = rf(ctx, customerRef, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.BaseAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, int) error); ok {
		r1 = rf(ctx, customerRef, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGCPAssets provides a mock function with given fields: ctx
func (_m *Assets) ListGCPAssets(ctx context.Context) ([]*pkg.GCPAsset, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListGCPAssets")
	}

	var r0 []*pkg.GCPAsset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*pkg.GCPAsset, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*pkg.GCPAsset); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.GCPAsset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAssetMetadata provides a mock function with given fields: ctx, assetID, assetType
func (_m *Assets) SetAssetMetadata(ctx context.Context, assetID string, assetType string) error {
	ret := _m.Called(ctx, assetID, assetType)

	if len(ret) == 0 {
		panic("no return value specified for SetAssetMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, assetID, assetType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAsset provides a mock function with given fields: ctx, assetID, updates
func (_m *Assets) UpdateAsset(ctx context.Context, assetID string, updates []firestore.Update) error {
	ret := _m.Called(ctx, assetID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []firestore.Update) error); ok {
		r0 = rf(ctx, assetID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAssets creates a new instance of Assets. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssets(t interface {
	mock.TestingT
	Cleanup(func())
}) *Assets {
	mock := &Assets{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
