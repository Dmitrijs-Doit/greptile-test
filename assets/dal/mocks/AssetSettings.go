// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/assets/pkg"
)

// AssetSettings is an autogenerated mock type for the AssetSettings type
type AssetSettings struct {
	mock.Mock
}

// GetAWSAssetSettings provides a mock function with given fields: ctx, ID
func (_m *AssetSettings) GetAWSAssetSettings(ctx context.Context, ID string) (*pkg.AWSAssetSettings, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSAssetSettings")
	}

	var r0 *pkg.AWSAssetSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.AWSAssetSettings, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.AWSAssetSettings); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.AWSAssetSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAWSAssetSettings provides a mock function with given fields: ctx
func (_m *AssetSettings) GetAllAWSAssetSettings(ctx context.Context) ([]*pkg.AWSAssetSettings, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAWSAssetSettings")
	}

	var r0 []*pkg.AWSAssetSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*pkg.AWSAssetSettings, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*pkg.AWSAssetSettings); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.AWSAssetSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersForAssets provides a mock function with given fields: ctx, IDs
func (_m *AssetSettings) GetCustomersForAssets(ctx context.Context, IDs []string) ([]string, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomersForAssets")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]string, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []string); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, ID
func (_m *AssetSettings) GetRef(ctx context.Context, ID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// NewAssetSettings creates a new instance of AssetSettings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetSettings(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetSettings {
	mock := &AssetSettings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
