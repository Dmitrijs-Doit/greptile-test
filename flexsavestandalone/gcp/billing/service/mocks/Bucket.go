// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Bucket is an autogenerated mock type for the Bucket type
type Bucket struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, location, test
func (_m *Bucket) Create(ctx context.Context, location string, test bool) (string, error) {
	ret := _m.Called(ctx, location, test)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) string); ok {
		r0 = rf(ctx, location, test)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, location, test)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, location
func (_m *Bucket) Delete(ctx context.Context, location string) error {
	ret := _m.Called(ctx, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllBuckets provides a mock function with given fields: ctx
func (_m *Bucket) DeleteAllBuckets(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllFilesFromBucket provides a mock function with given fields: ctx, bucketName
func (_m *Bucket) DeleteAllFilesFromBucket(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBucket provides a mock function with given fields: ctx, bucketName
func (_m *Bucket) DeleteBucket(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEmptyBucket provides a mock function with given fields: ctx, bucketName
func (_m *Bucket) DeleteEmptyBucket(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFileFromBucket provides a mock function with given fields: ctx, bucketName, lastBucketWriteTimestamp, billingAccount
func (_m *Bucket) DeleteFileFromBucket(ctx context.Context, bucketName string, lastBucketWriteTimestamp string, billingAccount string) error {
	ret := _m.Called(ctx, bucketName, lastBucketWriteTimestamp, billingAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucketName, lastBucketWriteTimestamp, billingAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Empty provides a mock function with given fields: ctx, location
func (_m *Bucket) Empty(ctx context.Context, location string) error {
	ret := _m.Called(ctx, location)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantServiceAccountPermissionsOnBucket provides a mock function with given fields: ctx, bucketname, mail, billingAccount
func (_m *Bucket) GrantServiceAccountPermissionsOnBucket(ctx context.Context, bucketname string, mail string, billingAccount string) error {
	ret := _m.Called(ctx, bucketname, mail, billingAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucketname, mail, billingAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBucket interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucket creates a new instance of Bucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucket(t mockConstructorTestingTNewBucket) *Bucket {
	mock := &Bucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
