// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"

	dataStructures "github.com/doitintl/hello/scheduled-tasks/flexsavestandalone/gcp/billing/utils/dataStructures"
	mock "github.com/stretchr/testify/mock"
)

// Table is an autogenerated mock type for the Table type
type Table struct {
	mock.Mock
}

// CreateAlternativeLocalTable provides a mock function with given fields: ctx, billingAccount
func (_m *Table) CreateAlternativeLocalTable(ctx context.Context, billingAccount string) error {
	ret := _m.Called(ctx, billingAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, billingAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAlternativeTmpTable provides a mock function with given fields: ctx
func (_m *Table) CreateAlternativeTmpTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAlternativeUnifiedTable provides a mock function with given fields: ctx
func (_m *Table) CreateAlternativeUnifiedTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLocalTable provides a mock function with given fields: ctx, billingAccount
func (_m *Table) CreateLocalTable(ctx context.Context, billingAccount string) error {
	ret := _m.Called(ctx, billingAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, billingAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTmpTable provides a mock function with given fields: ctx, iteration
func (_m *Table) CreateTmpTable(ctx context.Context, iteration int64) error {
	ret := _m.Called(ctx, iteration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, iteration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUnifiedTable provides a mock function with given fields: ctx
func (_m *Table) CreateUnifiedTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllLocalTables provides a mock function with given fields: ctx, bq
func (_m *Table) DeleteAllLocalTables(ctx context.Context, bq *bigquery.Client) error {
	ret := _m.Called(ctx, bq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client) error); ok {
		r0 = rf(ctx, bq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAlternativeTmpTable provides a mock function with given fields: ctx, bq
func (_m *Table) DeleteAlternativeTmpTable(ctx context.Context, bq *bigquery.Client) error {
	ret := _m.Called(ctx, bq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client) error); ok {
		r0 = rf(ctx, bq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAnyTmpTable provides a mock function with given fields: ctx, bq
func (_m *Table) DeleteAnyTmpTable(ctx context.Context, bq *bigquery.Client) error {
	ret := _m.Called(ctx, bq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client) error); ok {
		r0 = rf(ctx, bq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLocalTable provides a mock function with given fields: ctx, billingAccount
func (_m *Table) DeleteLocalTable(ctx context.Context, billingAccount string) error {
	ret := _m.Called(ctx, billingAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, billingAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTmpTable provides a mock function with given fields: ctx, bq, iteration
func (_m *Table) DeleteTmpTable(ctx context.Context, bq *bigquery.Client, iteration int64) error {
	ret := _m.Called(ctx, bq, iteration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, int64) error); ok {
		r0 = rf(ctx, bq, iteration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnifiedTable provides a mock function with given fields: ctx
func (_m *Table) DeleteUnifiedTable(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDefaultTemplate provides a mock function with given fields: ctx, tableName
func (_m *Table) GetDefaultTemplate(ctx context.Context, tableName string) (*bigquery.TableMetadata, error) {
	ret := _m.Called(ctx, tableName)

	var r0 *bigquery.TableMetadata
	if rf, ok := ret.Get(0).(func(context.Context, string) *bigquery.TableMetadata); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bigquery.TableMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableLocation provides a mock function with given fields: ctx, bq, table
func (_m *Table) GetTableLocation(ctx context.Context, bq *bigquery.Client, table *dataStructures.BillingTableInfo) (string, error) {
	ret := _m.Called(ctx, bq, table)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, *dataStructures.BillingTableInfo) string); ok {
		r0 = rf(ctx, bq, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, *dataStructures.BillingTableInfo) error); ok {
		r1 = rf(ctx, bq, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableExists provides a mock function with given fields: ctx, bq, datasetID, tableID
func (_m *Table) TableExists(ctx context.Context, bq *bigquery.Client, datasetID string, tableID string) (bool, error) {
	ret := _m.Called(ctx, bq, datasetID, tableID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string, string) bool); ok {
		r0 = rf(ctx, bq, datasetID, tableID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bigquery.Client, string, string) error); ok {
		r1 = rf(ctx, bq, datasetID, tableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSchema provides a mock function with given fields: ctx, bq, table
func (_m *Table) UpdateSchema(ctx context.Context, bq *bigquery.Client, table string) error {
	ret := _m.Called(ctx, bq, table)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bigquery.Client, string) error); ok {
		r0 = rf(ctx, bq, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewTable creates a new instance of Table. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTable(t mockConstructorTestingTNewTable) *Table {
	mock := &Table{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
