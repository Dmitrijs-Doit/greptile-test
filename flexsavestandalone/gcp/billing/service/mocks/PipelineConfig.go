// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bigquery "cloud.google.com/go/bigquery"

	dataStructures "github.com/doitintl/hello/scheduled-tasks/flexsavestandalone/gcp/billing/utils/dataStructures"
	mock "github.com/stretchr/testify/mock"
)

// PipelineConfig is an autogenerated mock type for the PipelineConfig type
type PipelineConfig struct {
	mock.Mock
}

// CreatePipelineConfigDoc provides a mock function with given fields: ctx, config
func (_m *PipelineConfig) CreatePipelineConfigDoc(ctx context.Context, config *dataStructures.PipelineConfig) error {
	ret := _m.Called(ctx, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataStructures.PipelineConfig) error); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePipelineConfigDoc provides a mock function with given fields: ctx
func (_m *PipelineConfig) DeletePipelineConfigDoc(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBillingTemplateTableSchema provides a mock function with given fields: ctx
func (_m *PipelineConfig) GetBillingTemplateTableSchema(ctx context.Context) (*bigquery.TableMetadata, error) {
	ret := _m.Called(ctx)

	var r0 *bigquery.TableMetadata
	if rf, ok := ret.Get(0).(func(context.Context) *bigquery.TableMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bigquery.TableMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDestinationTableAndDatasetFormats provides a mock function with given fields: ctx
func (_m *PipelineConfig) GetDestinationTableAndDatasetFormats(ctx context.Context) (string, string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPipelineConfig provides a mock function with given fields: ctx
func (_m *PipelineConfig) GetPipelineConfig(ctx context.Context) (*dataStructures.PipelineConfig, error) {
	ret := _m.Called(ctx)

	var r0 *dataStructures.PipelineConfig
	if rf, ok := ret.Get(0).(func(context.Context) *dataStructures.PipelineConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataStructures.PipelineConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegionBucket provides a mock function with given fields: ctx, region
func (_m *PipelineConfig) GetRegionBucket(ctx context.Context, region string) (string, error) {
	ret := _m.Called(ctx, region)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, region)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRegionBucket provides a mock function with given fields: ctx, region, bucketName
func (_m *PipelineConfig) SetRegionBucket(ctx context.Context, region string, bucketName string) error {
	ret := _m.Called(ctx, region, bucketName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, region, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPipelineConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewPipelineConfig creates a new instance of PipelineConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPipelineConfig(t mockConstructorTestingTNewPipelineConfig) *PipelineConfig {
	mock := &PipelineConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
