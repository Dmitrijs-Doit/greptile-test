// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pkg "github.com/doitintl/firestore/pkg"
	mock "github.com/stretchr/testify/mock"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// Onboard provides a mock function with given fields: ctx, customerID, billingAccountID, serviceAccountEmail, tables
func (_m *ServiceInterface) Onboard(ctx context.Context, customerID string, billingAccountID string, serviceAccountEmail string, tables *pkg.BillingTablesLocation) error {
	ret := _m.Called(ctx, customerID, billingAccountID, serviceAccountEmail, tables)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *pkg.BillingTablesLocation) error); ok {
		r0 = rf(ctx, customerID, billingAccountID, serviceAccountEmail, tables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TestConnection provides a mock function with given fields: ctx, billingAccountID, serviceAccountEmail, tables
func (_m *ServiceInterface) TestConnection(ctx context.Context, billingAccountID string, serviceAccountEmail string, tables *pkg.BillingTablesLocation) error {
	ret := _m.Called(ctx, billingAccountID, serviceAccountEmail, tables)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *pkg.BillingTablesLocation) error); ok {
		r0 = rf(ctx, billingAccountID, serviceAccountEmail, tables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceInterface(t mockConstructorTestingTNewServiceInterface) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
