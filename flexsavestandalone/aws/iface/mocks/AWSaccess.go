// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	costexplorer "github.com/aws/aws-sdk-go/service/costexplorer"

	mock "github.com/stretchr/testify/mock"

	session "github.com/aws/aws-sdk-go/aws/session"
)

// AWSAccess is an autogenerated mock type for the AWSAccess type
type AWSAccess struct {
	mock.Mock
}

// GetAWSSession provides a mock function with given fields: accountID, functionName
func (_m *AWSAccess) GetAWSSession(accountID string, functionName string) (*session.Session, error) {
	ret := _m.Called(accountID, functionName)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(string, string) *session.Session); ok {
		r0 = rf(accountID, functionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountID, functionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavingsPlansPurchaseRecommendation provides a mock function with given fields: input, accountID
func (_m *AWSAccess) GetSavingsPlansPurchaseRecommendation(input costexplorer.GetSavingsPlansPurchaseRecommendationInput, accountID string) (*costexplorer.GetSavingsPlansPurchaseRecommendationOutput, error) {
	ret := _m.Called(input, accountID)

	var r0 *costexplorer.GetSavingsPlansPurchaseRecommendationOutput
	if rf, ok := ret.Get(0).(func(costexplorer.GetSavingsPlansPurchaseRecommendationInput, string) *costexplorer.GetSavingsPlansPurchaseRecommendationOutput); ok {
		r0 = rf(input, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*costexplorer.GetSavingsPlansPurchaseRecommendationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(costexplorer.GetSavingsPlansPurchaseRecommendationInput, string) error); ok {
		r1 = rf(input, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAWSAccess interface {
	mock.TestingT
	Cleanup(func())
}

// NewAWSAccess creates a new instance of AWSAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAWSAccess(t mockConstructorTestingTNewAWSAccess) *AWSAccess {
	mock := &AWSAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
