// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// BucketsIface is an autogenerated mock type for the BucketsIface type
type BucketsIface struct {
	mock.Mock
}

// GetCustomerBuckets provides a mock function with given fields: ctx, customerRef
func (_m *BucketsIface) GetCustomerBuckets(ctx context.Context, customerRef *firestore.DocumentRef) ([]common.Bucket, error) {
	ret := _m.Called(ctx, customerRef)

	var r0 []common.Bucket

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]common.Bucket, error)); ok {
		return rf(ctx, customerRef)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []common.Bucket); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Bucket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBucketsIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewBucketsIface creates a new instance of BucketsIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBucketsIface(t mockConstructorTestingTNewBucketsIface) *BucketsIface {
	mock := &BucketsIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
