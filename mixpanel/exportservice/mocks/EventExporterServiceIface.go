// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mixpanel "github.com/doitintl/mixpanel"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EventExporterServiceIface is an autogenerated mock type for the EventExporterServiceIface type
type EventExporterServiceIface struct {
	mock.Mock
}

// ExportToBQ provides a mock function with given fields: ctx, events
func (_m *EventExporterServiceIface) ExportToBQ(ctx *gin.Context, events map[time.Time][]mixpanel.Event) error {
	ret := _m.Called(ctx, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, map[time.Time][]mixpanel.Event) error); ok {
		r0 = rf(ctx, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvents provides a mock function with given fields: ctx, interval
func (_m *EventExporterServiceIface) GetEvents(ctx *gin.Context, interval mixpanel.EventInterval) (map[time.Time][]mixpanel.Event, error) {
	ret := _m.Called(ctx, interval)

	var r0 map[time.Time][]mixpanel.Event
	if rf, ok := ret.Get(0).(func(*gin.Context, mixpanel.EventInterval) map[time.Time][]mixpanel.Event); ok {
		r0 = rf(ctx, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[time.Time][]mixpanel.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gin.Context, mixpanel.EventInterval) error); ok {
		r1 = rf(ctx, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMixpanelEventsFromMixpanelClient provides a mock function with given fields: ctx, chunkStartDate, chunkEndDate
func (_m *EventExporterServiceIface) GetMixpanelEventsFromMixpanelClient(ctx *gin.Context, chunkStartDate time.Time, chunkEndDate time.Time) ([]string, error) {
	ret := _m.Called(ctx, chunkStartDate, chunkEndDate)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*gin.Context, time.Time, time.Time) []string); ok {
		r0 = rf(ctx, chunkStartDate, chunkEndDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gin.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, chunkStartDate, chunkEndDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventExporterServiceIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventExporterServiceIface creates a new instance of EventExporterServiceIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventExporterServiceIface(t mockConstructorTestingTNewEventExporterServiceIface) *EventExporterServiceIface {
	mock := &EventExporterServiceIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
