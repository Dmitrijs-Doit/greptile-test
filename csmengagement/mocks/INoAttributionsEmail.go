// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	attribution "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/attributions/domain/attribution"
	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/csmengagement/dal"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// INoAttributionsEmail is an autogenerated mock type for the INoAttributionsEmail type
type INoAttributionsEmail struct {
	mock.Mock
}

// GetAllCustomAttributions provides a mock function with given fields: ctx
func (_m *INoAttributionsEmail) GetAllCustomAttributions(ctx context.Context) ([]attribution.Attribution, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomAttributions")
	}

	var r0 []attribution.Attribution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]attribution.Attribution, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []attribution.Attribution); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attribution.Attribution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributionsForUser provides a mock function with given fields: ctx, coll
func (_m *INoAttributionsEmail) GetAttributionsForUser(ctx context.Context, coll collab.Collaborator) ([]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, coll)

	if len(ret) == 0 {
		panic("no return value specified for GetAttributionsForUser")
	}

	var r0 []*firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collab.Collaborator) ([]*firestore.DocumentRef, error)); ok {
		return rf(ctx, coll)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collab.Collaborator) []*firestore.DocumentRef); ok {
		r0 = rf(ctx, coll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, collab.Collaborator) error); ok {
		r1 = rf(ctx, coll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersNewerThanThirtyDays provides a mock function with given fields: ctx
func (_m *INoAttributionsEmail) GetCustomersNewerThanThirtyDays(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomersNewerThanThirtyDays")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEligibleUsersForCustomer provides a mock function with given fields: ctx, customerRef
func (_m *INoAttributionsEmail) GetEligibleUsersForCustomer(ctx context.Context, customerRef *firestore.DocumentRef) ([]*common.User, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for GetEligibleUsersForCustomer")
	}

	var r0 []*common.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*common.User, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*common.User); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequiredRolePermissions provides a mock function with given fields: ctx, roleName
func (_m *INoAttributionsEmail) GetRequiredRolePermissions(ctx context.Context, roleName string) ([]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetRequiredRolePermissions")
	}

	var r0 []*firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*firestore.DocumentRef, error)); ok {
		return rf(ctx, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*firestore.DocumentRef); ok {
		r0 = rf(ctx, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTracker provides a mock function with given fields:
func (_m *INoAttributionsEmail) GetTracker() dal.SentNotificationsTracker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTracker")
	}

	var r0 dal.SentNotificationsTracker
	if rf, ok := ret.Get(0).(func() dal.SentNotificationsTracker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dal.SentNotificationsTracker)
		}
	}

	return r0
}

// UserHasRequiredPermissions provides a mock function with given fields: ctx, user, requiredPermissions
func (_m *INoAttributionsEmail) UserHasRequiredPermissions(ctx context.Context, user *common.User, requiredPermissions []common.Permission) error {
	ret := _m.Called(ctx, user, requiredPermissions)

	if len(ret) == 0 {
		panic("no return value specified for UserHasRequiredPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.User, []common.Permission) error); ok {
		r0 = rf(ctx, user, requiredPermissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewINoAttributionsEmail creates a new instance of INoAttributionsEmail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewINoAttributionsEmail(t interface {
	mock.TestingT
	Cleanup(func())
}) *INoAttributionsEmail {
	mock := &INoAttributionsEmail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
