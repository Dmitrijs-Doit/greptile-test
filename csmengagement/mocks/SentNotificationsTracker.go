// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SentNotificationsTracker is an autogenerated mock type for the SentNotificationsTracker type
type SentNotificationsTracker struct {
	mock.Mock
}

// GetLastProcessedDate provides a mock function with given fields: ctx
func (_m *SentNotificationsTracker) GetLastProcessedDate(ctx context.Context) (time.Time, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProcessedDate")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSent provides a mock function with given fields: ctx
func (_m *SentNotificationsTracker) GetSent(ctx context.Context) (map[string]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSent")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLastProcessedDate provides a mock function with given fields: ctx, date
func (_m *SentNotificationsTracker) UpdateLastProcessedDate(ctx context.Context, date time.Time) error {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastProcessedDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSent provides a mock function with given fields: ctx, sent
func (_m *SentNotificationsTracker) UpdateSent(ctx context.Context, sent map[string]string) error {
	ret := _m.Called(ctx, sent)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) error); ok {
		r0 = rf(ctx, sent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSentNotificationsTracker creates a new instance of SentNotificationsTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSentNotificationsTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *SentNotificationsTracker {
	mock := &SentNotificationsTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
