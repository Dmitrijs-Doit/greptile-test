// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	collab "github.com/doitintl/hello/scheduled-tasks/cloudanalytics/collab"

	dal "github.com/doitintl/hello/scheduled-tasks/csmengagement/dal"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IAttributionEmail is an autogenerated mock type for the IAttributionEmail type
type IAttributionEmail struct {
	mock.Mock
}

// GetAttributionsByDateRange provides a mock function with given fields: ctx, from, to
func (_m *IAttributionEmail) GetAttributionsByDateRange(ctx context.Context, from time.Time, to time.Time) ([]dal.AttributionData, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetAttributionsByDateRange")
	}

	var r0 []dal.AttributionData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]dal.AttributionData, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []dal.AttributionData); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dal.AttributionData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAlerts provides a mock function with given fields: ctx, coll
func (_m *IAttributionEmail) HasAlerts(ctx context.Context, coll collab.Collaborator) (bool, error) {
	ret := _m.Called(ctx, coll)

	if len(ret) == 0 {
		panic("no return value specified for HasAlerts")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collab.Collaborator) (bool, error)); ok {
		return rf(ctx, coll)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collab.Collaborator) bool); ok {
		r0 = rf(ctx, coll)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, collab.Collaborator) error); ok {
		r1 = rf(ctx, coll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasBudgets provides a mock function with given fields: ctx, coll
func (_m *IAttributionEmail) HasBudgets(ctx context.Context, coll collab.Collaborator) (bool, error) {
	ret := _m.Called(ctx, coll)

	if len(ret) == 0 {
		panic("no return value specified for HasBudgets")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collab.Collaborator) (bool, error)); ok {
		return rf(ctx, coll)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collab.Collaborator) bool); ok {
		r0 = rf(ctx, coll)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, collab.Collaborator) error); ok {
		r1 = rf(ctx, coll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFirstAttribution provides a mock function with given fields: ctx, attributionID, coll
func (_m *IAttributionEmail) IsFirstAttribution(ctx context.Context, attributionID string, coll collab.Collaborator) (bool, error) {
	ret := _m.Called(ctx, attributionID, coll)

	if len(ret) == 0 {
		panic("no return value specified for IsFirstAttribution")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, collab.Collaborator) (bool, error)); ok {
		return rf(ctx, attributionID, coll)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, collab.Collaborator) bool); ok {
		r0 = rf(ctx, attributionID, coll)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, collab.Collaborator) error); ok {
		r1 = rf(ctx, attributionID, coll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAttributionEmail creates a new instance of IAttributionEmail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAttributionEmail(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAttributionEmail {
	mock := &IAttributionEmail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
