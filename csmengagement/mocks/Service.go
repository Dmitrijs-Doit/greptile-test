// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/csmengagement/domain"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetNoAttributionsEmails provides a mock function with given fields: ctx
func (_m *Service) GetNoAttributionsEmails(ctx context.Context) ([]domain.NoAttributionEmailParams, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNoAttributionsEmails")
	}

	var r0 []domain.NoAttributionEmailParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.NoAttributionEmailParams, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.NoAttributionEmailParams); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.NoAttributionEmailParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendFirstInvoiceEmail provides a mock function with given fields: ctx, customerID
func (_m *Service) SendFirstInvoiceEmail(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for SendFirstInvoiceEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNewAttributionEmails provides a mock function with given fields: ctx
func (_m *Service) SendNewAttributionEmails(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendNewAttributionEmails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNewCustomerWelcomeEmail provides a mock function with given fields: ctx
func (_m *Service) SendNewCustomerWelcomeEmail(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendNewCustomerWelcomeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNoAttributionsEmails provides a mock function with given fields: ctx, emailsToSend
func (_m *Service) SendNoAttributionsEmails(ctx context.Context, emailsToSend []domain.NoAttributionEmailParams) error {
	ret := _m.Called(ctx, emailsToSend)

	if len(ret) == 0 {
		panic("no return value specified for SendNoAttributionsEmails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.NoAttributionEmailParams) error); ok {
		r0 = rf(ctx, emailsToSend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNoCustomerEngagementNotifications provides a mock function with given fields: ctx
func (_m *Service) SendNoCustomerEngagementNotifications(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendNoCustomerEngagementNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
