// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	firestore "cloud.google.com/go/firestore"

	fs "github.com/doitintl/hello/scheduled-tasks/spot0/dal/firestore"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ISpot0CostsFireStore is an autogenerated mock type for the ISpot0CostsFireStore type
type ISpot0CostsFireStore struct {
	mock.Mock
}

// AddASGCustomerToList provides a mock function with given fields: ctx, customer
func (_m *ISpot0CostsFireStore) AddASGCustomerToList(ctx context.Context, customer *firestore.DocumentRef) (bool, error) {
	ret := _m.Called(ctx, customer)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) bool); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerIsUsingSpotScaling provides a mock function with given fields: ctx, customer
func (_m *ISpot0CostsFireStore) CustomerIsUsingSpotScaling(ctx context.Context, customer *firestore.DocumentRef) (bool, error) {
	ret := _m.Called(ctx, customer)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) bool); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteASGCustomerFromList provides a mock function with given fields: ctx, customer
func (_m *ISpot0CostsFireStore) DeleteASGCustomerFromList(ctx context.Context, customer *firestore.DocumentRef) error {
	ret := _m.Called(ctx, customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerAMs provides a mock function with given fields: ctx, docRef
func (_m *ISpot0CostsFireStore) GetCustomerAMs(ctx context.Context, docRef *firestore.DocumentRef) ([]common.AccountManager, error) {
	ret := _m.Called(ctx, docRef)

	var r0 []common.AccountManager
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []common.AccountManager); ok {
		r0 = rf(ctx, docRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.AccountManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, docRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerFromPrimaryDomain provides a mock function with given fields: ctx, primaryDomain
func (_m *ISpot0CostsFireStore) GetCustomerFromPrimaryDomain(ctx context.Context, primaryDomain string) (*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, primaryDomain)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, primaryDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, primaryDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerTimeCreated provides a mock function with given fields: ctx, customer
func (_m *ISpot0CostsFireStore) GetCustomerTimeCreated(ctx context.Context, customer *firestore.DocumentRef) (time.Time, error) {
	ret := _m.Called(ctx, customer)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) time.Time); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateASGsUsage provides a mock function with given fields: ctx, usageDoc
func (_m *ISpot0CostsFireStore) UpdateASGsUsage(ctx context.Context, usageDoc fs.UsageDoc) error {
	ret := _m.Called(ctx, usageDoc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fs.UsageDoc) error); ok {
		r0 = rf(ctx, usageDoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewISpot0CostsFireStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewISpot0CostsFireStore creates a new instance of ISpot0CostsFireStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISpot0CostsFireStore(t mockConstructorTestingTNewISpot0CostsFireStore) *ISpot0CostsFireStore {
	mock := &ISpot0CostsFireStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
