// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bq "github.com/doitintl/hello/scheduled-tasks/spot0/dal/bigquery"

	iface "github.com/doitintl/bigquery/iface"

	mock "github.com/stretchr/testify/mock"
)

// ISpot0CostsBigQuery is an autogenerated mock type for the ISpot0CostsBigQuery type
type ISpot0CostsBigQuery struct {
	mock.Mock
}

// AggregateDailySavings provides a mock function with given fields: ctx, startDate, endDate, accountID
func (_m *ISpot0CostsBigQuery) AggregateDailySavings(ctx context.Context, startDate string, endDate string, accountID string) error {
	ret := _m.Called(ctx, startDate, endDate, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, startDate, endDate, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDomainsWithASGs provides a mock function with given fields: ctx
func (_m *ISpot0CostsBigQuery) GetDomainsWithASGs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthlyUsage provides a mock function with given fields: ctx, year, month, accountID
func (_m *ISpot0CostsBigQuery) GetMonthlyUsage(ctx context.Context, year string, month string, accountID string) (iface.RowIterator, error) {
	ret := _m.Called(ctx, year, month, accountID)

	var r0 iface.RowIterator

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (iface.RowIterator, error)); ok {
		return rf(ctx, year, month, accountID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) iface.RowIterator); ok {
		r0 = rf(ctx, year, month, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.RowIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, year, month, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNonBillingTagsAsg provides a mock function with given fields: ctx
func (_m *ISpot0CostsBigQuery) GetNonBillingTagsAsg(ctx context.Context) ([]*bq.NonBillingAsg, error) {
	ret := _m.Called(ctx)

	var r0 []*bq.NonBillingAsg

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]*bq.NonBillingAsg, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []*bq.NonBillingAsg); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bq.NonBillingAsg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNonBillingTagsDomains provides a mock function with given fields: ctx
func (_m *ISpot0CostsBigQuery) GetNonBillingTagsDomains(ctx context.Context) ([]*bq.NonBillingAsg, error) {
	ret := _m.Called(ctx)

	var r0 []*bq.NonBillingAsg

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]*bq.NonBillingAsg, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []*bq.NonBillingAsg); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bq.NonBillingAsg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISpot0CostsBigQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewISpot0CostsBigQuery creates a new instance of ISpot0CostsBigQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISpot0CostsBigQuery(t mockConstructorTestingTNewISpot0CostsBigQuery) *ISpot0CostsBigQuery {
	mock := &ISpot0CostsBigQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
