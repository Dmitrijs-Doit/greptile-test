// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sl "github.com/doitintl/hello/scheduled-tasks/spot0/dal/slack"
	mock "github.com/stretchr/testify/mock"
)

// ISlack is an autogenerated mock type for the ISlack type
type ISlack struct {
	mock.Mock
}

// AssembleNonBillingTagsSlackMessage provides a mock function with given fields: reportData
func (_m *ISlack) AssembleNonBillingTagsSlackMessage(reportData []*sl.NonBillingTagsRow) (map[string]interface{}, *string) {
	ret := _m.Called(reportData)

	var r0 map[string]interface{}

	var r1 *string

	if rf, ok := ret.Get(0).(func([]*sl.NonBillingTagsRow) (map[string]interface{}, *string)); ok {
		return rf(reportData)
	}

	if rf, ok := ret.Get(0).(func([]*sl.NonBillingTagsRow) map[string]interface{}); ok {
		r0 = rf(reportData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]*sl.NonBillingTagsRow) *string); ok {
		r1 = rf(reportData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	return r0, r1
}

// PublishToSlack provides a mock function with given fields: ctx, reportData
func (_m *ISlack) PublishToSlack(ctx context.Context, reportData []*sl.NonBillingTagsRow) (*string, error) {
	ret := _m.Called(ctx, reportData)

	var r0 *string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, []*sl.NonBillingTagsRow) (*string, error)); ok {
		return rf(ctx, reportData)
	}

	if rf, ok := ret.Get(0).(func(context.Context, []*sl.NonBillingTagsRow) *string); ok {
		r0 = rf(ctx, reportData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*sl.NonBillingTagsRow) error); ok {
		r1 = rf(ctx, reportData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISlack interface {
	mock.TestingT
	Cleanup(func())
}

// NewISlack creates a new instance of ISlack. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISlack(t mockConstructorTestingTNewISlack) *ISlack {
	mock := &ISlack{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
