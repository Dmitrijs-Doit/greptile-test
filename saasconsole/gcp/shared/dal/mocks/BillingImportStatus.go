// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/doitintl/hello/scheduled-tasks/saasconsole/gcp/shared"
)

// BillingImportStatus is an autogenerated mock type for the BillingImportStatus type
type BillingImportStatus struct {
	mock.Mock
}

// GetBillingImportStatus provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) GetBillingImportStatus(ctx context.Context, customerID string, billingAccountID string) (*shared.GCPBillingImportStatus, error) {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 *shared.GCPBillingImportStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *shared.GCPBillingImportStatus); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.GCPBillingImportStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, billingAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomersCompletedBillingImport provides a mock function with given fields: ctx
func (_m *BillingImportStatus) ListCustomersCompletedBillingImport(ctx context.Context) (map[string]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx)

	var r0 map[string]*firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*firestore.DocumentRef); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*firestore.DocumentRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatusCompleted provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) SetStatusCompleted(ctx context.Context, customerID string, billingAccountID string) error {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusEnabled provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) SetStatusEnabled(ctx context.Context, customerID string, billingAccountID string) error {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusFailed provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) SetStatusFailed(ctx context.Context, customerID string, billingAccountID string) error {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusPending provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) SetStatusPending(ctx context.Context, customerID string, billingAccountID string) error {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatusStarted provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) SetStatusStarted(ctx context.Context, customerID string, billingAccountID string) error {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateError provides a mock function with given fields: ctx, customerID, billingAccountID, err
func (_m *BillingImportStatus) UpdateError(ctx context.Context, customerID string, billingAccountID string, err string) error {
	ret := _m.Called(ctx, customerID, billingAccountID, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMaxTimesThresholds provides a mock function with given fields: ctx, customerID, billingAccountID
func (_m *BillingImportStatus) UpdateMaxTimesThresholds(ctx context.Context, customerID string, billingAccountID string) error {
	ret := _m.Called(ctx, customerID, billingAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, customerID, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: ctx, customerID, billingAccountID, status
func (_m *BillingImportStatus) UpdateStatus(ctx context.Context, customerID string, billingAccountID string, status shared.BillingImportStatus) error {
	ret := _m.Called(ctx, customerID, billingAccountID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, shared.BillingImportStatus) error); ok {
		r0 = rf(ctx, customerID, billingAccountID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBillingImportStatus interface {
	mock.TestingT
	Cleanup(func())
}

// NewBillingImportStatus creates a new instance of BillingImportStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBillingImportStatus(t mockConstructorTestingTNewBillingImportStatus) *BillingImportStatus {
	mock := &BillingImportStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
