// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	mock "github.com/stretchr/testify/mock"

	option "google.golang.org/api/option"

	pkg "github.com/doitintl/hello/scheduled-tasks/cloudconnect/pkg"
)

// CloudConnectService is an autogenerated mock type for the CloudConnectService type
type CloudConnectService struct {
	mock.Mock
}

// GetBQLensCustomers provides a mock function with given fields: ctx
func (_m *CloudConnectService) GetBQLensCustomers(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBQLensCustomers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientOptions provides a mock function with given fields: ctx, customerID
func (_m *CloudConnectService) GetClientOptions(ctx context.Context, customerID string) ([]option.ClientOption, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientOptions")
	}

	var r0 []option.ClientOption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]option.ClientOption, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []option.ClientOption); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]option.ClientOption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentials provides a mock function with given fields: ctx, customerID
func (_m *CloudConnectService) GetCredentials(ctx context.Context, customerID string) ([]*common.GoogleCloudCredential, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 []*common.GoogleCloudCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*common.GoogleCloudCredential, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*common.GoogleCloudCredential); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.GoogleCloudCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerGCPClient provides a mock function with given fields: ctx, customerID
func (_m *CloudConnectService) GetCustomerGCPClient(ctx context.Context, customerID string) ([]common.GCPClient, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerGCPClient")
	}

	var r0 []common.GCPClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]common.GCPClient, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []common.GCPClient); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.GCPClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGCPClients provides a mock function with given fields: ctx, customerID
func (_m *CloudConnectService) NewGCPClients(ctx context.Context, customerID string) (*pkg.ConnectClients, []option.ClientOption, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for NewGCPClients")
	}

	var r0 *pkg.ConnectClients
	var r1 []option.ClientOption
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.ConnectClients, []option.ClientOption, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.ConnectClients); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.ConnectClients)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []option.ClientOption); ok {
		r1 = rf(ctx, customerID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]option.ClientOption)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, customerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCloudConnectService creates a new instance of CloudConnectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudConnectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudConnectService {
	mock := &CloudConnectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
