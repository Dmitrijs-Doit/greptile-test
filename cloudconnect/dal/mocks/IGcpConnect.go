// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	bigquery "github.com/doitintl/bigquery"
	cloudlogging "github.com/doitintl/cloudlogging"

	cloudresourcemanager "github.com/doitintl/cloudresourcemanager"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	context "context"

	firestore "cloud.google.com/go/firestore"

	logging "google.golang.org/api/logging/v2"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/hello/scheduled-tasks/cloudconnect/pkg"

	serviceusage "github.com/doitintl/serviceusage"
)

// IGcpConnect is an autogenerated mock type for the IGcpConnect type
type IGcpConnect struct {
	mock.Mock
}

// GetBQLensCustomersDocs provides a mock function with given fields: ctx
func (_m *IGcpConnect) GetBQLensCustomersDocs(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBQLensCustomersDocs")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBigQueryLensCredentials provides a mock function with given fields: ctx, customerID
func (_m *IGcpConnect) GetBigQueryLensCredentials(ctx context.Context, customerID string) ([]*common.GoogleCloudCredential, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBigQueryLensCredentials")
	}

	var r0 []*common.GoogleCloudCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*common.GoogleCloudCredential, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*common.GoogleCloudCredential); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.GoogleCloudCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientOption provides a mock function with given fields: ctx, cloudConectDoc
func (_m *IGcpConnect) GetClientOption(ctx context.Context, cloudConectDoc *firestore.DocumentRef) (*pkg.GcpClientOption, error) {
	ret := _m.Called(ctx, cloudConectDoc)

	if len(ret) == 0 {
		panic("no return value specified for GetClientOption")
	}

	var r0 *pkg.GcpClientOption
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (*pkg.GcpClientOption, error)); ok {
		return rf(ctx, cloudConectDoc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) *pkg.GcpClientOption); ok {
		r0 = rf(ctx, cloudConectDoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.GcpClientOption)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, cloudConectDoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectDetails provides a mock function with given fields: ctx, cloudConectDoc
func (_m *IGcpConnect) GetConnectDetails(ctx context.Context, cloudConectDoc *firestore.DocumentRef) (*common.GCPConnectOrganization, string, error) {
	ret := _m.Called(ctx, cloudConectDoc)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectDetails")
	}

	var r0 *common.GCPConnectOrganization
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (*common.GCPConnectOrganization, string, error)); ok {
		return rf(ctx, cloudConectDoc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) *common.GCPConnectOrganization); ok {
		r0 = rf(ctx, cloudConectDoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.GCPConnectOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) string); ok {
		r1 = rf(ctx, cloudConectDoc)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *firestore.DocumentRef) error); ok {
		r2 = rf(ctx, cloudConectDoc)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCredentialByOrg provides a mock function with given fields: ctx, cloudConectDoc
func (_m *IGcpConnect) GetCredentialByOrg(ctx context.Context, cloudConectDoc *firestore.DocumentRef) (*common.GoogleCloudCredential, error) {
	ret := _m.Called(ctx, cloudConectDoc)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentialByOrg")
	}

	var r0 *common.GoogleCloudCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (*common.GoogleCloudCredential, error)); ok {
		return rf(ctx, cloudConectDoc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) *common.GoogleCloudCredential); ok {
		r0 = rf(ctx, cloudConectDoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.GoogleCloudCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, cloudConectDoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentials provides a mock function with given fields: ctx, customerID
func (_m *IGcpConnect) GetCredentials(ctx context.Context, customerID string) ([]*common.GoogleCloudCredential, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 []*common.GoogleCloudCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*common.GoogleCloudCredential, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*common.GoogleCloudCredential); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.GoogleCloudCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSinkDestination provides a mock function with given fields: projectID
func (_m *IGcpConnect) GetSinkDestination(projectID string) string {
	ret := _m.Called(projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSinkDestination")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(projectID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSinkParams provides a mock function with given fields: sinkDestination
func (_m *IGcpConnect) GetSinkParams(sinkDestination string) *logging.LogSink {
	ret := _m.Called(sinkDestination)

	if len(ret) == 0 {
		panic("no return value specified for GetSinkParams")
	}

	var r0 *logging.LogSink
	if rf, ok := ret.Get(0).(func(string) *logging.LogSink); ok {
		r0 = rf(sinkDestination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logging.LogSink)
		}
	}

	return r0
}

// NewBigQuery provides a mock function with given fields: ctx, options
func (_m *IGcpConnect) NewBigQuery(ctx context.Context, options *pkg.GcpClientOption) (*bigquery.Service, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NewBigQuery")
	}

	var r0 *bigquery.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) (*bigquery.Service, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) *bigquery.Service); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bigquery.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.GcpClientOption) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloudLogging provides a mock function with given fields: ctx, options
func (_m *IGcpConnect) NewCloudLogging(ctx context.Context, options *pkg.GcpClientOption) (*cloudlogging.Service, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NewCloudLogging")
	}

	var r0 *cloudlogging.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) (*cloudlogging.Service, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) *cloudlogging.Service); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudlogging.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.GcpClientOption) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloudResourceManager provides a mock function with given fields: ctx, options
func (_m *IGcpConnect) NewCloudResourceManager(ctx context.Context, options *pkg.GcpClientOption) (*cloudresourcemanager.Service, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NewCloudResourceManager")
	}

	var r0 *cloudresourcemanager.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) (*cloudresourcemanager.Service, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) *cloudresourcemanager.Service); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudresourcemanager.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.GcpClientOption) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceUsage provides a mock function with given fields: ctx, options
func (_m *IGcpConnect) NewServiceUsage(ctx context.Context, options *pkg.GcpClientOption) (*serviceusage.Service, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NewServiceUsage")
	}

	var r0 *serviceusage.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) (*serviceusage.Service, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GcpClientOption) *serviceusage.Service); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceusage.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.GcpClientOption) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSinkDestination provides a mock function with given fields: ctx, sinkDestination, cloudConectDoc
func (_m *IGcpConnect) SaveSinkDestination(ctx context.Context, sinkDestination string, cloudConectDoc *firestore.DocumentRef) error {
	ret := _m.Called(ctx, sinkDestination, cloudConectDoc)

	if len(ret) == 0 {
		panic("no return value specified for SaveSinkDestination")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *firestore.DocumentRef) error); ok {
		r0 = rf(ctx, sinkDestination, cloudConectDoc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSinkMetadata provides a mock function with given fields: ctx, data, cloudConectDoc
func (_m *IGcpConnect) SaveSinkMetadata(ctx context.Context, data *pkg.SinkMetadata, cloudConectDoc *firestore.DocumentRef) (*firestore.WriteResult, error) {
	ret := _m.Called(ctx, data, cloudConectDoc)

	if len(ret) == 0 {
		panic("no return value specified for SaveSinkMetadata")
	}

	var r0 *firestore.WriteResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.SinkMetadata, *firestore.DocumentRef) (*firestore.WriteResult, error)); ok {
		return rf(ctx, data, cloudConectDoc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.SinkMetadata, *firestore.DocumentRef) *firestore.WriteResult); ok {
		r0 = rf(ctx, data, cloudConectDoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.WriteResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pkg.SinkMetadata, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, data, cloudConectDoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGcpConnect creates a new instance of IGcpConnect. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGcpConnect(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGcpConnect {
	mock := &IGcpConnect{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
