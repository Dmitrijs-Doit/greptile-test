// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	dal "github.com/doitintl/hello/scheduled-tasks/cloudconnect/dal"

	mock "github.com/stretchr/testify/mock"
)

// IAwsConnect is an autogenerated mock type for the IAwsConnect type
type IAwsConnect struct {
	mock.Mock
}

// GetCustomer provides a mock function with given fields: ctx, customerID
func (_m *IAwsConnect) GetCustomer(ctx context.Context, customerID string) (*common.Customer, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomer")
	}

	var r0 *common.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.Customer, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *common.Customer); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerAccountManagers provides a mock function with given fields: ctx, customer, company
func (_m *IAwsConnect) GetCustomerAccountManagers(ctx context.Context, customer *common.Customer, company common.AccountManagerCompany) ([]*common.AccountManager, error) {
	ret := _m.Called(ctx, customer, company)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerAccountManagers")
	}

	var r0 []*common.AccountManager
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.Customer, common.AccountManagerCompany) ([]*common.AccountManager, error)); ok {
		return rf(ctx, customer, company)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.Customer, common.AccountManagerCompany) []*common.AccountManager); ok {
		r0 = rf(ctx, customer, company)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.AccountManager)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.Customer, common.AccountManagerCompany) error); ok {
		r1 = rf(ctx, customer, company)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerAdmins provides a mock function with given fields: ctx, customerID
func (_m *IAwsConnect) GetCustomerAdmins(ctx context.Context, customerID string) ([]common.User, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerAdmins")
	}

	var r0 []common.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]common.User, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []common.User); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpot0CustomerFlags provides a mock function with given fields: ctx, customerID
func (_m *IAwsConnect) GetSpot0CustomerFlags(ctx context.Context, customerID string) (*dal.Spot0CustomerFlags, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetSpot0CustomerFlags")
	}

	var r0 *dal.Spot0CustomerFlags
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dal.Spot0CustomerFlags, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dal.Spot0CustomerFlags); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dal.Spot0CustomerFlags)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMail provides a mock function with given fields: ctx, mailRecipients, bccs, companyName
func (_m *IAwsConnect) SendMail(ctx context.Context, mailRecipients []dal.MailRecipient, bccs []string, companyName string) error {
	ret := _m.Called(ctx, mailRecipients, bccs, companyName)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []dal.MailRecipient, []string, string) error); ok {
		r0 = rf(ctx, mailRecipients, bccs, companyName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSpot0CustomerFlags provides a mock function with given fields: ctx, customerID
func (_m *IAwsConnect) SetSpot0CustomerFlags(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for SetSpot0CustomerFlags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAwsConnect creates a new instance of IAwsConnect. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAwsConnect(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAwsConnect {
	mock := &IAwsConnect{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
