Description: This template creates a role to allow EKS metrics export.
Parameters:
  EKSClusterName:
    Type: String
    Description: Customer ID for Cross-Account-Role
  RoleName:
    Type: String
    Description: New Role Name
  S3Bucket:
    Type: String
    Description: Bucket Name
  CreateIAMPolicy:
    Description: Create DoiT role and policy - for the first cluster installation only.
    Default: false
    Type: String
    AllowedValues:
      - false
      - true
  CreateBucket:
    Description: Create region bucket for EKS metrics.
    Default: true
    Type: String
    AllowedValues:
      - false
      - true
Conditions:
  CreateIAMPolicy: !Equals
    - !Ref CreateIAMPolicy
    - true
  CreateBucket: !Equals
    - !Ref CreateBucket
    - true
  CreateRoleOnly: !Equals
    - !Ref CreateIAMPolicy
    - false
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Cross-Account Role Configuration.  *Do Not Modify*"
        Parameters:
          - EKSClusterName
          # - DoitNamespace
          # - EksServiceAccount
          # - PolicyName
          - RoleName
          - S3Bucket
Resources:
  # OIDC Resources
  ClusterOIDCURL:
    Type: Custom::ClusterOIDCURL
    Properties:
      ServiceToken: !GetAtt ClusterOIDCURLFunction.Arn
      ClusterName: !Ref EKSClusterName

  # AWS::Lambda::Function We need to use the API to get the OpenID Connect URL from the cluster, a Lambda does that for us here
  ClusterOIDCURLFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ClusterOIDCLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          eks = boto3.client("eks")
          def lambda_handler(event, context):
            responseData = {}
            if event['RequestType'] == 'Delete':
              responseData['Reason'] = "Success"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "")
            else:
              try:
                cluster_name = event['ResourceProperties']['ClusterName']
                response = eks.describe_cluster(name=cluster_name)
                cluster_oidc_url = response['cluster']['identity']['oidc']['issuer']
                # We need the url for the roles without the protocol when creating roles, remove
                # it here to make this easier to use in CF templates.
                without_protocol = cluster_oidc_url.replace('https://', '')
                responseData['Reason'] = "Success"
                responseData['Url'] = without_protocol
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, without_protocol)
              except Exception as e:
                responseData['Reason'] = str(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "")

  ClusterOIDCProvider:
    Type: Custom::ClusterOIDCProvider
    Properties:
      ServiceToken: !GetAtt ClusterOIDCProviderFunction.Arn
      ClusterOIDCURL: !Ref ClusterOIDCURL

  # AWS::Lambda::Function This defines the Lambda that will run the setup (and teardown) code for the OIDC provider
  ClusterOIDCProviderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt ClusterOIDCLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          def lambda_handler(event, context):
            data = {}
            try:
              cluster_oidc_url = event['ResourceProperties']['ClusterOIDCURL']
              if event['RequestType'] == 'Create':
                oidc_id = cluster_oidc_url.rsplit("/", 1)[1]
                resp = iam.list_open_id_connect_providers()
                provider_arn = ''
                for item in resp['OpenIDConnectProviderList']:
                  id = item['Arn'].rsplit("/", 1)[1]
                  if id == oidc_id:
                    provider_arn = item['Arn']
                    break
                if provider_arn == '':
                  with_protocol = "https://" + cluster_oidc_url
                  # This is the ca thumbprint of AWS's issuer
                  issuer_thumbprint = '9e99a48a9960b14926bb7f3b02e22da2b0ab7280'
                  resp = iam.create_open_id_connect_provider(Url=with_protocol,ClientIDList=['sts.amazonaws.com'],ThumbprintList=[issuer_thumbprint])
                  provider_arn = resp['OpenIDConnectProviderArn']
                  data["Reason"] = "Provider with ARN " + provider_arn + " created"
                else:
                  data["Reason"] = "Provider with ARN " + provider_arn + " already exists"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data, provider_arn)
              elif event['RequestType'] == 'Delete':
                provider_arn = event["PhysicalResourceId"]
                data["Reason"] = provider_arn + "NOT deleted"
                # if provider_arn is None:
                #   data["Reason"] = "Provider not present"
                #   cfnresponse.send(event, context, cfnresponse.SUCCESS, data, provider_arn)
                # else:
                #   resp = iam.delete_open_id_connect_provider(OpenIDConnectProviderArn=provider_arn)
                #   data["Reason"] = "Provider with ARN " + provider_arn + " deleted"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, data, provider_arn)
              else:
                data["Reason"] = "Unknown operation: " + event['RequestType']
                cfnresponse.send(event, context, cfnresponse.FAILED, data, "")
            except Exception as e:
              data["Reason"] = "Cannot " + event['RequestType'] + " Provider" + str(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, data, "")

  # AWS::IAM::Role This is the role that gives the stack sufficient permissions to create the OIDC provider. It is only
  # used during lifecycle operations of this stack
  ClusterOIDCLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: !Sub "arn:aws:eks:${AWS::Region}:${AWS::AccountId}:cluster/${EKSClusterName}"
              - Effect: Allow
                Action:
                  - iam:*OpenIDConnectProvider*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # role resource
  CrossAccountRole:
    Condition: CreateIAMPolicy
    Type: "AWS::IAM::Role"
    DependsOn: ClusterOIDCProvider
    Properties:
      Description: DoiT International EKS Metrics export
      RoleName: !Ref "RoleName"
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${OidcProviderEndpoint}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${IamOidcProviderArn}:aud": "sts.amazonaws.com",
                            "${IamOidcProviderArn}:sub": "system:serviceaccount:doit-eks-metrics:doit-collector"
                        }
                    }
                }
            ]
          }
        - {
            # "IamOidcProviderArn": !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/${EKSClusterName}',
            # "OidcProviderEndpoint": "oidc.eks.us-east-1.amazonaws.com/id/838CD4C82C1E964993BAB44CC0F11C9E"
            "IamOidcProviderArn": !Ref ClusterOIDCURL,
            "OidcProviderEndpoint": !Ref ClusterOIDCProvider,
          }

  # role resource2 - when policy exists
  CrossAccountRole2:
    Condition: CreateRoleOnly
    Type: "AWS::IAM::Role"
    DependsOn: ClusterOIDCProvider
    Properties:
      Description: DoiT International EKS Metrics export
      RoleName: !Ref "RoleName"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/doitintl_eks_s3"
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${OidcProviderEndpoint}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${IamOidcProviderArn}:aud": "sts.amazonaws.com",
                            "${IamOidcProviderArn}:sub": "system:serviceaccount:doit-eks-metrics:doit-collector"
                        }
                    }
                }
            ]
          }
        - {
            # "IamOidcProviderArn": !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/${EKSClusterName}',
            # "OidcProviderEndpoint": "oidc.eks.us-east-1.amazonaws.com/id/838CD4C82C1E964993BAB44CC0F11C9E"
            "IamOidcProviderArn": !Ref ClusterOIDCURL,
            "OidcProviderEndpoint": !Ref ClusterOIDCProvider,
          }

  # AllowAssume role
  DoitCrossAccountRole:
    Type: "AWS::IAM::Role"
    Condition: CreateIAMPolicy
    Properties:
      Description: DoiT International EKS Metrics Import
      RoleName: "doitintl_eks_import"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::068664126052:root
            Sid: "Management"
        Version: "2012-10-17"
      Path: "/"

  # create bucket for store metrics data
  EKSBucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateBucket
    Properties:
      BucketName: !Ref S3Bucket
      LifecycleConfiguration:
        Rules:
          - Id: ExpiredDocumentsRule
            Status: Enabled
            ExpirationInDays: 7
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # policy resource
  EksS3Policy:
    Condition: CreateIAMPolicy
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: doitintl_eks_s3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: S3BucketList
            Action:
              - s3:ListBucket
            Resource: !Sub
              - "arn:aws:s3:::doitintl-eks-metrics-*"
              - BucketName: !Ref S3Bucket
          - Effect: Allow
            Sid: S3BucketModify
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub
              - "arn:aws:s3:::doitintl-eks-metrics-*/*"
              - BucketName: !Ref S3Bucket
      Roles:
        - !Ref CrossAccountRole
        - !Ref DoitCrossAccountRole

  DoitCmpHook:
    Type: Custom::DoitCmpHook
    Properties:
      AccountID: !Ref "AWS::AccountId"
      ExternalID: !Ref "EKSClusterName"
      ServiceToken:
        Fn::Sub:
          - arn:aws:sns:${Region}:068664126052:doitintl-aws-connect
          - Region: !Ref "AWS::Region"
      NotificationUrl: "https://scheduled-tasks-dot-me-doit-intl-com.uc.r.appspot.com/webhooks/v1/eks-metrics/update-eks"
      EKSClusterName: !Ref "EKSClusterName"
      # DoitNamespace: !Ref 'DoitNamespace'
      DoitNamespace: "doit-eks-metrics"
      # EksServiceAccount: !Ref 'EksServiceAccount'
      EksServiceAccount: "doit-collector"
      # PolicyName: !Ref 'PolicyName'
      RoleName: !Ref "RoleName"
      PolicyName: "doitintl_eks_metrics"
      S3Bucket: !Ref "S3Bucket"
      ClusterOIDCProvider: !Ref "ClusterOIDCProvider"
    Version: "1.0"

Outputs:
  RoleName:
    Condition: CreateIAMPolicy
    Value: !Ref CrossAccountRole
  RoleArn:
    Condition: CreateIAMPolicy
    Value: !GetAtt CrossAccountRole.Arn
  ClusterOIDCURL:
    Description: The OpenID Connect URL (without protocol)
    Value: !Ref ClusterOIDCURL
  ClusterOIDCProvider:
    Description: The ARN of the OIDC Provider
    Value: !Ref ClusterOIDCProvider
