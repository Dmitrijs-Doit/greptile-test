// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	payermanager "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/payermanager"
	mock "github.com/stretchr/testify/mock"

	types "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/types"

	utils "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/utils"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetPayer provides a mock function with given fields: ctx, accountID
func (_m *Service) GetPayer(ctx context.Context, accountID string) (types.PayerConfig, error) {
	ret := _m.Called(ctx, accountID)

	var r0 types.PayerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.PayerConfig, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.PayerConfig); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(types.PayerConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayerStatusTransition provides a mock function with given fields: ctx, accountID, customerID, initialStatus, targetStatus, flexsaveType
func (_m *Service) ProcessPayerStatusTransition(ctx context.Context, accountID string, customerID string, initialStatus string, targetStatus string, flexsaveType utils.FlexsaveType) error {
	ret := _m.Called(ctx, accountID, customerID, initialStatus, targetStatus, flexsaveType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, utils.FlexsaveType) error); ok {
		r0 = rf(ctx, accountID, customerID, initialStatus, targetStatus, flexsaveType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNonStatusPayerConfigFields provides a mock function with given fields: ctx, payer, entry
func (_m *Service) UpdateNonStatusPayerConfigFields(ctx context.Context, payer types.PayerConfig, entry payermanager.FormEntry) error {
	ret := _m.Called(ctx, payer, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PayerConfig, payermanager.FormEntry) error); ok {
		r0 = rf(ctx, payer, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
