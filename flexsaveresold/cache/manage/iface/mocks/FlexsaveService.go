// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"
)

// FlexsaveService is an autogenerated mock type for the FlexsaveService type
type FlexsaveService struct {
	mock.Mock
}

// CreateForSingleCustomer provides a mock function with given fields: ctx, customerID
func (_m *FlexsaveService) RunCacheForSingleCustomer(ctx context.Context, customerID string) (*pkg.FlexsaveSavings, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *pkg.FlexsaveSavings

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*pkg.FlexsaveSavings, error)); ok {
		return rf(ctx, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.FlexsaveSavings); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.FlexsaveSavings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFlexsaveService creates a new instance of FlexsaveService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlexsaveService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlexsaveService {
	mock := &FlexsaveService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
