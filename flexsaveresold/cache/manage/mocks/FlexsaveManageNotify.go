// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/monitoring/domain"

	mock "github.com/stretchr/testify/mock"
)

// FlexsaveManageNotify is an autogenerated mock type for the FlexsaveManageNotify type
type FlexsaveManageNotify struct {
	mock.Mock
}

// NotifyAboutPayerConfigSet provides a mock function with given fields: ctx, primaryDomain, accountID
func (_m *FlexsaveManageNotify) NotifyAboutPayerConfigSet(ctx context.Context, primaryDomain string, accountID string) error {
	ret := _m.Called(ctx, primaryDomain, accountID)

	if len(ret) == 0 {
		panic("no return value specified for NotifyAboutPayerConfigSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, primaryDomain, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyPayerUnsubscriptionDueToCredits provides a mock function with given fields: ctx, primaryDomain, accountID
func (_m *FlexsaveManageNotify) NotifyPayerUnsubscriptionDueToCredits(ctx context.Context, primaryDomain string, accountID string) error {
	ret := _m.Called(ctx, primaryDomain, accountID)

	if len(ret) == 0 {
		panic("no return value specified for NotifyPayerUnsubscriptionDueToCredits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, primaryDomain, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifySharedPayerSavingsDiscrepancies provides a mock function with given fields: ctx, discrepancies
func (_m *FlexsaveManageNotify) NotifySharedPayerSavingsDiscrepancies(ctx context.Context, discrepancies domain.SharedPayerSavingsDiscrepancies) error {
	ret := _m.Called(ctx, discrepancies)

	if len(ret) == 0 {
		panic("no return value specified for NotifySharedPayerSavingsDiscrepancies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.SharedPayerSavingsDiscrepancies) error); ok {
		r0 = rf(ctx, discrepancies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendActivatedNotification provides a mock function with given fields: ctx, customerID, nextMonthHourlyCommitment, accounts
func (_m *FlexsaveManageNotify) SendActivatedNotification(ctx context.Context, customerID string, nextMonthHourlyCommitment *float64, accounts []string) error {
	ret := _m.Called(ctx, customerID, nextMonthHourlyCommitment, accounts)

	if len(ret) == 0 {
		panic("no return value specified for SendActivatedNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *float64, []string) error); ok {
		r0 = rf(ctx, customerID, nextMonthHourlyCommitment, accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendRDSActivatedNotification provides a mock function with given fields: ctx, customerID, accounts
func (_m *FlexsaveManageNotify) SendRDSActivatedNotification(ctx context.Context, customerID string, accounts []string) error {
	ret := _m.Called(ctx, customerID, accounts)

	if len(ret) == 0 {
		panic("no return value specified for SendRDSActivatedNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, customerID, accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSageMakerActivatedNotification provides a mock function with given fields: ctx, customerID, accounts
func (_m *FlexsaveManageNotify) SendSageMakerActivatedNotification(ctx context.Context, customerID string, accounts []string) error {
	ret := _m.Called(ctx, customerID, accounts)

	if len(ret) == 0 {
		panic("no return value specified for SendSageMakerActivatedNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, customerID, accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWelcomeEmail provides a mock function with given fields: ctx, customerID
func (_m *FlexsaveManageNotify) SendWelcomeEmail(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for SendWelcomeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFlexsaveManageNotify creates a new instance of FlexsaveManageNotify. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlexsaveManageNotify(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlexsaveManageNotify {
	mock := &FlexsaveManageNotify{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
