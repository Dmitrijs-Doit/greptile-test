// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bq "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/cache/bigquery"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"

	time "time"

	types "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/types"
)

// BigQueryServiceInterface is an autogenerated mock type for the BigQueryServiceInterface type
type BigQueryServiceInterface struct {
	mock.Mock
}

// CheckActiveBillingTableExists provides a mock function with given fields: ctx, chCustomerID
func (_m *BigQueryServiceInterface) CheckActiveBillingTableExists(ctx context.Context, chCustomerID string) error {
	ret := _m.Called(ctx, chCustomerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, chCustomerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckIfPayerHasRecentActiveCredits provides a mock function with given fields: ctx, customerID, payerID
func (_m *BigQueryServiceInterface) CheckIfPayerHasRecentActiveCredits(ctx context.Context, customerID string, payerID string) (bool, error) {
	ret := _m.Called(ctx, customerID, payerID)

	var r0 bool

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, customerID, payerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, customerID, payerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, payerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSSupportedSKUs provides a mock function with given fields: ctx
func (_m *BigQueryServiceInterface) GetAWSSupportedSKUs(ctx context.Context) ([]bq.AWSSupportedSKU, error) {
	ret := _m.Called(ctx)

	var r0 []bq.AWSSupportedSKU

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]bq.AWSSupportedSKU, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []bq.AWSSupportedSKU); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bq.AWSSupportedSKU)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerCredits provides a mock function with given fields: ctx, customerID, now
func (_m *BigQueryServiceInterface) GetCustomerCredits(ctx context.Context, customerID string, now time.Time) bq.CreditsResult {
	ret := _m.Called(ctx, customerID, now)

	var r0 bq.CreditsResult
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) bq.CreditsResult); ok {
		r0 = rf(ctx, customerID, now)
	} else {
		r0 = ret.Get(0).(bq.CreditsResult)
	}

	return r0
}

// GetCustomerOnDemand provides a mock function with given fields: params, query, monthlyOnDemand, errChan
func (_m *BigQueryServiceInterface) GetCustomerOnDemand(params bq.BigQueryParams, query string, monthlyOnDemand chan map[string]float64, errChan chan error) {
	_m.Called(params, query, monthlyOnDemand, errChan)
}

// GetCustomerSavings provides a mock function with given fields: params, query, monthlySavings, errChan
func (_m *BigQueryServiceInterface) GetCustomerSavings(params bq.BigQueryParams, query string, monthlySavings chan map[string]float64, errChan chan error) {
	_m.Called(params, query, monthlySavings, errChan)
}

// GetCustomerSavingsPlanData provides a mock function with given fields: ctx, customerID
func (_m *BigQueryServiceInterface) GetCustomerSavingsPlanData(ctx context.Context, customerID string) ([]types.SavingsPlanData, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []types.SavingsPlanData

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.SavingsPlanData, error)); ok {
		return rf(ctx, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) []types.SavingsPlanData); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SavingsPlanData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayerDailySpendSummary provides a mock function with given fields: _a0
func (_m *BigQueryServiceInterface) GetPayerDailySpendSummary(_a0 bq.DailyBQParams) (map[string]*pkg.FlexsaveMonthSummary, error) {
	ret := _m.Called(_a0)

	var r0 map[string]*pkg.FlexsaveMonthSummary

	var r1 error

	if rf, ok := ret.Get(0).(func(bq.DailyBQParams) (map[string]*pkg.FlexsaveMonthSummary, error)); ok {
		return rf(_a0)
	}

	if rf, ok := ret.Get(0).(func(bq.DailyBQParams) map[string]*pkg.FlexsaveMonthSummary); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pkg.FlexsaveMonthSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(bq.DailyBQParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayerSpendSummary provides a mock function with given fields: _a0
func (_m *BigQueryServiceInterface) GetPayerSpendSummary(_a0 bq.BigQueryParams) (map[string]*pkg.FlexsaveMonthSummary, error) {
	ret := _m.Called(_a0)

	var r0 map[string]*pkg.FlexsaveMonthSummary

	var r1 error

	if rf, ok := ret.Get(0).(func(bq.BigQueryParams) (map[string]*pkg.FlexsaveMonthSummary, error)); ok {
		return rf(_a0)
	}

	if rf, ok := ret.Get(0).(func(bq.BigQueryParams) map[string]*pkg.FlexsaveMonthSummary); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pkg.FlexsaveMonthSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(bq.BigQueryParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSharedPayerOndemandMonthlyData provides a mock function with given fields: ctx, customerID, startDate, endDate
func (_m *BigQueryServiceInterface) GetSharedPayerOndemandMonthlyData(ctx context.Context, customerID string, startDate string, endDate string) ([]types.SharedPayerOndemandMonthlyData, error) {
	ret := _m.Called(ctx, customerID, startDate, endDate)

	var r0 []types.SharedPayerOndemandMonthlyData

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]types.SharedPayerOndemandMonthlyData, error)); ok {
		return rf(ctx, customerID, startDate, endDate)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []types.SharedPayerOndemandMonthlyData); ok {
		r0 = rf(ctx, customerID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SharedPayerOndemandMonthlyData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBigQueryServiceInterface creates a new instance of BigQueryServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigQueryServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BigQueryServiceInterface {
	mock := &BigQueryServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
