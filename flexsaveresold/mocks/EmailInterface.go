// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/types"
)

// EmailInterface is an autogenerated mock type for the EmailInterface type
type EmailInterface struct {
	mock.Mock
}

// SendWelcomeEmail provides a mock function with given fields: ctx, params, usersWithPermissions, accountManagers
func (_m *EmailInterface) SendWelcomeEmail(ctx context.Context, params *types.WelcomeEmailParams, usersWithPermissions []*common.User, accountManagers []*common.AccountManager) error {
	ret := _m.Called(ctx, params, usersWithPermissions, accountManagers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.WelcomeEmailParams, []*common.User, []*common.AccountManager) error); ok {
		r0 = rf(ctx, params, usersWithPermissions, accountManagers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEmailInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmailInterface creates a new instance of EmailInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmailInterface(t mockConstructorTestingTNewEmailInterface) *EmailInterface {
	mock := &EmailInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
