// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	flexapi "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/flexapi"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FlexAPI is an autogenerated mock type for the FlexAPI type
type FlexAPI struct {
	mock.Mock
}

// GetRDSPayerRecommendations provides a mock function with given fields: ctx, payerID
func (_m *FlexAPI) GetRDSPayerRecommendations(ctx context.Context, payerID string) ([]flexapi.RDSBottomUpRecommendation, error) {
	ret := _m.Called(ctx, payerID)

	var r0 []flexapi.RDSBottomUpRecommendation

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) ([]flexapi.RDSBottomUpRecommendation, error)); ok {
		return rf(ctx, payerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) []flexapi.RDSBottomUpRecommendation); ok {
		r0 = rf(ctx, payerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flexapi.RDSBottomUpRecommendation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListARNs provides a mock function with given fields: ctx
func (_m *FlexAPI) ListARNs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlexsaveAccounts provides a mock function with given fields: ctx
func (_m *FlexAPI) ListFlexsaveAccounts(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlexsaveAccountsWithCache provides a mock function with given fields: ctx, refreshTime
func (_m *FlexAPI) ListFlexsaveAccountsWithCache(ctx context.Context, refreshTime time.Duration) ([]string, error) {
	ret := _m.Called(ctx, refreshTime)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) ([]string, error)); ok {
		return rf(ctx, refreshTime)
	}

	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) []string); ok {
		r0 = rf(ctx, refreshTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, refreshTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFullFlexsaveAccounts provides a mock function with given fields: ctx
func (_m *FlexAPI) ListFullFlexsaveAccounts(ctx context.Context) ([]*flexapi.Account, error) {
	ret := _m.Called(ctx)

	var r0 []*flexapi.Account

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]*flexapi.Account, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []*flexapi.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*flexapi.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFlexAPI creates a new instance of FlexAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlexAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlexAPI {
	mock := &FlexAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
