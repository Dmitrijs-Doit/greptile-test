// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/types"

	utils "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/utils"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreatePayerConfigForCustomer provides a mock function with given fields: ctx, payload
func (_m *Service) CreatePayerConfigForCustomer(ctx context.Context, payload types.PayerConfigCreatePayload) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PayerConfigCreatePayload) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAWSStandaloneCustomerIDs provides a mock function with given fields: ctx
func (_m *Service) GetAWSStandaloneCustomerIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}

	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayerConfig provides a mock function with given fields: ctx, accountID
func (_m *Service) GetPayerConfig(ctx context.Context, accountID string) (*types.PayerConfig, error) {
	ret := _m.Called(ctx, accountID)

	var r0 *types.PayerConfig

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.PayerConfig, error)); ok {
		return rf(ctx, accountID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *types.PayerConfig); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PayerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayerConfigsForCustomer provides a mock function with given fields: ctx, customerID
func (_m *Service) GetPayerConfigsForCustomer(ctx context.Context, customerID string) ([]*types.PayerConfig, error) {
	ret := _m.Called(ctx, customerID)

	var r0 []*types.PayerConfig

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*types.PayerConfig, error)); ok {
		return rf(ctx, customerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) []*types.PayerConfig); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.PayerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeCustomerPayerAccount provides a mock function with given fields: ctx, payerAccountID
func (_m *Service) UnsubscribeCustomerPayerAccount(ctx context.Context, payerAccountID string) error {
	ret := _m.Called(ctx, payerAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, payerAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayerConfigsForCustomer provides a mock function with given fields: ctx, configs
func (_m *Service) UpdatePayerConfigsForCustomer(ctx context.Context, configs []types.PayerConfig) ([]types.PayerConfig, error) {
	ret := _m.Called(ctx, configs)

	var r0 []types.PayerConfig

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, []types.PayerConfig) ([]types.PayerConfig, error)); ok {
		return rf(ctx, configs)
	}

	if rf, ok := ret.Get(0).(func(context.Context, []types.PayerConfig) []types.PayerConfig); ok {
		r0 = rf(ctx, configs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PayerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.PayerConfig) error); ok {
		r1 = rf(ctx, configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusWithRequired provides a mock function with given fields: ctx, accountID, serviceType, serviceStatus
func (_m *Service) UpdateStatusWithRequired(ctx context.Context, accountID string, serviceType utils.FlexsaveType, serviceStatus string) error {
	ret := _m.Called(ctx, accountID, serviceType, serviceStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, utils.FlexsaveType, string) error); ok {
		r0 = rf(ctx, accountID, serviceType, serviceStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
