// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	recommendations "github.com/doitintl/hello/scheduled-tasks/flexsaveresold/flexapi/recommendations"
	mock "github.com/stretchr/testify/mock"
)

// Recommendations is an autogenerated mock type for the Recommendations type
type Recommendations struct {
	mock.Mock
}

// FetchComputeRecommendations provides a mock function with given fields: ctx, payerID, nowTime
func (_m *Recommendations) FetchComputeRecommendations(ctx context.Context, payerID string, nowTime time.Time) (*recommendations.RecommendationForDedicatedPayerResponse, error) {
	ret := _m.Called(ctx, payerID, nowTime)

	var r0 *recommendations.RecommendationForDedicatedPayerResponse

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (*recommendations.RecommendationForDedicatedPayerResponse, error)); ok {
		return rf(ctx, payerID, nowTime)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *recommendations.RecommendationForDedicatedPayerResponse); ok {
		r0 = rf(ctx, payerID, nowTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*recommendations.RecommendationForDedicatedPayerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, payerID, nowTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchSageMakerRecommendation provides a mock function with given fields: ctx, payerID
func (_m *Recommendations) FetchSageMakerRecommendation(ctx context.Context, payerID string) (*recommendations.SageMakerRecommendationPayerResponse, error) {
	ret := _m.Called(ctx, payerID)

	var r0 *recommendations.SageMakerRecommendationPayerResponse

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*recommendations.SageMakerRecommendationPayerResponse, error)); ok {
		return rf(ctx, payerID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *recommendations.SageMakerRecommendationPayerResponse); ok {
		r0 = rf(ctx, payerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*recommendations.SageMakerRecommendationPayerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecommendations creates a new instance of Recommendations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecommendations(t interface {
	mock.TestingT
	Cleanup(func())
}) *Recommendations {
	mock := &Recommendations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
