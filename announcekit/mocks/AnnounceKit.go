// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	announcekit "github.com/doitintl/hello/scheduled-tasks/announcekit"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AnnounceKit is an autogenerated mock type for the AnnounceKit type
type AnnounceKit struct {
	mock.Mock
}

// CreateAuthToken provides a mock function with given fields: ctx, userClaims
func (_m *AnnounceKit) CreateAuthToken(ctx context.Context, userClaims *announcekit.JwtUserClaims) (string, error) {
	ret := _m.Called(ctx, userClaims)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *announcekit.JwtUserClaims) string); ok {
		r0 = rf(ctx, userClaims)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *announcekit.JwtUserClaims) error); ok {
		r1 = rf(ctx, userClaims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeLogs provides a mock function with given fields: ctx, startDate
func (_m *AnnounceKit) GetChangeLogs(ctx context.Context, startDate time.Time) (announcekit.AnnoucekitFeed, error) {
	ret := _m.Called(ctx, startDate)

	var r0 announcekit.AnnoucekitFeed
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) announcekit.AnnoucekitFeed); ok {
		r0 = rf(ctx, startDate)
	} else {
		r0 = ret.Get(0).(announcekit.AnnoucekitFeed)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAnnounceKit interface {
	mock.TestingT
	Cleanup(func())
}

// NewAnnounceKit creates a new instance of AnnounceKit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAnnounceKit(t mockConstructorTestingTNewAnnounceKit) *AnnounceKit {
	mock := &AnnounceKit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
