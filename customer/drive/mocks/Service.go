// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	drive "github.com/doitintl/hello/scheduled-tasks/customer/drive"
	mock "github.com/stretchr/testify/mock"
	docs "google.golang.org/api/docs/v1"

	sheets "google.golang.org/api/sheets/v4"

	v3 "google.golang.org/api/drive/v3"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddDataToSpreadsheet provides a mock function with given fields: spreadsheet, rowData
func (_m *Service) AddDataToSpreadsheet(spreadsheet *sheets.Spreadsheet, rowData map[int64]*[][]interface{}) error {
	ret := _m.Called(spreadsheet, rowData)

	if len(ret) == 0 {
		panic("no return value specified for AddDataToSpreadsheet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sheets.Spreadsheet, map[int64]*[][]interface{}) error); ok {
		r0 = rf(spreadsheet, rowData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPermissionsToSheet provides a mock function with given fields: writePermissionsUser, file
func (_m *Service) AddPermissionsToSheet(writePermissionsUser string, file *v3.File) error {
	ret := _m.Called(writePermissionsUser, file)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionsToSheet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *v3.File) error); ok {
		r0 = rf(writePermissionsUser, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyFile provides a mock function with given fields: srcDocID, destFolderID, destFileName
func (_m *Service) CopyFile(srcDocID string, destFolderID string, destFileName string) (string, error) {
	ret := _m.Called(srcDocID, destFolderID, destFileName)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(srcDocID, destFolderID, destFileName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(srcDocID, destFolderID, destFileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(srcDocID, destFolderID, destFileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFolder provides a mock function with given fields: parentFolderID, folderName
func (_m *Service) CreateFolder(parentFolderID string, folderName string) (string, error) {
	ret := _m.Called(parentFolderID, folderName)

	if len(ret) == 0 {
		panic("no return value specified for CreateFolder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(parentFolderID, folderName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(parentFolderID, folderName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(parentFolderID, folderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSheet provides a mock function with given fields: sheetName, parentFolderID, teamDriveID
func (_m *Service) CreateSheet(sheetName string, parentFolderID string, teamDriveID string) (*v3.File, error) {
	ret := _m.Called(sheetName, parentFolderID, teamDriveID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSheet")
	}

	var r0 *v3.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*v3.File, error)); ok {
		return rf(sheetName, parentFolderID, teamDriveID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *v3.File); ok {
		r0 = rf(sheetName, parentFolderID, teamDriveID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v3.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(sheetName, parentFolderID, teamDriveID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSingleInvoicesFolder provides a mock function with given fields: parentFolderID, assetType, invoiceMonth
func (_m *Service) CreateSingleInvoicesFolder(parentFolderID string, assetType string, invoiceMonth string) (string, error) {
	ret := _m.Called(parentFolderID, assetType, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for CreateSingleInvoicesFolder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(parentFolderID, assetType, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(parentFolderID, assetType, invoiceMonth)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(parentFolderID, assetType, invoiceMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateYearMonthFolderStructure provides a mock function with given fields: parentFolderID, invoiceMonth
func (_m *Service) CreateYearMonthFolderStructure(parentFolderID string, invoiceMonth string) (string, error) {
	ret := _m.Called(parentFolderID, invoiceMonth)

	if len(ret) == 0 {
		panic("no return value specified for CreateYearMonthFolderStructure")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(parentFolderID, invoiceMonth)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(parentFolderID, invoiceMonth)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(parentFolderID, invoiceMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteBatchUpdate provides a mock function with given fields: docID, batchUpdate
func (_m *Service) ExecuteBatchUpdate(docID string, batchUpdate *docs.BatchUpdateDocumentRequest) error {
	ret := _m.Called(docID, batchUpdate)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteBatchUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *docs.BatchUpdateDocumentRequest) error); ok {
		r0 = rf(docID, batchUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportFileAsPDF provides a mock function with given fields: docID
func (_m *Service) ExportFileAsPDF(docID string) ([]byte, error) {
	ret := _m.Called(docID)

	if len(ret) == 0 {
		panic("no return value specified for ExportFileAsPDF")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(docID)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(docID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFile provides a mock function with given fields: folderID, fileName
func (_m *Service) FindFile(folderID string, fileName string) (string, error) {
	ret := _m.Called(folderID, fileName)

	if len(ret) == 0 {
		panic("no return value specified for FindFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(folderID, fileName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(folderID, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(folderID, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFolder provides a mock function with given fields: folderID, folderName
func (_m *Service) FindFolder(folderID string, folderName string) (string, error) {
	ret := _m.Called(folderID, folderName)

	if len(ret) == 0 {
		panic("no return value specified for FindFolder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(folderID, folderName)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(folderID, folderName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(folderID, folderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSheetName provides a mock function with given fields: sheet, sheetID
func (_m *Service) GetSheetName(sheet []*sheets.Sheet, sheetID int64) (string, error) {
	ret := _m.Called(sheet, sheetID)

	if len(ret) == 0 {
		panic("no return value specified for GetSheetName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]*sheets.Sheet, int64) (string, error)); ok {
		return rf(sheet, sheetID)
	}
	if rf, ok := ret.Get(0).(func([]*sheets.Sheet, int64) string); ok {
		r0 = rf(sheet, sheetID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]*sheets.Sheet, int64) error); ok {
		r1 = rf(sheet, sheetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessInvoiceSheets provides a mock function with given fields: file, invoiceSheets, extendedMode
func (_m *Service) ProcessInvoiceSheets(file *v3.File, invoiceSheets []drive.SheetInfo, extendedMode bool) (*sheets.Spreadsheet, map[int64]*[][]interface{}, error) {
	ret := _m.Called(file, invoiceSheets, extendedMode)

	if len(ret) == 0 {
		panic("no return value specified for ProcessInvoiceSheets")
	}

	var r0 *sheets.Spreadsheet
	var r1 map[int64]*[][]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(*v3.File, []drive.SheetInfo, bool) (*sheets.Spreadsheet, map[int64]*[][]interface{}, error)); ok {
		return rf(file, invoiceSheets, extendedMode)
	}
	if rf, ok := ret.Get(0).(func(*v3.File, []drive.SheetInfo, bool) *sheets.Spreadsheet); ok {
		r0 = rf(file, invoiceSheets, extendedMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.Spreadsheet)
		}
	}

	if rf, ok := ret.Get(1).(func(*v3.File, []drive.SheetInfo, bool) map[int64]*[][]interface{}); ok {
		r1 = rf(file, invoiceSheets, extendedMode)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[int64]*[][]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(*v3.File, []drive.SheetInfo, bool) error); ok {
		r2 = rf(file, invoiceSheets, extendedMode)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
