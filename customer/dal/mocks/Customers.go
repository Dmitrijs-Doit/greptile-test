// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	domain "github.com/doitintl/hello/scheduled-tasks/customer/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	pkg "github.com/doitintl/firestore/pkg"
)

// Customers is an autogenerated mock type for the Customers type
type Customers struct {
	mock.Mock
}

// DeleteCustomer provides a mock function with given fields: ctx, customerID
func (_m *Customers) DeleteCustomer(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAWSCustomers provides a mock function with given fields: ctx
func (_m *Customers) GetAWSCustomers(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSCustomers")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCustomerIDs provides a mock function with given fields: ctx
func (_m *Customers) GetAllCustomerIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomerIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCustomerRefs provides a mock function with given fields: ctx
func (_m *Customers) GetAllCustomerRefs(ctx context.Context) ([]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomerRefs")
	}

	var r0 []*firestore.DocumentRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentRef, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentRef); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudhealthCustomers provides a mock function with given fields: ctx, customerRef
func (_m *Customers) GetCloudhealthCustomers(ctx context.Context, customerRef *firestore.DocumentRef) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudhealthCustomers")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomer provides a mock function with given fields: ctx, customerID
func (_m *Customers) GetCustomer(ctx context.Context, customerID string) (*common.Customer, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomer")
	}

	var r0 *common.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.Customer, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *common.Customer); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerAWSAccountConfiguration provides a mock function with given fields: ctx, customerRef
func (_m *Customers) GetCustomerAWSAccountConfiguration(ctx context.Context, customerRef *firestore.DocumentRef) (*common.AWSSettings, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerAWSAccountConfiguration")
	}

	var r0 *common.AWSSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) (*common.AWSSettings, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) *common.AWSSettings); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.AWSSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerAccountTeam provides a mock function with given fields: ctx, customerID
func (_m *Customers) GetCustomerAccountTeam(ctx context.Context, customerID string) ([]domain.AccountManagerListItem, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerAccountTeam")
	}

	var r0 []domain.AccountManagerListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.AccountManagerListItem, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.AccountManagerListItem); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AccountManagerListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerOrPresentationModeCustomer provides a mock function with given fields: ctx, customerID
func (_m *Customers) GetCustomerOrPresentationModeCustomer(ctx context.Context, customerID string) (*common.Customer, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerOrPresentationModeCustomer")
	}

	var r0 *common.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.Customer, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *common.Customer); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerOrgs provides a mock function with given fields: ctx, customerID, orgID
func (_m *Customers) GetCustomerOrgs(ctx context.Context, customerID string, orgID string) ([]*common.Organization, error) {
	ret := _m.Called(ctx, customerID, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerOrgs")
	}

	var r0 []*common.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*common.Organization, error)); ok {
		return rf(ctx, customerID, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*common.Organization); ok {
		r0 = rf(ctx, customerID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: ctx
func (_m *Customers) GetCustomers(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomers")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersByIDs provides a mock function with given fields: ctx, ids
func (_m *Customers) GetCustomersByIDs(ctx context.Context, ids []string) ([]*common.Customer, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomersByIDs")
	}

	var r0 []*common.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*common.Customer, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*common.Customer); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomersByTier provides a mock function with given fields: ctx, trialTierRef, packageType
func (_m *Customers) GetCustomersByTier(ctx context.Context, trialTierRef *firestore.DocumentRef, packageType pkg.PackageTierType) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx, trialTierRef, packageType)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomersByTier")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, pkg.PackageTierType) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx, trialTierRef, packageType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef, pkg.PackageTierType) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx, trialTierRef, packageType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef, pkg.PackageTierType) error); ok {
		r1 = rf(ctx, trialTierRef, packageType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDemoCustomers provides a mock function with given fields: ctx
func (_m *Customers) GetDemoCustomers(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDemoCustomers")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresentationCustomersWithAssetType provides a mock function with given fields: ctx, assetType
func (_m *Customers) GetPresentationCustomersWithAssetType(ctx context.Context, assetType string) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDemoCustomers")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMSAzureCustomers provides a mock function with given fields: ctx
func (_m *Customers) GetMSAzureCustomers(ctx context.Context) ([]*firestore.DocumentSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMSAzureCustomers")
	}

	var r0 []*firestore.DocumentSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*firestore.DocumentSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*firestore.DocumentSnapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresentationCustomers provides a mock function with given fields: ctx
func (_m *Customers) GetPresentationCustomers(ctx context.Context) ([]*common.Customer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPresentationCustomers")
	}

	var r0 []*common.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*common.Customer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*common.Customer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrimaryDomain provides a mock function with given fields: ctx, customerID
func (_m *Customers) GetPrimaryDomain(ctx context.Context, customerID string) (string, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrimaryDomain")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, ID
func (_m *Customers) GetRef(ctx context.Context, ID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// UpdateCustomerFieldValue provides a mock function with given fields: ctx, customerID, fieldPath, value
func (_m *Customers) UpdateCustomerFieldValue(ctx context.Context, customerID string, fieldPath string, value interface{}) error {
	ret := _m.Called(ctx, customerID, fieldPath, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomerFieldValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, customerID, fieldPath, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCustomerFieldValueDeep provides a mock function with given fields: ctx, customerID, fieldPath, value
func (_m *Customers) UpdateCustomerFieldValueDeep(ctx context.Context, customerID string, fieldPath []string, value interface{}) error {
	ret := _m.Called(ctx, customerID, fieldPath, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomerFieldValueDeep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, interface{}) error); ok {
		r0 = rf(ctx, customerID, fieldPath, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCustomers creates a new instance of Customers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomers(t interface {
	mock.TestingT
	Cleanup(func())
}) *Customers {
	mock := &Customers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
