// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/customer/domain"
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// ICustomerService is an autogenerated mock type for the ICustomerService type
type ICustomerService struct {
	mock.Mock
}

// ClearCustomerUsersNotifications provides a mock function with given fields: ctx, customerID
func (_m *ICustomerService) ClearCustomerUsersNotifications(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for ClearCustomerUsersNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, customerID, execute
func (_m *ICustomerService) Delete(ctx context.Context, customerID string, execute bool) error {
	ret := _m.Called(ctx, customerID, execute)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, customerID, execute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAccountManagers provides a mock function with given fields: ctx, customerID
func (_m *ICustomerService) ListAccountManagers(ctx context.Context, customerID string) (*domain.AccountManagerListAPI, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountManagers")
	}

	var r0 *domain.AccountManagerListAPI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.AccountManagerListAPI, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AccountManagerListAPI); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccountManagerListAPI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreCustomerUsersNotifications provides a mock function with given fields: ctx, customerID
func (_m *ICustomerService) RestoreCustomerUsersNotifications(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for RestoreCustomerUsersNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomerAssetTypes provides a mock function with given fields: ctx
func (_m *ICustomerService) SetCustomerAssetTypes(ctx *gin.Context) {
	_m.Called(ctx)
}

// UpdateAllCustomersSegment provides a mock function with given fields: ctx
func (_m *ICustomerService) UpdateAllCustomersSegment(ctx context.Context) ([]error, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAllCustomersSegment")
	}

	var r0 []error
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]error, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegment provides a mock function with given fields: ctx, customerID
func (_m *ICustomerService) UpdateSegment(ctx context.Context, customerID string) error {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, customerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICustomerService creates a new instance of ICustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICustomerService {
	mock := &ICustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
