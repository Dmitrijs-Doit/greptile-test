// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/microsoft/license/dal"
	domain "github.com/doitintl/hello/scheduled-tasks/microsoft/license/domain"

	firestore "cloud.google.com/go/firestore"

	iface "github.com/doitintl/firestore/iface"

	microsoft "github.com/doitintl/hello/scheduled-tasks/microsoft"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ILicense is an autogenerated mock type for the ILicense type
type ILicense struct {
	mock.Mock
}

// AddLog provides a mock function with given fields: ctx, log
func (_m *ILicense) AddLog(ctx context.Context, log map[string]interface{}) (*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, log)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *firestore.DocumentRef); ok {
		r0 = rf(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssetForSubscription provides a mock function with given fields: ctx, props, sub, item
func (_m *ILicense) CreateAssetForSubscription(ctx context.Context, props *microsoft.CreateAssetProps, sub *microsoft.SubscriptionWithStatus, item *domain.CatalogItem) (*microsoft.Asset, error) {
	ret := _m.Called(ctx, props, sub, item)

	var r0 *microsoft.Asset
	if rf, ok := ret.Get(0).(func(context.Context, *microsoft.CreateAssetProps, *microsoft.SubscriptionWithStatus, *domain.CatalogItem) *microsoft.Asset); ok {
		r0 = rf(ctx, props, sub, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Asset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *microsoft.CreateAssetProps, *microsoft.SubscriptionWithStatus, *domain.CatalogItem) error); ok {
		r1 = rf(ctx, props, sub, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCatalogItem provides a mock function with given fields: ctx, itemPath
func (_m *ILicense) GetCatalogItem(ctx context.Context, itemPath string) (*domain.CatalogItem, error) {
	ret := _m.Called(ctx, itemPath)

	var r0 *domain.CatalogItem
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.CatalogItem); ok {
		r0 = rf(ctx, itemPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CatalogItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, itemPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoc provides a mock function with given fields: ctx, collection, docID
func (_m *ILicense) GetDoc(ctx context.Context, collection dal.CollectionType, docID string) (iface.DocumentSnapshot, error) {
	ret := _m.Called(ctx, collection, docID)

	var r0 iface.DocumentSnapshot
	if rf, ok := ret.Get(0).(func(context.Context, dal.CollectionType, string) iface.DocumentSnapshot); ok {
		r0 = rf(ctx, collection, docID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.DocumentSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dal.CollectionType, string) error); ok {
		r1 = rf(ctx, collection, docID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, collection, refID
func (_m *ILicense) GetRef(ctx context.Context, collection dal.CollectionType, refID string) (*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, collection, refID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, dal.CollectionType, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, collection, refID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dal.CollectionType, string) error); ok {
		r1 = rf(ctx, collection, refID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAsset provides a mock function with given fields: ctx, sub
func (_m *ILicense) UpdateAsset(ctx context.Context, sub *microsoft.Subscription) error {
	ret := _m.Called(ctx, sub)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *microsoft.Subscription) error); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAssetSyncStatus provides a mock function with given fields: ctx, assetID, syncing
func (_m *ILicense) UpdateAssetSyncStatus(ctx context.Context, assetID string, syncing bool) error {
	ret := _m.Called(ctx, assetID, syncing)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, assetID, syncing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewILicense creates a new instance of ILicense. It also registers a cleanup function to assert the mocks expectations.
func NewILicense(t testing.TB) *ILicense {
	mock := &ILicense{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
