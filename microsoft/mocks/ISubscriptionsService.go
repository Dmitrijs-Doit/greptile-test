// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	microsoft "github.com/doitintl/hello/scheduled-tasks/microsoft"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ISubscriptionsService is an autogenerated mock type for the ISubscriptionsService type
type ISubscriptionsService struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, customerID, beforeSub, quantity
func (_m *ISubscriptionsService) Activate(ctx context.Context, customerID string, beforeSub microsoft.Subscription, quantity int64) (*microsoft.SubscriptionWithStatus, error) {
	ret := _m.Called(ctx, customerID, beforeSub, quantity)

	var r0 *microsoft.SubscriptionWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, microsoft.Subscription, int64) *microsoft.SubscriptionWithStatus); ok {
		r0 = rf(ctx, customerID, beforeSub, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.SubscriptionWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, microsoft.Subscription, int64) error); ok {
		r1 = rf(ctx, customerID, beforeSub, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutCart provides a mock function with given fields: ctx, customerID, cartID
func (_m *ISubscriptionsService) CheckoutCart(ctx context.Context, customerID string, cartID string) (*microsoft.CheckedOutCart, error) {
	ret := _m.Called(ctx, customerID, cartID)

	var r0 *microsoft.CheckedOutCart
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *microsoft.CheckedOutCart); ok {
		r0 = rf(ctx, customerID, cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.CheckedOutCart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCart provides a mock function with given fields: ctx, customerID, catalogItemID, quantity
func (_m *ISubscriptionsService) CreateCart(ctx context.Context, customerID string, catalogItemID string, quantity int64) (*microsoft.Cart, error) {
	ret := _m.Called(ctx, customerID, catalogItemID, quantity)

	var r0 *microsoft.Cart
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *microsoft.Cart); ok {
		r0 = rf(ctx, customerID, catalogItemID, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, customerID, catalogItemID, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuantitySyncTask provides a mock function with given fields: ctx, customerID, subscriptionID, reseller, quantity
func (_m *ISubscriptionsService) CreateQuantitySyncTask(ctx context.Context, customerID string, subscriptionID string, reseller microsoft.CSPDomain, quantity int64) error {
	ret := _m.Called(ctx, customerID, subscriptionID, reseller, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, microsoft.CSPDomain, int64) error); ok {
		r0 = rf(ctx, customerID, subscriptionID, reseller, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, customerID, subscriptionID
func (_m *ISubscriptionsService) Get(ctx context.Context, customerID string, subscriptionID string) (*microsoft.Subscription, error) {
	ret := _m.Called(ctx, customerID, subscriptionID)

	var r0 *microsoft.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *microsoft.Subscription); ok {
		r0 = rf(ctx, customerID, subscriptionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, subscriptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailabilityForItem provides a mock function with given fields: ctx, customerID, catalogSkuID
func (_m *ISubscriptionsService) GetAvailabilityForItem(ctx context.Context, customerID string, catalogSkuID string) (*microsoft.Availabilities, error) {
	ret := _m.Called(ctx, customerID, catalogSkuID)

	var r0 *microsoft.Availabilities
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *microsoft.Availabilities); ok {
		r0 = rf(ctx, customerID, catalogSkuID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Availabilities)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, customerID, catalogSkuID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExistentSubscription provides a mock function with given fields: ctx, catalogItemID, licenceCustomerID
func (_m *ISubscriptionsService) GetExistentSubscription(ctx context.Context, catalogItemID string, licenceCustomerID string) (*microsoft.Subscription, error) {
	ret := _m.Called(ctx, catalogItemID, licenceCustomerID)

	var r0 *microsoft.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *microsoft.Subscription); ok {
		r0 = rf(ctx, catalogItemID, licenceCustomerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, catalogItemID, licenceCustomerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSKUByProduct provides a mock function with given fields: ctx, customerID, SkuID, productID
func (_m *ISubscriptionsService) GetSKUByProduct(ctx context.Context, customerID string, SkuID string, productID string) (*microsoft.SKU, error) {
	ret := _m.Called(ctx, customerID, SkuID, productID)

	var r0 *microsoft.SKU
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *microsoft.SKU); ok {
		r0 = rf(ctx, customerID, SkuID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.SKU)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerID, SkuID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomerSubscriptions provides a mock function with given fields: ctx, customerID
func (_m *ISubscriptionsService) ListCustomerSubscriptions(ctx context.Context, customerID string) (*microsoft.Subscriptions, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *microsoft.Subscriptions
	if rf, ok := ret.Get(0).(func(context.Context, string) *microsoft.Subscriptions); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Subscriptions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Suspend provides a mock function with given fields: ctx, customerID, beforeSub
func (_m *ISubscriptionsService) Suspend(ctx context.Context, customerID string, beforeSub microsoft.Subscription) (*microsoft.SubscriptionWithStatus, error) {
	ret := _m.Called(ctx, customerID, beforeSub)

	var r0 *microsoft.SubscriptionWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, microsoft.Subscription) *microsoft.SubscriptionWithStatus); ok {
		r0 = rf(ctx, customerID, beforeSub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.SubscriptionWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, microsoft.Subscription) error); ok {
		r1 = rf(ctx, customerID, beforeSub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuantity provides a mock function with given fields: ctx, customerID, sub, quantity
func (_m *ISubscriptionsService) UpdateQuantity(ctx context.Context, customerID string, sub microsoft.Subscription, quantity int64) (*microsoft.SubscriptionWithStatus, error) {
	ret := _m.Called(ctx, customerID, sub, quantity)

	var r0 *microsoft.SubscriptionWithStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, microsoft.Subscription, int64) *microsoft.SubscriptionWithStatus); ok {
		r0 = rf(ctx, customerID, sub, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.SubscriptionWithStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, microsoft.Subscription, int64) error); ok {
		r1 = rf(ctx, customerID, sub, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISubscriptionsService creates a new instance of ISubscriptionsService. It also registers a cleanup function to assert the mocks expectations.
func NewISubscriptionsService(t testing.TB) *ISubscriptionsService {
	mock := &ISubscriptionsService{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
