// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	microsoft "github.com/doitintl/hello/scheduled-tasks/microsoft"
	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/microsoft/cspServices/service"

	testing "testing"
)

// ICustomersService is an autogenerated mock type for the ICustomersService type
type ICustomersService struct {
	mock.Mock
}

// AcceptAgreement provides a mock function with given fields: ctx, customerID, email, name
func (_m *ICustomersService) AcceptAgreement(ctx context.Context, customerID string, email string, name string) error {
	ret := _m.Called(ctx, customerID, email, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, customerID, email, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgreementsMetadata provides a mock function with given fields: ctx
func (_m *ICustomersService) AgreementsMetadata(ctx context.Context) (*service.AgreementMetadata, error) {
	ret := _m.Called(ctx)

	var r0 *service.AgreementMetadata
	if rf, ok := ret.Get(0).(func(context.Context) *service.AgreementMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.AgreementMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, customerID
func (_m *ICustomersService) Get(ctx context.Context, customerID string) (*microsoft.Customer, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *microsoft.Customer
	if rf, ok := ret.Get(0).(func(context.Context, string) *microsoft.Customer); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*microsoft.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICustomersService creates a new instance of ICustomersService. It also registers a cleanup function to assert the mocks expectations.
func NewICustomersService(t testing.TB) *ICustomersService {
	mock := &ICustomersService{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
