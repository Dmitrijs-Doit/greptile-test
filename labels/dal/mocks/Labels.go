// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	firestore "cloud.google.com/go/firestore"

	labels "github.com/doitintl/hello/scheduled-tasks/labels/domain"

	mock "github.com/stretchr/testify/mock"
)

// Labels is an autogenerated mock type for the Labels type
type Labels struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, label
func (_m *Labels) Create(ctx context.Context, label *labels.Label) (*labels.Label, error) {
	ret := _m.Called(ctx, label)

	var r0 *labels.Label

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, *labels.Label) (*labels.Label, error)); ok {
		return rf(ctx, label)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *labels.Label) *labels.Label); ok {
		r0 = rf(ctx, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*labels.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *labels.Label) error); ok {
		r1 = rf(ctx, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteManyObjectsWithLabels provides a mock function with given fields: ctx, deletedObjRefs
func (_m *Labels) DeleteManyObjectsWithLabels(ctx context.Context, deletedObjRefs []*firestore.DocumentRef) error {
	ret := _m.Called(ctx, deletedObjRefs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*firestore.DocumentRef) error); ok {
		r0 = rf(ctx, deletedObjRefs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObjectWithLabels provides a mock function with given fields: ctx, deletedObjRef
func (_m *Labels) DeleteObjectWithLabels(ctx context.Context, deletedObjRef *firestore.DocumentRef) error {
	ret := _m.Called(ctx, deletedObjRef)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) error); ok {
		r0 = rf(ctx, deletedObjRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, labelID
func (_m *Labels) Get(ctx context.Context, labelID string) (*labels.Label, error) {
	ret := _m.Called(ctx, labelID)

	var r0 *labels.Label

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string) (*labels.Label, error)); ok {
		return rf(ctx, labelID)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string) *labels.Label); ok {
		r0 = rf(ctx, labelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*labels.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, labelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabels provides a mock function with given fields: ctx, labelIDs
func (_m *Labels) GetLabels(ctx context.Context, labelIDs []string) ([]*labels.Label, error) {
	ret := _m.Called(ctx, labelIDs)

	var r0 []*labels.Label

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*labels.Label, error)); ok {
		return rf(ctx, labelIDs)
	}

	if rf, ok := ret.Get(0).(func(context.Context, []string) []*labels.Label); ok {
		r0 = rf(ctx, labelIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*labels.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, labelIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectLabels provides a mock function with given fields: ctx, obj
func (_m *Labels) GetObjectLabels(ctx context.Context, obj *firestore.DocumentRef) ([]*firestore.DocumentRef, error) {
	ret := _m.Called(ctx, obj)

	var r0 []*firestore.DocumentRef

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*firestore.DocumentRef, error)); ok {
		return rf(ctx, obj)
	}

	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*firestore.DocumentRef); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*firestore.DocumentRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, labelID
func (_m *Labels) GetRef(ctx context.Context, labelID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, labelID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, labelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, labelID, updates
func (_m *Labels) Update(ctx context.Context, labelID string, updates []firestore.Update) (*labels.Label, error) {
	ret := _m.Called(ctx, labelID, updates)

	var r0 *labels.Label

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, []firestore.Update) (*labels.Label, error)); ok {
		return rf(ctx, labelID, updates)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, []firestore.Update) *labels.Label); ok {
		r0 = rf(ctx, labelID, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*labels.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []firestore.Update) error); ok {
		r1 = rf(ctx, labelID, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLabels interface {
	mock.TestingT
	Cleanup(func())
}

// NewLabels creates a new instance of Labels. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLabels(t mockConstructorTestingTNewLabels) *Labels {
	mock := &Labels{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
