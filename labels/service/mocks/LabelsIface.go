// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	labels "github.com/doitintl/hello/scheduled-tasks/labels/domain"

	mock "github.com/stretchr/testify/mock"

	service "github.com/doitintl/hello/scheduled-tasks/labels/service"
)

// LabelsIface is an autogenerated mock type for the LabelsIface type
type LabelsIface struct {
	mock.Mock
}

// AssignLabels provides a mock function with given fields: ctx, req
func (_m *LabelsIface) AssignLabels(ctx context.Context, req service.AssignLabelsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.AssignLabelsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLabel provides a mock function with given fields: ctx, req
func (_m *LabelsIface) CreateLabel(ctx context.Context, req service.CreateLabelRequest) (*labels.Label, error) {
	ret := _m.Called(ctx, req)

	var r0 *labels.Label

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, service.CreateLabelRequest) (*labels.Label, error)); ok {
		return rf(ctx, req)
	}

	if rf, ok := ret.Get(0).(func(context.Context, service.CreateLabelRequest) *labels.Label); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*labels.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.CreateLabelRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabel provides a mock function with given fields: ctx, labelID
func (_m *LabelsIface) DeleteLabel(ctx context.Context, labelID string) error {
	ret := _m.Called(ctx, labelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLabel provides a mock function with given fields: ctx, req
func (_m *LabelsIface) UpdateLabel(ctx context.Context, req service.UpdateLabelRequest) (*labels.Label, error) {
	ret := _m.Called(ctx, req)

	var r0 *labels.Label

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, service.UpdateLabelRequest) (*labels.Label, error)); ok {
		return rf(ctx, req)
	}

	if rf, ok := ret.Get(0).(func(context.Context, service.UpdateLabelRequest) *labels.Label); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*labels.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.UpdateLabelRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLabelsIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewLabelsIface creates a new instance of LabelsIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLabelsIface(t mockConstructorTestingTNewLabelsIface) *LabelsIface {
	mock := &LabelsIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
