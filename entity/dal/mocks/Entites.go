// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	domain "github.com/doitintl/hello/scheduled-tasks/stripe/domain"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"
)

// Entites is an autogenerated mock type for the Entites type
type Entites struct {
	mock.Mock
}

// GetCustomerEntities provides a mock function with given fields: ctx, customerRef
func (_m *Entites) GetCustomerEntities(ctx context.Context, customerRef *firestore.DocumentRef) ([]*common.Entity, error) {
	ret := _m.Called(ctx, customerRef)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerEntities")
	}

	var r0 []*common.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) ([]*common.Entity, error)); ok {
		return rf(ctx, customerRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.DocumentRef) []*common.Entity); ok {
		r0 = rf(ctx, customerRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.DocumentRef) error); ok {
		r1 = rf(ctx, customerRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntities provides a mock function with given fields: ctx
func (_m *Entites) GetEntities(ctx context.Context) ([]*common.Entity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEntities")
	}

	var r0 []*common.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*common.Entity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*common.Entity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntitiesCollectionRef provides a mock function with given fields: ctx
func (_m *Entites) GetEntitiesCollectionRef(ctx context.Context) *firestore.CollectionRef {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEntitiesCollectionRef")
	}

	var r0 *firestore.CollectionRef
	if rf, ok := ret.Get(0).(func(context.Context) *firestore.CollectionRef); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.CollectionRef)
		}
	}

	return r0
}

// GetEntity provides a mock function with given fields: ctx, entityID
func (_m *Entites) GetEntity(ctx context.Context, entityID string) (*common.Entity, error) {
	ret := _m.Called(ctx, entityID)

	if len(ret) == 0 {
		panic("no return value specified for GetEntity")
	}

	var r0 *common.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*common.Entity, error)); ok {
		return rf(ctx, entityID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *common.Entity); ok {
		r0 = rf(ctx, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, entityID
func (_m *Entites) GetRef(ctx context.Context, entityID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, entityID)

	if len(ret) == 0 {
		panic("no return value specified for GetRef")
	}

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// ListActiveEntitiesForPayments provides a mock function with given fields: ctx, stripeAccount, paymentTypes
func (_m *Entites) ListActiveEntitiesForPayments(ctx context.Context, stripeAccount domain.StripeAccountID, paymentTypes []common.EntityPaymentType) ([]*common.Entity, error) {
	ret := _m.Called(ctx, stripeAccount, paymentTypes)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveEntitiesForPayments")
	}

	var r0 []*common.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StripeAccountID, []common.EntityPaymentType) ([]*common.Entity, error)); ok {
		return rf(ctx, stripeAccount, paymentTypes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.StripeAccountID, []common.EntityPaymentType) []*common.Entity); ok {
		r0 = rf(ctx, stripeAccount, paymentTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.StripeAccountID, []common.EntityPaymentType) error); ok {
		r1 = rf(ctx, stripeAccount, paymentTypes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEntites creates a new instance of Entites. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntites(t interface {
	mock.TestingT
	Cleanup(func())
}) *Entites {
	mock := &Entites{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
