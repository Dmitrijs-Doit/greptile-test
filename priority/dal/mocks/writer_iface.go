// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/priority/domain"

	mock "github.com/stretchr/testify/mock"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

// CloseInvoice provides a mock function with given fields: ctx, priorityCompany, invoiceID
func (_m *Writer) CloseInvoice(ctx context.Context, priorityCompany string, invoiceID uint64) error {
	ret := _m.Called(ctx, priorityCompany, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for CloseInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, priorityCompany, invoiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvoice provides a mock function with given fields: ctx, invoiceType, invoice
func (_m *Writer) CreateInvoice(ctx context.Context, invoiceType string, invoice domain.Invoice) (string, error) {
	ret := _m.Called(ctx, invoiceType, invoice)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Invoice) (string, error)); ok {
		return rf(ctx, invoiceType, invoice)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Invoice) string); ok {
		r0 = rf(ctx, invoiceType, invoice)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Invoice) error); ok {
		r1 = rf(ctx, invoiceType, invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvoice provides a mock function with given fields: ctx, priorityCompany, invoiceID
func (_m *Writer) DeleteInvoice(ctx context.Context, priorityCompany string, invoiceID uint64) error {
	ret := _m.Called(ctx, priorityCompany, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, priorityCompany, invoiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NullifyInvoiceItems provides a mock function with given fields: ctx, priorityCompany, invoiceType, invoiceNumber, invoiceItems
func (_m *Writer) NullifyInvoiceItems(ctx context.Context, priorityCompany string, invoiceType string, invoiceNumber string, invoiceItems []domain.InvoiceItem) error {
	ret := _m.Called(ctx, priorityCompany, invoiceType, invoiceNumber, invoiceItems)

	if len(ret) == 0 {
		panic("no return value specified for NullifyInvoiceItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []domain.InvoiceItem) error); ok {
		r0 = rf(ctx, priorityCompany, invoiceType, invoiceNumber, invoiceItems)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrintInvoice provides a mock function with given fields: ctx, priorityCompany, customerCountryName, invoiceType, invoiceID
func (_m *Writer) PrintInvoice(ctx context.Context, priorityCompany string, customerCountryName string, invoiceType string, invoiceID uint64) error {
	ret := _m.Called(ctx, priorityCompany, customerCountryName, invoiceType, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for PrintInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, uint64) error); ok {
		r0 = rf(ctx, priorityCompany, customerCountryName, invoiceType, invoiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAvalaraTax provides a mock function with given fields: ctx, priorityCompany, invoiceID
func (_m *Writer) UpdateAvalaraTax(ctx context.Context, priorityCompany string, invoiceID uint64) error {
	ret := _m.Called(ctx, priorityCompany, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvalaraTax")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, priorityCompany, invoiceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInvoiceStatus provides a mock function with given fields: ctx, priorityCompany, invoiceType, invoiceNumber, status
func (_m *Writer) UpdateInvoiceStatus(ctx context.Context, priorityCompany string, invoiceType string, invoiceNumber string, status string) (domain.UpdateInvoiceStatusResponse, error) {
	ret := _m.Called(ctx, priorityCompany, invoiceType, invoiceNumber, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoiceStatus")
	}

	var r0 domain.UpdateInvoiceStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (domain.UpdateInvoiceStatusResponse, error)); ok {
		return rf(ctx, priorityCompany, invoiceType, invoiceNumber, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) domain.UpdateInvoiceStatusResponse); ok {
		r0 = rf(ctx, priorityCompany, invoiceType, invoiceNumber, status)
	} else {
		r0 = ret.Get(0).(domain.UpdateInvoiceStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, invoiceType, invoiceNumber, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceiptStatus provides a mock function with given fields: ctx, priorityCompany, receiptID, status
func (_m *Writer) UpdateReceiptStatus(ctx context.Context, priorityCompany string, receiptID string, status string) error {
	ret := _m.Called(ctx, priorityCompany, receiptID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReceiptStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, priorityCompany, receiptID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
