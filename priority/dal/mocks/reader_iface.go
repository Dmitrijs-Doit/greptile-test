// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/priority/domain"

	mock "github.com/stretchr/testify/mock"

	priority "github.com/doitintl/hello/scheduled-tasks/priority"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// FilterInvoices provides a mock function with given fields: ctx, priorityCompany, invoicesType, filter
func (_m *Reader) FilterInvoices(ctx context.Context, priorityCompany string, invoicesType string, filter string) ([]domain.Invoice, error) {
	ret := _m.Called(ctx, priorityCompany, invoicesType, filter)

	if len(ret) == 0 {
		panic("no return value specified for FilterInvoices")
	}

	var r0 []domain.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]domain.Invoice, error)); ok {
		return rf(ctx, priorityCompany, invoicesType, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []domain.Invoice); ok {
		r0 = rf(ctx, priorityCompany, invoicesType, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, invoicesType, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsReceivables provides a mock function with given fields: ctx, priorityCompany
func (_m *Reader) GetAccountsReceivables(ctx context.Context, priorityCompany priority.CompanyCode) (domain.AccountsReceivable, error) {
	ret := _m.Called(ctx, priorityCompany)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsReceivables")
	}

	var r0 domain.AccountsReceivable
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, priority.CompanyCode) (domain.AccountsReceivable, error)); ok {
		return rf(ctx, priorityCompany)
	}
	if rf, ok := ret.Get(0).(func(context.Context, priority.CompanyCode) domain.AccountsReceivable); ok {
		r0 = rf(ctx, priorityCompany)
	} else {
		r0 = ret.Get(0).(domain.AccountsReceivable)
	}

	if rf, ok := ret.Get(1).(func(context.Context, priority.CompanyCode) error); ok {
		r1 = rf(ctx, priorityCompany)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerCountryName provides a mock function with given fields: ctx, priorityCompany, customerName
func (_m *Reader) GetCustomerCountryName(ctx context.Context, priorityCompany string, customerName string) (string, error) {
	ret := _m.Called(ctx, priorityCompany, customerName)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerCountryName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, priorityCompany, customerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, priorityCompany, customerName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, customerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerDetails provides a mock function with given fields: ctx, priorityCompany, customerName
func (_m *Reader) GetCustomerDetails(ctx context.Context, priorityCompany string, customerName string) (domain.CustomerDetails, error) {
	ret := _m.Called(ctx, priorityCompany, customerName)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerDetails")
	}

	var r0 domain.CustomerDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.CustomerDetails, error)); ok {
		return rf(ctx, priorityCompany, customerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.CustomerDetails); ok {
		r0 = rf(ctx, priorityCompany, customerName)
	} else {
		r0 = ret.Get(0).(domain.CustomerDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, customerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: ctx, priorityCompany
func (_m *Reader) GetCustomers(ctx context.Context, priorityCompany priority.CompanyCode) (domain.Customers, error) {
	ret := _m.Called(ctx, priorityCompany)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomers")
	}

	var r0 domain.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, priority.CompanyCode) (domain.Customers, error)); ok {
		return rf(ctx, priorityCompany)
	}
	if rf, ok := ret.Get(0).(func(context.Context, priority.CompanyCode) domain.Customers); ok {
		r0 = rf(ctx, priorityCompany)
	} else {
		r0 = ret.Get(0).(domain.Customers)
	}

	if rf, ok := ret.Get(1).(func(context.Context, priority.CompanyCode) error); ok {
		r1 = rf(ctx, priorityCompany)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoice provides a mock function with given fields: ctx, priorityCompany, invoiceType, invoiceNumber
func (_m *Reader) GetInvoice(ctx context.Context, priorityCompany string, invoiceType string, invoiceNumber string) (domain.Invoice, error) {
	ret := _m.Called(ctx, priorityCompany, invoiceType, invoiceNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 domain.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (domain.Invoice, error)); ok {
		return rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) domain.Invoice); ok {
		r0 = rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	} else {
		r0 = ret.Get(0).(domain.Invoice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceID provides a mock function with given fields: ctx, priorityCompany, invoiceType, invoiceNumber
func (_m *Reader) GetInvoiceID(ctx context.Context, priorityCompany string, invoiceType string, invoiceNumber string) (uint64, error) {
	ret := _m.Called(ctx, priorityCompany, invoiceType, invoiceNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (uint64, error)); ok {
		return rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) uint64); ok {
		r0 = rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceItems provides a mock function with given fields: ctx, priorityCompany, invoiceType, invoiceNumber
func (_m *Reader) GetInvoiceItems(ctx context.Context, priorityCompany string, invoiceType string, invoiceNumber string) ([]domain.InvoiceItem, error) {
	ret := _m.Called(ctx, priorityCompany, invoiceType, invoiceNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceItems")
	}

	var r0 []domain.InvoiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]domain.InvoiceItem, error)); ok {
		return rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []domain.InvoiceItem); ok {
		r0 = rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.InvoiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, priorityCompany, invoiceType, invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomerReceipts provides a mock function with given fields: ctx, priorityCompany, customerName
func (_m *Reader) ListCustomerReceipts(ctx context.Context, priorityCompany priority.CompanyCode, customerName string) (domain.TInvoices, error) {
	ret := _m.Called(ctx, priorityCompany, customerName)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomerReceipts")
	}

	var r0 domain.TInvoices
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, priority.CompanyCode, string) (domain.TInvoices, error)); ok {
		return rf(ctx, priorityCompany, customerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, priority.CompanyCode, string) domain.TInvoices); ok {
		r0 = rf(ctx, priorityCompany, customerName)
	} else {
		r0 = ret.Get(0).(domain.TInvoices)
	}

	if rf, ok := ret.Get(1).(func(context.Context, priority.CompanyCode, string) error); ok {
		r1 = rf(ctx, priorityCompany, customerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingAvalaraTax provides a mock function with given fields: ctx
func (_m *Reader) PingAvalaraTax(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PingAvalaraTax")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
