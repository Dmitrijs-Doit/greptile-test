// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/amazonwebservices/ples/domain"
	mock "github.com/stretchr/testify/mock"
)

// PLESIface is an autogenerated mock type for the PLESIface type
type PLESIface struct {
	mock.Mock
}

// UpdatePLESAccounts provides a mock function with given fields: ctx, accounts, forceUpdate
func (_m *PLESIface) UpdatePLESAccounts(ctx context.Context, accounts []domain.PLESAccount, forceUpdate bool) []error {
	ret := _m.Called(ctx, accounts, forceUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePLESAccounts")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.PLESAccount, bool) []error); ok {
		r0 = rf(ctx, accounts, forceUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// NewPLESIface creates a new instance of PLESIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPLESIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PLESIface {
	mock := &PLESIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
