// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/doitintl/hello/scheduled-tasks/amazonwebservices/mpa/accounts/dal"
	mock "github.com/stretchr/testify/mock"
)

// Billing is an autogenerated mock type for the Billing type
type Billing struct {
	mock.Mock
}

// GetCoveredUsage provides a mock function with given fields: ctx, accountID, payerID, payerNumber, spARNs, riAccountIDs
func (_m *Billing) GetCoveredUsage(ctx context.Context, accountID string, payerID string, payerNumber int, spARNs []string, riAccountIDs []string) (dal.CoveredUsage, error) {
	ret := _m.Called(ctx, accountID, payerID, payerNumber, spARNs, riAccountIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetCoveredUsage")
	}

	var r0 dal.CoveredUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, []string, []string) (dal.CoveredUsage, error)); ok {
		return rf(ctx, accountID, payerID, payerNumber, spARNs, riAccountIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, []string, []string) dal.CoveredUsage); ok {
		r0 = rf(ctx, accountID, payerID, payerNumber, spARNs, riAccountIDs)
	} else {
		r0 = ret.Get(0).(dal.CoveredUsage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, []string, []string) error); ok {
		r1 = rf(ctx, accountID, payerID, payerNumber, spARNs, riAccountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBilling creates a new instance of Billing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBilling(t interface {
	mock.TestingT
	Cleanup(func())
}) *Billing {
	mock := &Billing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
