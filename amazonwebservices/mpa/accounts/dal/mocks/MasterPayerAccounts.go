// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/amazonwebservices/mpa/accounts/domain"

	firestore "cloud.google.com/go/firestore"

	logger "github.com/doitintl/hello/scheduled-tasks/logger"

	mock "github.com/stretchr/testify/mock"
)

// MasterPayerAccounts is an autogenerated mock type for the MasterPayerAccounts type
type MasterPayerAccounts struct {
	mock.Mock
}

// GetActiveAndRetiredPlesMpa provides a mock function with given fields: ctx
func (_m *MasterPayerAccounts) GetActiveAndRetiredPlesMpa(ctx context.Context) (map[string]*domain.MasterPayerAccount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveAndRetiredPlesMpa")
	}

	var r0 map[string]*domain.MasterPayerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]*domain.MasterPayerAccount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*domain.MasterPayerAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*domain.MasterPayerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerActiveDedicatedPayers provides a mock function with given fields: ctx, customerID
func (_m *MasterPayerAccounts) GetCustomerActiveDedicatedPayers(ctx context.Context, customerID string) ([]domain.MasterPayerAccount, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerActiveDedicatedPayers")
	}

	var r0 []domain.MasterPayerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.MasterPayerAccount, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.MasterPayerAccount); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MasterPayerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMPAWithoutRootAccess provides a mock function with given fields: ctx
func (_m *MasterPayerAccounts) GetMPAWithoutRootAccess(ctx context.Context) (map[string]bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMPAWithoutRootAccess")
	}

	var r0 map[string]bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]bool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterPayerAccount provides a mock function with given fields: ctx, accountNumber
func (_m *MasterPayerAccounts) GetMasterPayerAccount(ctx context.Context, accountNumber string) (*domain.MasterPayerAccount, error) {
	ret := _m.Called(ctx, accountNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterPayerAccount")
	}

	var r0 *domain.MasterPayerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.MasterPayerAccount, error)); ok {
		return rf(ctx, accountNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.MasterPayerAccount); ok {
		r0 = rf(ctx, accountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MasterPayerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterPayerAccountByAccountNumber provides a mock function with given fields: ctx, accountNumber
func (_m *MasterPayerAccounts) GetMasterPayerAccountByAccountNumber(ctx context.Context, accountNumber string) (*domain.MasterPayerAccount, error) {
	ret := _m.Called(ctx, accountNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterPayerAccountByAccountNumber")
	}

	var r0 *domain.MasterPayerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.MasterPayerAccount, error)); ok {
		return rf(ctx, accountNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.MasterPayerAccount); ok {
		r0 = rf(ctx, accountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MasterPayerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterPayerAccounts provides a mock function with given fields: ctx, fs
func (_m *MasterPayerAccounts) GetMasterPayerAccounts(ctx context.Context, fs *firestore.Client) (*domain.MasterPayerAccounts, error) {
	ret := _m.Called(ctx, fs)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterPayerAccounts")
	}

	var r0 *domain.MasterPayerAccounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Client) (*domain.MasterPayerAccounts, error)); ok {
		return rf(ctx, fs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firestore.Client) *domain.MasterPayerAccounts); ok {
		r0 = rf(ctx, fs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MasterPayerAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firestore.Client) error); ok {
		r1 = rf(ctx, fs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterPayerAccountsForDomain provides a mock function with given fields: ctx, customerDomain
func (_m *MasterPayerAccounts) GetMasterPayerAccountsForDomain(ctx context.Context, customerDomain string) ([]*domain.MasterPayerAccount, error) {
	ret := _m.Called(ctx, customerDomain)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterPayerAccountsForDomain")
	}

	var r0 []*domain.MasterPayerAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.MasterPayerAccount, error)); ok {
		return rf(ctx, customerDomain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.MasterPayerAccount); ok {
		r0 = rf(ctx, customerDomain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.MasterPayerAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetireMPAandDeleteAssets provides a mock function with given fields: ctx, _a1, payerID
func (_m *MasterPayerAccounts) RetireMPAandDeleteAssets(ctx context.Context, _a1 logger.ILogger, payerID string) error {
	ret := _m.Called(ctx, _a1, payerID)

	if len(ret) == 0 {
		panic("no return value specified for RetireMPAandDeleteAssets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, logger.ILogger, string) error); ok {
		r0 = rf(ctx, _a1, payerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMPAField provides a mock function with given fields: ctx, accountNumber, updates
func (_m *MasterPayerAccounts) UpdateMPAField(ctx context.Context, accountNumber string, updates []firestore.Update) error {
	ret := _m.Called(ctx, accountNumber, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMPAField")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []firestore.Update) error); ok {
		r0 = rf(ctx, accountNumber, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMasterPayerAccounts creates a new instance of MasterPayerAccounts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMasterPayerAccounts(t interface {
	mock.TestingT
	Cleanup(func())
}) *MasterPayerAccounts {
	mock := &MasterPayerAccounts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
