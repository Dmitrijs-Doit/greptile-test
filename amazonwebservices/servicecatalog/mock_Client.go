// Code generated by mockery v2.35.1. DO NOT EDIT.

package servicecatalog

import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// CreatePortfolioShare provides a mock function with given fields: portfolioID, accountID
func (_m *MockClient) CreatePortfolioShare(portfolioID string, accountID string) error {
	ret := _m.Called(portfolioID, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(portfolioID, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePortfolioShare provides a mock function with given fields: portfolioID, accountID
func (_m *MockClient) DeletePortfolioShare(portfolioID string, accountID string) error {
	ret := _m.Called(portfolioID, accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(portfolioID, accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSharesByNamePrefix provides a mock function with given fields: prefix
func (_m *MockClient) GetAllSharesByNamePrefix(prefix string) (map[string]string, error) {
	ret := _m.Called(prefix)

	var r0 map[string]string

	var r1 error

	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(prefix)
	}

	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPortfoliosByNamePrefix provides a mock function with given fields: prefix
func (_m *MockClient) GetPortfoliosByNamePrefix(prefix string) ([]Portfolio, error) {
	ret := _m.Called(prefix)

	var r0 []Portfolio

	var r1 error

	if rf, ok := ret.Get(0).(func(string) ([]Portfolio, error)); ok {
		return rf(prefix)
	}

	if rf, ok := ret.Get(0).(func(string) []Portfolio); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Portfolio)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsShareQuotaReached provides a mock function with given fields: portfolioID
func (_m *MockClient) IsShareQuotaReached(portfolioID string) (bool, error) {
	ret := _m.Called(portfolioID)

	var r0 bool

	var r1 error

	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(portfolioID)
	}

	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(portfolioID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(portfolioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
