// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/doitintl/hello/scheduled-tasks/iam/permission/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// IPermissionFirestoreDAL is an autogenerated mock type for the IPermissionFirestoreDAL type
type IPermissionFirestoreDAL struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, permissionID
func (_m *IPermissionFirestoreDAL) Get(ctx context.Context, permissionID string) (*domain.Permission, error) {
	ret := _m.Called(ctx, permissionID)

	var r0 *domain.Permission
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Permission); ok {
		r0 = rf(ctx, permissionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, permissionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPermissionFirestoreDAL creates a new instance of IPermissionFirestoreDAL. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPermissionFirestoreDAL(t testing.TB) *IPermissionFirestoreDAL {
	mock := &IPermissionFirestoreDAL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
