// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/doitintl/hello/scheduled-tasks/common"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// CleanOutdatedServices provides a mock function with given fields: ctx, platform, latestVersion
func (_m *App) CleanOutdatedServices(ctx context.Context, platform string, latestVersion int64) (int, error) {
	ret := _m.Called(ctx, platform, latestVersion)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) int); ok {
		r0 = rf(ctx, platform, latestVersion)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, platform, latestVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: ctx, ID
func (_m *App) GetRef(ctx context.Context, ID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, ID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetServiceRef provides a mock function with given fields: ctx, ID
func (_m *App) GetServiceRef(ctx context.Context, ID string) *firestore.DocumentRef {
	ret := _m.Called(ctx, ID)

	var r0 *firestore.DocumentRef
	if rf, ok := ret.Get(0).(func(context.Context, string) *firestore.DocumentRef); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firestore.DocumentRef)
		}
	}

	return r0
}

// GetServicesPlatformVersion provides a mock function with given fields: ctx, platform
func (_m *App) GetServicesPlatformVersion(ctx context.Context, platform string) (int64, error) {
	ret := _m.Called(ctx, platform)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, platform)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, platform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServices provides a mock function with given fields: ctx, lastUpdate, services
func (_m *App) UpdateServices(ctx context.Context, lastUpdate time.Time, services []*common.Service) error {
	ret := _m.Called(ctx, lastUpdate, services)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, []*common.Service) error); ok {
		r0 = rf(ctx, lastUpdate, services)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
